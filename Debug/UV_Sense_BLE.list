
UV_Sense_BLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c84  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  08005dc0  08005dc0  00015dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006004  08006004  00016004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006008  08006008  00016008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000024  20000000  0800600c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 TIMERSERVER_CONTEXT 00000099  20000024  08006030  00020024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 0000003d  200000c0  080060c9  000200c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000100  08006106  00020100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 BLE_APP_CONTEXT 00000088  20000114  08006117  00020114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000001b0  2000019c  0800619f  0002019c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000034c  0800619f  0002034c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 14 MB_MEM1       000001b7  20030028  20030028  00030000  2**2
                  ALLOC
 15 MB_MEM2       00000877  200301e0  200301e0  00030000  2**2
                  ALLOC
 16 .debug_info   0002ea55  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 000058c6  00000000  00000000  0004ec21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00001ca8  00000000  00000000  000544e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00001a60  00000000  00000000  00056190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00025451  00000000  00000000  00057bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0001f689  00000000  00000000  0007d041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000c8984  00000000  00000000  0009c6ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000053  00000000  00000000  0016504e  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000743c  00000000  00000000  001650a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000019c 	.word	0x2000019c
 8000158:	00000000 	.word	0x00000000
 800015c:	08005da8 	.word	0x08005da8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200001a0 	.word	0x200001a0
 8000178:	08005da8 	.word	0x08005da8

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 800018c:	b5b0      	push	{r4, r5, r7, lr}
 800018e:	b088      	sub	sp, #32
 8000190:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000192:	4b0b      	ldr	r3, [pc, #44]	; (80001c0 <APPD_EnableCPU2+0x34>)
 8000194:	1d3c      	adds	r4, r7, #4
 8000196:	461d      	mov	r5, r3
 8000198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800019a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800019c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001a0:	c403      	stmia	r4!, {r0, r1}
 80001a2:	8022      	strh	r2, [r4, #0]
 80001a4:	3402      	adds	r4, #2
 80001a6:	0c13      	lsrs	r3, r2, #16
 80001a8:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80001aa:	f004 fd43 	bl	8004c34 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80001ae:	1d3b      	adds	r3, r7, #4
 80001b0:	4618      	mov	r0, r3
 80001b2:	f004 f914 	bl	80043de <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80001b6:	bf00      	nop
}
 80001b8:	3720      	adds	r7, #32
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bdb0      	pop	{r4, r5, r7, pc}
 80001be:	bf00      	nop
 80001c0:	08005dc0 	.word	0x08005dc0

080001c4 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80001c4:	b480      	push	{r7}
 80001c6:	b083      	sub	sp, #12
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80001cc:	4b07      	ldr	r3, [pc, #28]	; (80001ec <LL_C2_PWR_SetPowerMode+0x28>)
 80001ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80001d2:	f023 0207 	bic.w	r2, r3, #7
 80001d6:	4905      	ldr	r1, [pc, #20]	; (80001ec <LL_C2_PWR_SetPowerMode+0x28>)
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	4313      	orrs	r3, r2
 80001dc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80001e0:	bf00      	nop
 80001e2:	370c      	adds	r7, #12
 80001e4:	46bd      	mov	sp, r7
 80001e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ea:	4770      	bx	lr
 80001ec:	58000400 	.word	0x58000400

080001f0 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80001f0:	b480      	push	{r7}
 80001f2:	b083      	sub	sp, #12
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80001f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001fc:	689b      	ldr	r3, [r3, #8]
 80001fe:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000202:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	4313      	orrs	r3, r2
 800020a:	608b      	str	r3, [r1, #8]
}
 800020c:	bf00      	nop
 800020e:	370c      	adds	r7, #12
 8000210:	46bd      	mov	sp, r7
 8000212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000216:	4770      	bx	lr

08000218 <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 800021c:	f000 f80a 	bl	8000234 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000220:	4903      	ldr	r1, [pc, #12]	; (8000230 <APPE_Init+0x18>)
 8000222:	2000      	movs	r0, #0
 8000224:	f000 fbf4 	bl	8000a10 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000228:	f000 f814 	bl	8000254 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 800022c:	bf00      	nop
}
 800022e:	bd80      	pop	{r7, pc}
 8000230:	20000320 	.word	0x20000320

08000234 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000238:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800023c:	f7ff ffd8 	bl	80001f0 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000240:	f005 fb1a 	bl	8005878 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000244:	2004      	movs	r0, #4
 8000246:	f7ff ffbd 	bl	80001c4 <LL_C2_PWR_SetPowerMode>
  HAL_PWREx_EnableVddUSB();
#endif
  /**
   * Active SRAM retention for standby support
   */
  HAL_PWREx_EnableSRAMRetention();
 800024a:	f001 fb3d 	bl	80018c8 <HAL_PWREx_EnableSRAMRetention>

  return;
 800024e:	bf00      	nop
}
 8000250:	bd80      	pop	{r7, pc}
	...

08000254 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b088      	sub	sp, #32
 8000258:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800025a:	f004 fba7 	bl	80049ac <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 800025e:	4a11      	ldr	r2, [pc, #68]	; (80002a4 <appe_Tl_Init+0x50>)
 8000260:	2100      	movs	r1, #0
 8000262:	2008      	movs	r0, #8
 8000264:	f005 fc2e 	bl	8005ac4 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000268:	4b0f      	ldr	r3, [pc, #60]	; (80002a8 <appe_Tl_Init+0x54>)
 800026a:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 800026c:	4b0f      	ldr	r3, [pc, #60]	; (80002ac <appe_Tl_Init+0x58>)
 800026e:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000270:	463b      	mov	r3, r7
 8000272:	4619      	mov	r1, r3
 8000274:	480e      	ldr	r0, [pc, #56]	; (80002b0 <appe_Tl_Init+0x5c>)
 8000276:	f004 fa5f 	bl	8004738 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800027a:	4b0e      	ldr	r3, [pc, #56]	; (80002b4 <appe_Tl_Init+0x60>)
 800027c:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800027e:	4b0e      	ldr	r3, [pc, #56]	; (80002b8 <appe_Tl_Init+0x64>)
 8000280:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000282:	4b0e      	ldr	r3, [pc, #56]	; (80002bc <appe_Tl_Init+0x68>)
 8000284:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000286:	f240 533c 	movw	r3, #1340	; 0x53c
 800028a:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 800028c:	f107 0308 	add.w	r3, r7, #8
 8000290:	4618      	mov	r0, r3
 8000292:	f004 fc5b 	bl	8004b4c <TL_MM_Init>

  TL_Enable();
 8000296:	f004 fb83 	bl	80049a0 <TL_Enable>

  return;
 800029a:	bf00      	nop
}
 800029c:	3720      	adds	r7, #32
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	08004771 	.word	0x08004771
 80002a8:	20030724 	.word	0x20030724
 80002ac:	080002c1 	.word	0x080002c1
 80002b0:	080002d7 	.word	0x080002d7
 80002b4:	2003093c 	.word	0x2003093c
 80002b8:	20030830 	.word	0x20030830
 80002bc:	200301e8 	.word	0x200301e8

080002c0 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	4603      	mov	r3, r0
 80002c8:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80002ca:	bf00      	nop
}
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr

080002d6 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 80002d6:	b580      	push	{r7, lr}
 80002d8:	b082      	sub	sp, #8
 80002da:	af00      	add	r7, sp, #0
 80002dc:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  APPD_EnableCPU2( );
 80002de:	f7ff ff55 	bl	800018c <APPD_EnableCPU2>

  APP_BLE_Init( );
 80002e2:	f004 fe19 	bl	8004f18 <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80002e6:	2100      	movs	r1, #0
 80002e8:	2001      	movs	r0, #1
 80002ea:	f005 fad7 	bl	800589c <UTIL_LPM_SetOffMode>
  return;
 80002ee:	bf00      	nop
}
 80002f0:	3708      	adds	r7, #8
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}

080002f6 <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 80002f6:	b480      	push	{r7}
 80002f8:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 80002fa:	bf00      	nop
}
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr

08000304 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
 800030c:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 800030e:	f04f 30ff 	mov.w	r0, #4294967295
 8000312:	f005 faf3 	bl	80058fc <UTIL_SEQ_Run>
}
 8000316:	bf00      	nop
 8000318:	3708      	adds	r7, #8
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}

0800031e <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 800031e:	b580      	push	{r7, lr}
 8000320:	b082      	sub	sp, #8
 8000322:	af00      	add	r7, sp, #0
 8000324:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000326:	2100      	movs	r1, #0
 8000328:	2008      	movs	r0, #8
 800032a:	f005 fbed 	bl	8005b08 <UTIL_SEQ_SetTask>
  return;
 800032e:	bf00      	nop
}
 8000330:	3708      	adds	r7, #8
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}

08000336 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000336:	b580      	push	{r7, lr}
 8000338:	b082      	sub	sp, #8
 800033a:	af00      	add	r7, sp, #0
 800033c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 800033e:	2002      	movs	r0, #2
 8000340:	f005 fc4e 	bl	8005be0 <UTIL_SEQ_SetEvt>
  return;
 8000344:	bf00      	nop
}
 8000346:	3708      	adds	r7, #8
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}

0800034c <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000354:	2002      	movs	r0, #2
 8000356:	f005 fc63 	bl	8005c20 <UTIL_SEQ_WaitEvt>
  return;
 800035a:	bf00      	nop
}
 800035c:	3708      	adds	r7, #8
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
	...

08000364 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800036c:	4b06      	ldr	r3, [pc, #24]	; (8000388 <LL_EXTI_EnableIT_0_31+0x24>)
 800036e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000372:	4905      	ldr	r1, [pc, #20]	; (8000388 <LL_EXTI_EnableIT_0_31+0x24>)
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	4313      	orrs	r3, r2
 8000378:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800037c:	bf00      	nop
 800037e:	370c      	adds	r7, #12
 8000380:	46bd      	mov	sp, r7
 8000382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000386:	4770      	bx	lr
 8000388:	58000800 	.word	0x58000800

0800038c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800038c:	b480      	push	{r7}
 800038e:	b083      	sub	sp, #12
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000394:	4b05      	ldr	r3, [pc, #20]	; (80003ac <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000396:	681a      	ldr	r2, [r3, #0]
 8000398:	4904      	ldr	r1, [pc, #16]	; (80003ac <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	4313      	orrs	r3, r2
 800039e:	600b      	str	r3, [r1, #0]

}
 80003a0:	bf00      	nop
 80003a2:	370c      	adds	r7, #12
 80003a4:	46bd      	mov	sp, r7
 80003a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003aa:	4770      	bx	lr
 80003ac:	58000800 	.word	0x58000800

080003b0 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80003b6:	4b0d      	ldr	r3, [pc, #52]	; (80003ec <ReadRtcSsrValue+0x3c>)
 80003b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003ba:	b29b      	uxth	r3, r3
 80003bc:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80003be:	4b0b      	ldr	r3, [pc, #44]	; (80003ec <ReadRtcSsrValue+0x3c>)
 80003c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003c2:	b29b      	uxth	r3, r3
 80003c4:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80003c6:	e005      	b.n	80003d4 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80003c8:	683b      	ldr	r3, [r7, #0]
 80003ca:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80003cc:	4b07      	ldr	r3, [pc, #28]	; (80003ec <ReadRtcSsrValue+0x3c>)
 80003ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003d0:	b29b      	uxth	r3, r3
 80003d2:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80003d4:	687a      	ldr	r2, [r7, #4]
 80003d6:	683b      	ldr	r3, [r7, #0]
 80003d8:	429a      	cmp	r2, r3
 80003da:	d1f5      	bne.n	80003c8 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80003dc:	683b      	ldr	r3, [r7, #0]
}
 80003de:	4618      	mov	r0, r3
 80003e0:	370c      	adds	r7, #12
 80003e2:	46bd      	mov	sp, r7
 80003e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e8:	4770      	bx	lr
 80003ea:	bf00      	nop
 80003ec:	40002800 	.word	0x40002800

080003f0 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b085      	sub	sp, #20
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	4603      	mov	r3, r0
 80003f8:	460a      	mov	r2, r1
 80003fa:	71fb      	strb	r3, [r7, #7]
 80003fc:	4613      	mov	r3, r2
 80003fe:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000400:	79ba      	ldrb	r2, [r7, #6]
 8000402:	491d      	ldr	r1, [pc, #116]	; (8000478 <LinkTimerAfter+0x88>)
 8000404:	4613      	mov	r3, r2
 8000406:	005b      	lsls	r3, r3, #1
 8000408:	4413      	add	r3, r2
 800040a:	00db      	lsls	r3, r3, #3
 800040c:	440b      	add	r3, r1
 800040e:	3315      	adds	r3, #21
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000414:	7bfb      	ldrb	r3, [r7, #15]
 8000416:	2b06      	cmp	r3, #6
 8000418:	d009      	beq.n	800042e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800041a:	7bfa      	ldrb	r2, [r7, #15]
 800041c:	4916      	ldr	r1, [pc, #88]	; (8000478 <LinkTimerAfter+0x88>)
 800041e:	4613      	mov	r3, r2
 8000420:	005b      	lsls	r3, r3, #1
 8000422:	4413      	add	r3, r2
 8000424:	00db      	lsls	r3, r3, #3
 8000426:	440b      	add	r3, r1
 8000428:	3314      	adds	r3, #20
 800042a:	79fa      	ldrb	r2, [r7, #7]
 800042c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 800042e:	79fa      	ldrb	r2, [r7, #7]
 8000430:	4911      	ldr	r1, [pc, #68]	; (8000478 <LinkTimerAfter+0x88>)
 8000432:	4613      	mov	r3, r2
 8000434:	005b      	lsls	r3, r3, #1
 8000436:	4413      	add	r3, r2
 8000438:	00db      	lsls	r3, r3, #3
 800043a:	440b      	add	r3, r1
 800043c:	3315      	adds	r3, #21
 800043e:	7bfa      	ldrb	r2, [r7, #15]
 8000440:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000442:	79fa      	ldrb	r2, [r7, #7]
 8000444:	490c      	ldr	r1, [pc, #48]	; (8000478 <LinkTimerAfter+0x88>)
 8000446:	4613      	mov	r3, r2
 8000448:	005b      	lsls	r3, r3, #1
 800044a:	4413      	add	r3, r2
 800044c:	00db      	lsls	r3, r3, #3
 800044e:	440b      	add	r3, r1
 8000450:	3314      	adds	r3, #20
 8000452:	79ba      	ldrb	r2, [r7, #6]
 8000454:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000456:	79ba      	ldrb	r2, [r7, #6]
 8000458:	4907      	ldr	r1, [pc, #28]	; (8000478 <LinkTimerAfter+0x88>)
 800045a:	4613      	mov	r3, r2
 800045c:	005b      	lsls	r3, r3, #1
 800045e:	4413      	add	r3, r2
 8000460:	00db      	lsls	r3, r3, #3
 8000462:	440b      	add	r3, r1
 8000464:	3315      	adds	r3, #21
 8000466:	79fa      	ldrb	r2, [r7, #7]
 8000468:	701a      	strb	r2, [r3, #0]

  return;
 800046a:	bf00      	nop
}
 800046c:	3714      	adds	r7, #20
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	20000024 	.word	0x20000024

0800047c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
 8000482:	4603      	mov	r3, r0
 8000484:	460a      	mov	r2, r1
 8000486:	71fb      	strb	r3, [r7, #7]
 8000488:	4613      	mov	r3, r2
 800048a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 800048c:	4b29      	ldr	r3, [pc, #164]	; (8000534 <LinkTimerBefore+0xb8>)
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	b2db      	uxtb	r3, r3
 8000492:	79ba      	ldrb	r2, [r7, #6]
 8000494:	429a      	cmp	r2, r3
 8000496:	d032      	beq.n	80004fe <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000498:	79ba      	ldrb	r2, [r7, #6]
 800049a:	4927      	ldr	r1, [pc, #156]	; (8000538 <LinkTimerBefore+0xbc>)
 800049c:	4613      	mov	r3, r2
 800049e:	005b      	lsls	r3, r3, #1
 80004a0:	4413      	add	r3, r2
 80004a2:	00db      	lsls	r3, r3, #3
 80004a4:	440b      	add	r3, r1
 80004a6:	3314      	adds	r3, #20
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80004ac:	7bfa      	ldrb	r2, [r7, #15]
 80004ae:	4922      	ldr	r1, [pc, #136]	; (8000538 <LinkTimerBefore+0xbc>)
 80004b0:	4613      	mov	r3, r2
 80004b2:	005b      	lsls	r3, r3, #1
 80004b4:	4413      	add	r3, r2
 80004b6:	00db      	lsls	r3, r3, #3
 80004b8:	440b      	add	r3, r1
 80004ba:	3315      	adds	r3, #21
 80004bc:	79fa      	ldrb	r2, [r7, #7]
 80004be:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80004c0:	79fa      	ldrb	r2, [r7, #7]
 80004c2:	491d      	ldr	r1, [pc, #116]	; (8000538 <LinkTimerBefore+0xbc>)
 80004c4:	4613      	mov	r3, r2
 80004c6:	005b      	lsls	r3, r3, #1
 80004c8:	4413      	add	r3, r2
 80004ca:	00db      	lsls	r3, r3, #3
 80004cc:	440b      	add	r3, r1
 80004ce:	3315      	adds	r3, #21
 80004d0:	79ba      	ldrb	r2, [r7, #6]
 80004d2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80004d4:	79fa      	ldrb	r2, [r7, #7]
 80004d6:	4918      	ldr	r1, [pc, #96]	; (8000538 <LinkTimerBefore+0xbc>)
 80004d8:	4613      	mov	r3, r2
 80004da:	005b      	lsls	r3, r3, #1
 80004dc:	4413      	add	r3, r2
 80004de:	00db      	lsls	r3, r3, #3
 80004e0:	440b      	add	r3, r1
 80004e2:	3314      	adds	r3, #20
 80004e4:	7bfa      	ldrb	r2, [r7, #15]
 80004e6:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80004e8:	79ba      	ldrb	r2, [r7, #6]
 80004ea:	4913      	ldr	r1, [pc, #76]	; (8000538 <LinkTimerBefore+0xbc>)
 80004ec:	4613      	mov	r3, r2
 80004ee:	005b      	lsls	r3, r3, #1
 80004f0:	4413      	add	r3, r2
 80004f2:	00db      	lsls	r3, r3, #3
 80004f4:	440b      	add	r3, r1
 80004f6:	3314      	adds	r3, #20
 80004f8:	79fa      	ldrb	r2, [r7, #7]
 80004fa:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80004fc:	e014      	b.n	8000528 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80004fe:	79fa      	ldrb	r2, [r7, #7]
 8000500:	490d      	ldr	r1, [pc, #52]	; (8000538 <LinkTimerBefore+0xbc>)
 8000502:	4613      	mov	r3, r2
 8000504:	005b      	lsls	r3, r3, #1
 8000506:	4413      	add	r3, r2
 8000508:	00db      	lsls	r3, r3, #3
 800050a:	440b      	add	r3, r1
 800050c:	3315      	adds	r3, #21
 800050e:	79ba      	ldrb	r2, [r7, #6]
 8000510:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000512:	79ba      	ldrb	r2, [r7, #6]
 8000514:	4908      	ldr	r1, [pc, #32]	; (8000538 <LinkTimerBefore+0xbc>)
 8000516:	4613      	mov	r3, r2
 8000518:	005b      	lsls	r3, r3, #1
 800051a:	4413      	add	r3, r2
 800051c:	00db      	lsls	r3, r3, #3
 800051e:	440b      	add	r3, r1
 8000520:	3314      	adds	r3, #20
 8000522:	79fa      	ldrb	r2, [r7, #7]
 8000524:	701a      	strb	r2, [r3, #0]
  return;
 8000526:	bf00      	nop
}
 8000528:	3714      	adds	r7, #20
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	200000b4 	.word	0x200000b4
 8000538:	20000024 	.word	0x20000024

0800053c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000546:	4b4e      	ldr	r3, [pc, #312]	; (8000680 <linkTimer+0x144>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	b2db      	uxtb	r3, r3
 800054c:	2b06      	cmp	r3, #6
 800054e:	d118      	bne.n	8000582 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000550:	4b4b      	ldr	r3, [pc, #300]	; (8000680 <linkTimer+0x144>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	b2da      	uxtb	r2, r3
 8000556:	4b4b      	ldr	r3, [pc, #300]	; (8000684 <linkTimer+0x148>)
 8000558:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800055a:	4a49      	ldr	r2, [pc, #292]	; (8000680 <linkTimer+0x144>)
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000560:	79fa      	ldrb	r2, [r7, #7]
 8000562:	4949      	ldr	r1, [pc, #292]	; (8000688 <linkTimer+0x14c>)
 8000564:	4613      	mov	r3, r2
 8000566:	005b      	lsls	r3, r3, #1
 8000568:	4413      	add	r3, r2
 800056a:	00db      	lsls	r3, r3, #3
 800056c:	440b      	add	r3, r1
 800056e:	3315      	adds	r3, #21
 8000570:	2206      	movs	r2, #6
 8000572:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000574:	4b45      	ldr	r3, [pc, #276]	; (800068c <linkTimer+0x150>)
 8000576:	f04f 32ff 	mov.w	r2, #4294967295
 800057a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 800057c:	2300      	movs	r3, #0
 800057e:	81fb      	strh	r3, [r7, #14]
 8000580:	e078      	b.n	8000674 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000582:	f000 f909 	bl	8000798 <ReturnTimeElapsed>
 8000586:	4603      	mov	r3, r0
 8000588:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800058a:	79fa      	ldrb	r2, [r7, #7]
 800058c:	493e      	ldr	r1, [pc, #248]	; (8000688 <linkTimer+0x14c>)
 800058e:	4613      	mov	r3, r2
 8000590:	005b      	lsls	r3, r3, #1
 8000592:	4413      	add	r3, r2
 8000594:	00db      	lsls	r3, r3, #3
 8000596:	440b      	add	r3, r1
 8000598:	3308      	adds	r3, #8
 800059a:	6819      	ldr	r1, [r3, #0]
 800059c:	89fb      	ldrh	r3, [r7, #14]
 800059e:	79fa      	ldrb	r2, [r7, #7]
 80005a0:	4419      	add	r1, r3
 80005a2:	4839      	ldr	r0, [pc, #228]	; (8000688 <linkTimer+0x14c>)
 80005a4:	4613      	mov	r3, r2
 80005a6:	005b      	lsls	r3, r3, #1
 80005a8:	4413      	add	r3, r2
 80005aa:	00db      	lsls	r3, r3, #3
 80005ac:	4403      	add	r3, r0
 80005ae:	3308      	adds	r3, #8
 80005b0:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80005b2:	79fa      	ldrb	r2, [r7, #7]
 80005b4:	4934      	ldr	r1, [pc, #208]	; (8000688 <linkTimer+0x14c>)
 80005b6:	4613      	mov	r3, r2
 80005b8:	005b      	lsls	r3, r3, #1
 80005ba:	4413      	add	r3, r2
 80005bc:	00db      	lsls	r3, r3, #3
 80005be:	440b      	add	r3, r1
 80005c0:	3308      	adds	r3, #8
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80005c6:	4b2e      	ldr	r3, [pc, #184]	; (8000680 <linkTimer+0x144>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	4619      	mov	r1, r3
 80005ce:	4a2e      	ldr	r2, [pc, #184]	; (8000688 <linkTimer+0x14c>)
 80005d0:	460b      	mov	r3, r1
 80005d2:	005b      	lsls	r3, r3, #1
 80005d4:	440b      	add	r3, r1
 80005d6:	00db      	lsls	r3, r3, #3
 80005d8:	4413      	add	r3, r2
 80005da:	3308      	adds	r3, #8
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	68ba      	ldr	r2, [r7, #8]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d337      	bcc.n	8000654 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80005e4:	4b26      	ldr	r3, [pc, #152]	; (8000680 <linkTimer+0x144>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80005ea:	7b7a      	ldrb	r2, [r7, #13]
 80005ec:	4926      	ldr	r1, [pc, #152]	; (8000688 <linkTimer+0x14c>)
 80005ee:	4613      	mov	r3, r2
 80005f0:	005b      	lsls	r3, r3, #1
 80005f2:	4413      	add	r3, r2
 80005f4:	00db      	lsls	r3, r3, #3
 80005f6:	440b      	add	r3, r1
 80005f8:	3315      	adds	r3, #21
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80005fe:	e013      	b.n	8000628 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000600:	7b7a      	ldrb	r2, [r7, #13]
 8000602:	4921      	ldr	r1, [pc, #132]	; (8000688 <linkTimer+0x14c>)
 8000604:	4613      	mov	r3, r2
 8000606:	005b      	lsls	r3, r3, #1
 8000608:	4413      	add	r3, r2
 800060a:	00db      	lsls	r3, r3, #3
 800060c:	440b      	add	r3, r1
 800060e:	3315      	adds	r3, #21
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000614:	7b7a      	ldrb	r2, [r7, #13]
 8000616:	491c      	ldr	r1, [pc, #112]	; (8000688 <linkTimer+0x14c>)
 8000618:	4613      	mov	r3, r2
 800061a:	005b      	lsls	r3, r3, #1
 800061c:	4413      	add	r3, r2
 800061e:	00db      	lsls	r3, r3, #3
 8000620:	440b      	add	r3, r1
 8000622:	3315      	adds	r3, #21
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000628:	7b3b      	ldrb	r3, [r7, #12]
 800062a:	2b06      	cmp	r3, #6
 800062c:	d00b      	beq.n	8000646 <linkTimer+0x10a>
 800062e:	7b3a      	ldrb	r2, [r7, #12]
 8000630:	4915      	ldr	r1, [pc, #84]	; (8000688 <linkTimer+0x14c>)
 8000632:	4613      	mov	r3, r2
 8000634:	005b      	lsls	r3, r3, #1
 8000636:	4413      	add	r3, r2
 8000638:	00db      	lsls	r3, r3, #3
 800063a:	440b      	add	r3, r1
 800063c:	3308      	adds	r3, #8
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	68ba      	ldr	r2, [r7, #8]
 8000642:	429a      	cmp	r2, r3
 8000644:	d2dc      	bcs.n	8000600 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000646:	7b7a      	ldrb	r2, [r7, #13]
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	4611      	mov	r1, r2
 800064c:	4618      	mov	r0, r3
 800064e:	f7ff fecf 	bl	80003f0 <LinkTimerAfter>
 8000652:	e00f      	b.n	8000674 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000654:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <linkTimer+0x144>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	b2da      	uxtb	r2, r3
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	4611      	mov	r1, r2
 800065e:	4618      	mov	r0, r3
 8000660:	f7ff ff0c 	bl	800047c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <linkTimer+0x144>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	b2da      	uxtb	r2, r3
 800066a:	4b06      	ldr	r3, [pc, #24]	; (8000684 <linkTimer+0x148>)
 800066c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 800066e:	4a04      	ldr	r2, [pc, #16]	; (8000680 <linkTimer+0x144>)
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000674:	89fb      	ldrh	r3, [r7, #14]
}
 8000676:	4618      	mov	r0, r3
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	200000b4 	.word	0x200000b4
 8000684:	200000b5 	.word	0x200000b5
 8000688:	20000024 	.word	0x20000024
 800068c:	200000b8 	.word	0x200000b8

08000690 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000690:	b480      	push	{r7}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	460a      	mov	r2, r1
 800069a:	71fb      	strb	r3, [r7, #7]
 800069c:	4613      	mov	r3, r2
 800069e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80006a0:	4b39      	ldr	r3, [pc, #228]	; (8000788 <UnlinkTimer+0xf8>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	79fa      	ldrb	r2, [r7, #7]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	d111      	bne.n	80006d0 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80006ac:	4b36      	ldr	r3, [pc, #216]	; (8000788 <UnlinkTimer+0xf8>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	b2da      	uxtb	r2, r3
 80006b2:	4b36      	ldr	r3, [pc, #216]	; (800078c <UnlinkTimer+0xfc>)
 80006b4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80006b6:	79fa      	ldrb	r2, [r7, #7]
 80006b8:	4935      	ldr	r1, [pc, #212]	; (8000790 <UnlinkTimer+0x100>)
 80006ba:	4613      	mov	r3, r2
 80006bc:	005b      	lsls	r3, r3, #1
 80006be:	4413      	add	r3, r2
 80006c0:	00db      	lsls	r3, r3, #3
 80006c2:	440b      	add	r3, r1
 80006c4:	3315      	adds	r3, #21
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	b2da      	uxtb	r2, r3
 80006ca:	4b2f      	ldr	r3, [pc, #188]	; (8000788 <UnlinkTimer+0xf8>)
 80006cc:	701a      	strb	r2, [r3, #0]
 80006ce:	e03e      	b.n	800074e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80006d0:	79fa      	ldrb	r2, [r7, #7]
 80006d2:	492f      	ldr	r1, [pc, #188]	; (8000790 <UnlinkTimer+0x100>)
 80006d4:	4613      	mov	r3, r2
 80006d6:	005b      	lsls	r3, r3, #1
 80006d8:	4413      	add	r3, r2
 80006da:	00db      	lsls	r3, r3, #3
 80006dc:	440b      	add	r3, r1
 80006de:	3314      	adds	r3, #20
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80006e4:	79fa      	ldrb	r2, [r7, #7]
 80006e6:	492a      	ldr	r1, [pc, #168]	; (8000790 <UnlinkTimer+0x100>)
 80006e8:	4613      	mov	r3, r2
 80006ea:	005b      	lsls	r3, r3, #1
 80006ec:	4413      	add	r3, r2
 80006ee:	00db      	lsls	r3, r3, #3
 80006f0:	440b      	add	r3, r1
 80006f2:	3315      	adds	r3, #21
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80006f8:	79f9      	ldrb	r1, [r7, #7]
 80006fa:	7bfa      	ldrb	r2, [r7, #15]
 80006fc:	4824      	ldr	r0, [pc, #144]	; (8000790 <UnlinkTimer+0x100>)
 80006fe:	460b      	mov	r3, r1
 8000700:	005b      	lsls	r3, r3, #1
 8000702:	440b      	add	r3, r1
 8000704:	00db      	lsls	r3, r3, #3
 8000706:	4403      	add	r3, r0
 8000708:	3315      	adds	r3, #21
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	b2d8      	uxtb	r0, r3
 800070e:	4920      	ldr	r1, [pc, #128]	; (8000790 <UnlinkTimer+0x100>)
 8000710:	4613      	mov	r3, r2
 8000712:	005b      	lsls	r3, r3, #1
 8000714:	4413      	add	r3, r2
 8000716:	00db      	lsls	r3, r3, #3
 8000718:	440b      	add	r3, r1
 800071a:	3315      	adds	r3, #21
 800071c:	4602      	mov	r2, r0
 800071e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000720:	7bbb      	ldrb	r3, [r7, #14]
 8000722:	2b06      	cmp	r3, #6
 8000724:	d013      	beq.n	800074e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000726:	79f9      	ldrb	r1, [r7, #7]
 8000728:	7bba      	ldrb	r2, [r7, #14]
 800072a:	4819      	ldr	r0, [pc, #100]	; (8000790 <UnlinkTimer+0x100>)
 800072c:	460b      	mov	r3, r1
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	440b      	add	r3, r1
 8000732:	00db      	lsls	r3, r3, #3
 8000734:	4403      	add	r3, r0
 8000736:	3314      	adds	r3, #20
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	b2d8      	uxtb	r0, r3
 800073c:	4914      	ldr	r1, [pc, #80]	; (8000790 <UnlinkTimer+0x100>)
 800073e:	4613      	mov	r3, r2
 8000740:	005b      	lsls	r3, r3, #1
 8000742:	4413      	add	r3, r2
 8000744:	00db      	lsls	r3, r3, #3
 8000746:	440b      	add	r3, r1
 8000748:	3314      	adds	r3, #20
 800074a:	4602      	mov	r2, r0
 800074c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 800074e:	79fa      	ldrb	r2, [r7, #7]
 8000750:	490f      	ldr	r1, [pc, #60]	; (8000790 <UnlinkTimer+0x100>)
 8000752:	4613      	mov	r3, r2
 8000754:	005b      	lsls	r3, r3, #1
 8000756:	4413      	add	r3, r2
 8000758:	00db      	lsls	r3, r3, #3
 800075a:	440b      	add	r3, r1
 800075c:	330c      	adds	r3, #12
 800075e:	2201      	movs	r2, #1
 8000760:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000762:	4b09      	ldr	r3, [pc, #36]	; (8000788 <UnlinkTimer+0xf8>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	b2db      	uxtb	r3, r3
 8000768:	2b06      	cmp	r3, #6
 800076a:	d107      	bne.n	800077c <UnlinkTimer+0xec>
 800076c:	79bb      	ldrb	r3, [r7, #6]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d104      	bne.n	800077c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <UnlinkTimer+0x104>)
 8000774:	f04f 32ff 	mov.w	r2, #4294967295
 8000778:	601a      	str	r2, [r3, #0]
  }

  return;
 800077a:	bf00      	nop
 800077c:	bf00      	nop
}
 800077e:	3714      	adds	r7, #20
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	200000b4 	.word	0x200000b4
 800078c:	200000b5 	.word	0x200000b5
 8000790:	20000024 	.word	0x20000024
 8000794:	200000b8 	.word	0x200000b8

08000798 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 800079e:	4b1a      	ldr	r3, [pc, #104]	; (8000808 <ReturnTimeElapsed+0x70>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007a6:	d026      	beq.n	80007f6 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80007a8:	f7ff fe02 	bl	80003b0 <ReadRtcSsrValue>
 80007ac:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80007ae:	4b16      	ldr	r3, [pc, #88]	; (8000808 <ReturnTimeElapsed+0x70>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	d805      	bhi.n	80007c4 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80007b8:	4b13      	ldr	r3, [pc, #76]	; (8000808 <ReturnTimeElapsed+0x70>)
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	1ad3      	subs	r3, r2, r3
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	e00a      	b.n	80007da <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80007c4:	4b11      	ldr	r3, [pc, #68]	; (800080c <ReturnTimeElapsed+0x74>)
 80007c6:	881b      	ldrh	r3, [r3, #0]
 80007c8:	461a      	mov	r2, r3
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	1ad3      	subs	r3, r2, r3
 80007ce:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80007d0:	4b0d      	ldr	r3, [pc, #52]	; (8000808 <ReturnTimeElapsed+0x70>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	683a      	ldr	r2, [r7, #0]
 80007d6:	4413      	add	r3, r2
 80007d8:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80007da:	4b0d      	ldr	r3, [pc, #52]	; (8000810 <ReturnTimeElapsed+0x78>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	461a      	mov	r2, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	fb02 f303 	mul.w	r3, r2, r3
 80007e6:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80007e8:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <ReturnTimeElapsed+0x7c>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	461a      	mov	r2, r3
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	40d3      	lsrs	r3, r2
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	e001      	b.n	80007fa <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	b29b      	uxth	r3, r3
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	200000b8 	.word	0x200000b8
 800080c:	200001be 	.word	0x200001be
 8000810:	200001bd 	.word	0x200001bd
 8000814:	200001bc 	.word	0x200001bc

08000818 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8000822:	88fb      	ldrh	r3, [r7, #6]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d108      	bne.n	800083a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000828:	f7ff fdc2 	bl	80003b0 <ReadRtcSsrValue>
 800082c:	4603      	mov	r3, r0
 800082e:	4a24      	ldr	r2, [pc, #144]	; (80008c0 <RestartWakeupCounter+0xa8>)
 8000830:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000832:	2003      	movs	r0, #3
 8000834:	f000 ff61 	bl	80016fa <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000838:	e03e      	b.n	80008b8 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800083a:	88fb      	ldrh	r3, [r7, #6]
 800083c:	2b01      	cmp	r3, #1
 800083e:	d803      	bhi.n	8000848 <RestartWakeupCounter+0x30>
 8000840:	4b20      	ldr	r3, [pc, #128]	; (80008c4 <RestartWakeupCounter+0xac>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b01      	cmp	r3, #1
 8000846:	d002      	beq.n	800084e <RestartWakeupCounter+0x36>
      Value -= 1;
 8000848:	88fb      	ldrh	r3, [r7, #6]
 800084a:	3b01      	subs	r3, #1
 800084c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800084e:	bf00      	nop
 8000850:	4b1d      	ldr	r3, [pc, #116]	; (80008c8 <RestartWakeupCounter+0xb0>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	f003 0304 	and.w	r3, r3, #4
 800085c:	2b00      	cmp	r3, #0
 800085e:	d0f7      	beq.n	8000850 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000860:	4b19      	ldr	r3, [pc, #100]	; (80008c8 <RestartWakeupCounter+0xb0>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	b2da      	uxtb	r2, r3
 800086a:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <RestartWakeupCounter+0xb0>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000874:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000876:	4b15      	ldr	r3, [pc, #84]	; (80008cc <RestartWakeupCounter+0xb4>)
 8000878:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800087c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800087e:	2003      	movs	r0, #3
 8000880:	f000 ff49 	bl	8001716 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000884:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <RestartWakeupCounter+0xb8>)
 8000886:	695b      	ldr	r3, [r3, #20]
 8000888:	0c1b      	lsrs	r3, r3, #16
 800088a:	041b      	lsls	r3, r3, #16
 800088c:	88fa      	ldrh	r2, [r7, #6]
 800088e:	4910      	ldr	r1, [pc, #64]	; (80008d0 <RestartWakeupCounter+0xb8>)
 8000890:	4313      	orrs	r3, r2
 8000892:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000894:	f7ff fd8c 	bl	80003b0 <ReadRtcSsrValue>
 8000898:	4603      	mov	r3, r0
 800089a:	4a09      	ldr	r2, [pc, #36]	; (80008c0 <RestartWakeupCounter+0xa8>)
 800089c:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 800089e:	4b0a      	ldr	r3, [pc, #40]	; (80008c8 <RestartWakeupCounter+0xb0>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	689a      	ldr	r2, [r3, #8]
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <RestartWakeupCounter+0xb0>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80008b0:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80008b2:	f3af 8000 	nop.w
  return ;
 80008b6:	bf00      	nop
}
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200000b8 	.word	0x200000b8
 80008c4:	200001bc 	.word	0x200001bc
 80008c8:	200001b8 	.word	0x200001b8
 80008cc:	58000800 	.word	0x58000800
 80008d0:	40002800 	.word	0x40002800

080008d4 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80008da:	4b47      	ldr	r3, [pc, #284]	; (80009f8 <RescheduleTimerList+0x124>)
 80008dc:	689b      	ldr	r3, [r3, #8]
 80008de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008e6:	d108      	bne.n	80008fa <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80008e8:	bf00      	nop
 80008ea:	4b44      	ldr	r3, [pc, #272]	; (80009fc <RescheduleTimerList+0x128>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	68db      	ldr	r3, [r3, #12]
 80008f2:	f003 0304 	and.w	r3, r3, #4
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d1f7      	bne.n	80008ea <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80008fa:	4b40      	ldr	r3, [pc, #256]	; (80009fc <RescheduleTimerList+0x128>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	689a      	ldr	r2, [r3, #8]
 8000902:	4b3e      	ldr	r3, [pc, #248]	; (80009fc <RescheduleTimerList+0x128>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800090c:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 800090e:	4b3c      	ldr	r3, [pc, #240]	; (8000a00 <RescheduleTimerList+0x12c>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000914:	7bfa      	ldrb	r2, [r7, #15]
 8000916:	493b      	ldr	r1, [pc, #236]	; (8000a04 <RescheduleTimerList+0x130>)
 8000918:	4613      	mov	r3, r2
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	4413      	add	r3, r2
 800091e:	00db      	lsls	r3, r3, #3
 8000920:	440b      	add	r3, r1
 8000922:	3308      	adds	r3, #8
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000928:	f7ff ff36 	bl	8000798 <ReturnTimeElapsed>
 800092c:	4603      	mov	r3, r0
 800092e:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000930:	88fb      	ldrh	r3, [r7, #6]
 8000932:	68ba      	ldr	r2, [r7, #8]
 8000934:	429a      	cmp	r2, r3
 8000936:	d205      	bcs.n	8000944 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800093c:	4b32      	ldr	r3, [pc, #200]	; (8000a08 <RescheduleTimerList+0x134>)
 800093e:	2201      	movs	r2, #1
 8000940:	701a      	strb	r2, [r3, #0]
 8000942:	e04d      	b.n	80009e0 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000944:	88fb      	ldrh	r3, [r7, #6]
 8000946:	4a31      	ldr	r2, [pc, #196]	; (8000a0c <RescheduleTimerList+0x138>)
 8000948:	8812      	ldrh	r2, [r2, #0]
 800094a:	b292      	uxth	r2, r2
 800094c:	4413      	add	r3, r2
 800094e:	461a      	mov	r2, r3
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	4293      	cmp	r3, r2
 8000954:	d906      	bls.n	8000964 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000956:	4b2d      	ldr	r3, [pc, #180]	; (8000a0c <RescheduleTimerList+0x138>)
 8000958:	881b      	ldrh	r3, [r3, #0]
 800095a:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 800095c:	4b2a      	ldr	r3, [pc, #168]	; (8000a08 <RescheduleTimerList+0x134>)
 800095e:	2200      	movs	r2, #0
 8000960:	701a      	strb	r2, [r3, #0]
 8000962:	e03d      	b.n	80009e0 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	b29a      	uxth	r2, r3
 8000968:	88fb      	ldrh	r3, [r7, #6]
 800096a:	1ad3      	subs	r3, r2, r3
 800096c:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800096e:	4b26      	ldr	r3, [pc, #152]	; (8000a08 <RescheduleTimerList+0x134>)
 8000970:	2201      	movs	r2, #1
 8000972:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000974:	e034      	b.n	80009e0 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000976:	7bfa      	ldrb	r2, [r7, #15]
 8000978:	4922      	ldr	r1, [pc, #136]	; (8000a04 <RescheduleTimerList+0x130>)
 800097a:	4613      	mov	r3, r2
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	4413      	add	r3, r2
 8000980:	00db      	lsls	r3, r3, #3
 8000982:	440b      	add	r3, r1
 8000984:	3308      	adds	r3, #8
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	88fb      	ldrh	r3, [r7, #6]
 800098a:	429a      	cmp	r2, r3
 800098c:	d20a      	bcs.n	80009a4 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 800098e:	7bfa      	ldrb	r2, [r7, #15]
 8000990:	491c      	ldr	r1, [pc, #112]	; (8000a04 <RescheduleTimerList+0x130>)
 8000992:	4613      	mov	r3, r2
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	4413      	add	r3, r2
 8000998:	00db      	lsls	r3, r3, #3
 800099a:	440b      	add	r3, r1
 800099c:	3308      	adds	r3, #8
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	e013      	b.n	80009cc <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80009a4:	7bfa      	ldrb	r2, [r7, #15]
 80009a6:	4917      	ldr	r1, [pc, #92]	; (8000a04 <RescheduleTimerList+0x130>)
 80009a8:	4613      	mov	r3, r2
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	4413      	add	r3, r2
 80009ae:	00db      	lsls	r3, r3, #3
 80009b0:	440b      	add	r3, r1
 80009b2:	3308      	adds	r3, #8
 80009b4:	6819      	ldr	r1, [r3, #0]
 80009b6:	88fb      	ldrh	r3, [r7, #6]
 80009b8:	7bfa      	ldrb	r2, [r7, #15]
 80009ba:	1ac9      	subs	r1, r1, r3
 80009bc:	4811      	ldr	r0, [pc, #68]	; (8000a04 <RescheduleTimerList+0x130>)
 80009be:	4613      	mov	r3, r2
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	4413      	add	r3, r2
 80009c4:	00db      	lsls	r3, r3, #3
 80009c6:	4403      	add	r3, r0
 80009c8:	3308      	adds	r3, #8
 80009ca:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80009cc:	7bfa      	ldrb	r2, [r7, #15]
 80009ce:	490d      	ldr	r1, [pc, #52]	; (8000a04 <RescheduleTimerList+0x130>)
 80009d0:	4613      	mov	r3, r2
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	4413      	add	r3, r2
 80009d6:	00db      	lsls	r3, r3, #3
 80009d8:	440b      	add	r3, r1
 80009da:	3315      	adds	r3, #21
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80009e0:	7bfb      	ldrb	r3, [r7, #15]
 80009e2:	2b06      	cmp	r3, #6
 80009e4:	d1c7      	bne.n	8000976 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80009e6:	89bb      	ldrh	r3, [r7, #12]
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff ff15 	bl	8000818 <RestartWakeupCounter>

  return ;
 80009ee:	bf00      	nop
}
 80009f0:	3710      	adds	r7, #16
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40002800 	.word	0x40002800
 80009fc:	200001b8 	.word	0x200001b8
 8000a00:	200000b4 	.word	0x200000b4
 8000a04:	20000024 	.word	0x20000024
 8000a08:	200000bc 	.word	0x200000bc
 8000a0c:	200001c0 	.word	0x200001c0

08000a10 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b088      	sub	sp, #32
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	6039      	str	r1, [r7, #0]
 8000a1a:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8000a1c:	4a64      	ldr	r2, [pc, #400]	; (8000bb0 <HW_TS_Init+0x1a0>)
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000a22:	4b63      	ldr	r3, [pc, #396]	; (8000bb0 <HW_TS_Init+0x1a0>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	22ca      	movs	r2, #202	; 0xca
 8000a2a:	625a      	str	r2, [r3, #36]	; 0x24
 8000a2c:	4b60      	ldr	r3, [pc, #384]	; (8000bb0 <HW_TS_Init+0x1a0>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2253      	movs	r2, #83	; 0x53
 8000a34:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000a36:	4b5f      	ldr	r3, [pc, #380]	; (8000bb4 <HW_TS_Init+0x1a4>)
 8000a38:	689b      	ldr	r3, [r3, #8]
 8000a3a:	4a5e      	ldr	r2, [pc, #376]	; (8000bb4 <HW_TS_Init+0x1a4>)
 8000a3c:	f043 0320 	orr.w	r3, r3, #32
 8000a40:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000a42:	4b5c      	ldr	r3, [pc, #368]	; (8000bb4 <HW_TS_Init+0x1a4>)
 8000a44:	689b      	ldr	r3, [r3, #8]
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	f003 0307 	and.w	r3, r3, #7
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	f1c3 0304 	rsb	r3, r3, #4
 8000a52:	b2da      	uxtb	r2, r3
 8000a54:	4b58      	ldr	r3, [pc, #352]	; (8000bb8 <HW_TS_Init+0x1a8>)
 8000a56:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000a58:	4b56      	ldr	r3, [pc, #344]	; (8000bb4 <HW_TS_Init+0x1a4>)
 8000a5a:	691b      	ldr	r3, [r3, #16]
 8000a5c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000a60:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8000a64:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	fa92 f2a2 	rbit	r2, r2
 8000a6c:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000a6e:	68fa      	ldr	r2, [r7, #12]
 8000a70:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000a72:	697a      	ldr	r2, [r7, #20]
 8000a74:	2a00      	cmp	r2, #0
 8000a76:	d101      	bne.n	8000a7c <HW_TS_Init+0x6c>
  {
    return 32U;
 8000a78:	2220      	movs	r2, #32
 8000a7a:	e003      	b.n	8000a84 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8000a7c:	697a      	ldr	r2, [r7, #20]
 8000a7e:	fab2 f282 	clz	r2, r2
 8000a82:	b2d2      	uxtb	r2, r2
 8000a84:	40d3      	lsrs	r3, r2
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	3301      	adds	r3, #1
 8000a8a:	b2da      	uxtb	r2, r3
 8000a8c:	4b4b      	ldr	r3, [pc, #300]	; (8000bbc <HW_TS_Init+0x1ac>)
 8000a8e:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8000a90:	4b48      	ldr	r3, [pc, #288]	; (8000bb4 <HW_TS_Init+0x1a4>)
 8000a92:	691b      	ldr	r3, [r3, #16]
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	b29a      	uxth	r2, r3
 8000aa0:	4b47      	ldr	r3, [pc, #284]	; (8000bc0 <HW_TS_Init+0x1b0>)
 8000aa2:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8000aa4:	4b46      	ldr	r3, [pc, #280]	; (8000bc0 <HW_TS_Init+0x1b0>)
 8000aa6:	881b      	ldrh	r3, [r3, #0]
 8000aa8:	3b01      	subs	r3, #1
 8000aaa:	4a44      	ldr	r2, [pc, #272]	; (8000bbc <HW_TS_Init+0x1ac>)
 8000aac:	7812      	ldrb	r2, [r2, #0]
 8000aae:	fb02 f303 	mul.w	r3, r2, r3
 8000ab2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000ab6:	4a40      	ldr	r2, [pc, #256]	; (8000bb8 <HW_TS_Init+0x1a8>)
 8000ab8:	7812      	ldrb	r2, [r2, #0]
 8000aba:	40d3      	lsrs	r3, r2
 8000abc:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8000abe:	69bb      	ldr	r3, [r7, #24]
 8000ac0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d904      	bls.n	8000ad2 <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8000ac8:	4b3e      	ldr	r3, [pc, #248]	; (8000bc4 <HW_TS_Init+0x1b4>)
 8000aca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ace:	801a      	strh	r2, [r3, #0]
 8000ad0:	e003      	b.n	8000ada <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8000ad2:	69bb      	ldr	r3, [r7, #24]
 8000ad4:	b29a      	uxth	r2, r3
 8000ad6:	4b3b      	ldr	r3, [pc, #236]	; (8000bc4 <HW_TS_Init+0x1b4>)
 8000ad8:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000ada:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000ade:	f7ff fc55 	bl	800038c <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000ae2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000ae6:	f7ff fc3d 	bl	8000364 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d143      	bne.n	8000b78 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000af0:	4b35      	ldr	r3, [pc, #212]	; (8000bc8 <HW_TS_Init+0x1b8>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000af6:	4b35      	ldr	r3, [pc, #212]	; (8000bcc <HW_TS_Init+0x1bc>)
 8000af8:	f04f 32ff 	mov.w	r2, #4294967295
 8000afc:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000afe:	2300      	movs	r3, #0
 8000b00:	77fb      	strb	r3, [r7, #31]
 8000b02:	e00c      	b.n	8000b1e <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8000b04:	7ffa      	ldrb	r2, [r7, #31]
 8000b06:	4932      	ldr	r1, [pc, #200]	; (8000bd0 <HW_TS_Init+0x1c0>)
 8000b08:	4613      	mov	r3, r2
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	4413      	add	r3, r2
 8000b0e:	00db      	lsls	r3, r3, #3
 8000b10:	440b      	add	r3, r1
 8000b12:	330c      	adds	r3, #12
 8000b14:	2200      	movs	r2, #0
 8000b16:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000b18:	7ffb      	ldrb	r3, [r7, #31]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	77fb      	strb	r3, [r7, #31]
 8000b1e:	7ffb      	ldrb	r3, [r7, #31]
 8000b20:	2b05      	cmp	r3, #5
 8000b22:	d9ef      	bls.n	8000b04 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8000b24:	4b2b      	ldr	r3, [pc, #172]	; (8000bd4 <HW_TS_Init+0x1c4>)
 8000b26:	2206      	movs	r2, #6
 8000b28:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8000b2a:	4b21      	ldr	r3, [pc, #132]	; (8000bb0 <HW_TS_Init+0x1a0>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	689a      	ldr	r2, [r3, #8]
 8000b32:	4b1f      	ldr	r3, [pc, #124]	; (8000bb0 <HW_TS_Init+0x1a0>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000b3c:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8000b3e:	4b1c      	ldr	r3, [pc, #112]	; (8000bb0 <HW_TS_Init+0x1a0>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	68db      	ldr	r3, [r3, #12]
 8000b46:	b2da      	uxtb	r2, r3
 8000b48:	4b19      	ldr	r3, [pc, #100]	; (8000bb0 <HW_TS_Init+0x1a0>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000b52:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8000b54:	4b20      	ldr	r3, [pc, #128]	; (8000bd8 <HW_TS_Init+0x1c8>)
 8000b56:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000b5a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8000b5c:	2003      	movs	r0, #3
 8000b5e:	f000 fdda 	bl	8001716 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8000b62:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <HW_TS_Init+0x1a0>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	689a      	ldr	r2, [r3, #8]
 8000b6a:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <HW_TS_Init+0x1a0>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	e00a      	b.n	8000b8e <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8000b78:	4b0d      	ldr	r3, [pc, #52]	; (8000bb0 <HW_TS_Init+0x1a0>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d002      	beq.n	8000b8e <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000b88:	2003      	movs	r0, #3
 8000b8a:	f000 fdb6 	bl	80016fa <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000b8e:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <HW_TS_Init+0x1a0>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	22ff      	movs	r2, #255	; 0xff
 8000b96:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2103      	movs	r1, #3
 8000b9c:	2003      	movs	r0, #3
 8000b9e:	f000 fd6a 	bl	8001676 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000ba2:	2003      	movs	r0, #3
 8000ba4:	f000 fd81 	bl	80016aa <HAL_NVIC_EnableIRQ>

  return;
 8000ba8:	bf00      	nop
}
 8000baa:	3720      	adds	r7, #32
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	200001b8 	.word	0x200001b8
 8000bb4:	40002800 	.word	0x40002800
 8000bb8:	200001bc 	.word	0x200001bc
 8000bbc:	200001bd 	.word	0x200001bd
 8000bc0:	200001be 	.word	0x200001be
 8000bc4:	200001c0 	.word	0x200001c0
 8000bc8:	200000bc 	.word	0x200000bc
 8000bcc:	200000b8 	.word	0x200000b8
 8000bd0:	20000024 	.word	0x20000024
 8000bd4:	200000b4 	.word	0x200000b4
 8000bd8:	58000800 	.word	0x58000800

08000bdc <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b08b      	sub	sp, #44	; 0x2c
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	603b      	str	r3, [r7, #0]
 8000be8:	4613      	mov	r3, r2
 8000bea:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000bf2:	f3ef 8310 	mrs	r3, PRIMASK
 8000bf6:	61fb      	str	r3, [r7, #28]
  return(result);
 8000bf8:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000bfa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000bfc:	b672      	cpsid	i
}
 8000bfe:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8000c00:	e004      	b.n	8000c0c <HW_TS_Create+0x30>
  {
    loop++;
 8000c02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000c06:	3301      	adds	r3, #1
 8000c08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8000c0c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000c10:	2b05      	cmp	r3, #5
 8000c12:	d80c      	bhi.n	8000c2e <HW_TS_Create+0x52>
 8000c14:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000c18:	492c      	ldr	r1, [pc, #176]	; (8000ccc <HW_TS_Create+0xf0>)
 8000c1a:	4613      	mov	r3, r2
 8000c1c:	005b      	lsls	r3, r3, #1
 8000c1e:	4413      	add	r3, r2
 8000c20:	00db      	lsls	r3, r3, #3
 8000c22:	440b      	add	r3, r1
 8000c24:	330c      	adds	r3, #12
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d1e9      	bne.n	8000c02 <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000c2e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000c32:	2b06      	cmp	r3, #6
 8000c34:	d038      	beq.n	8000ca8 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8000c36:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000c3a:	4924      	ldr	r1, [pc, #144]	; (8000ccc <HW_TS_Create+0xf0>)
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	4413      	add	r3, r2
 8000c42:	00db      	lsls	r3, r3, #3
 8000c44:	440b      	add	r3, r1
 8000c46:	330c      	adds	r3, #12
 8000c48:	2201      	movs	r2, #1
 8000c4a:	701a      	strb	r2, [r3, #0]
 8000c4c:	6a3b      	ldr	r3, [r7, #32]
 8000c4e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000c50:	69bb      	ldr	r3, [r7, #24]
 8000c52:	f383 8810 	msr	PRIMASK, r3
}
 8000c56:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8000c58:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000c5c:	491b      	ldr	r1, [pc, #108]	; (8000ccc <HW_TS_Create+0xf0>)
 8000c5e:	4613      	mov	r3, r2
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	4413      	add	r3, r2
 8000c64:	00db      	lsls	r3, r3, #3
 8000c66:	440b      	add	r3, r1
 8000c68:	3310      	adds	r3, #16
 8000c6a:	68fa      	ldr	r2, [r7, #12]
 8000c6c:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8000c6e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000c72:	4916      	ldr	r1, [pc, #88]	; (8000ccc <HW_TS_Create+0xf0>)
 8000c74:	4613      	mov	r3, r2
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	4413      	add	r3, r2
 8000c7a:	00db      	lsls	r3, r3, #3
 8000c7c:	440b      	add	r3, r1
 8000c7e:	330d      	adds	r3, #13
 8000c80:	79fa      	ldrb	r2, [r7, #7]
 8000c82:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8000c84:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000c88:	4910      	ldr	r1, [pc, #64]	; (8000ccc <HW_TS_Create+0xf0>)
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	4413      	add	r3, r2
 8000c90:	00db      	lsls	r3, r3, #3
 8000c92:	440b      	add	r3, r1
 8000c94:	683a      	ldr	r2, [r7, #0]
 8000c96:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000c9e:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000ca6:	e008      	b.n	8000cba <HW_TS_Create+0xde>
 8000ca8:	6a3b      	ldr	r3, [r7, #32]
 8000caa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	f383 8810 	msr	PRIMASK, r3
}
 8000cb2:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8000cba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	372c      	adds	r7, #44	; 0x2c
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	20000024 	.word	0x20000024

08000cd0 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000cda:	f3ef 8310 	mrs	r3, PRIMASK
 8000cde:	60fb      	str	r3, [r7, #12]
  return(result);
 8000ce0:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000ce2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce4:	b672      	cpsid	i
}
 8000ce6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8000ce8:	2003      	movs	r0, #3
 8000cea:	f000 fcec 	bl	80016c6 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000cee:	4b38      	ldr	r3, [pc, #224]	; (8000dd0 <HW_TS_Stop+0x100>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	22ca      	movs	r2, #202	; 0xca
 8000cf6:	625a      	str	r2, [r3, #36]	; 0x24
 8000cf8:	4b35      	ldr	r3, [pc, #212]	; (8000dd0 <HW_TS_Stop+0x100>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2253      	movs	r2, #83	; 0x53
 8000d00:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8000d02:	79fa      	ldrb	r2, [r7, #7]
 8000d04:	4933      	ldr	r1, [pc, #204]	; (8000dd4 <HW_TS_Stop+0x104>)
 8000d06:	4613      	mov	r3, r2
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	4413      	add	r3, r2
 8000d0c:	00db      	lsls	r3, r3, #3
 8000d0e:	440b      	add	r3, r1
 8000d10:	330c      	adds	r3, #12
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	2b02      	cmp	r3, #2
 8000d18:	d148      	bne.n	8000dac <HW_TS_Stop+0xdc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff fcb6 	bl	8000690 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8000d24:	4b2c      	ldr	r3, [pc, #176]	; (8000dd8 <HW_TS_Stop+0x108>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000d2a:	7cfb      	ldrb	r3, [r7, #19]
 8000d2c:	2b06      	cmp	r3, #6
 8000d2e:	d135      	bne.n	8000d9c <HW_TS_Stop+0xcc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000d30:	4b2a      	ldr	r3, [pc, #168]	; (8000ddc <HW_TS_Stop+0x10c>)
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d3c:	d108      	bne.n	8000d50 <HW_TS_Stop+0x80>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000d3e:	bf00      	nop
 8000d40:	4b23      	ldr	r3, [pc, #140]	; (8000dd0 <HW_TS_Stop+0x100>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	f003 0304 	and.w	r3, r3, #4
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d1f7      	bne.n	8000d40 <HW_TS_Stop+0x70>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000d50:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <HW_TS_Stop+0x100>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	689a      	ldr	r2, [r3, #8]
 8000d58:	4b1d      	ldr	r3, [pc, #116]	; (8000dd0 <HW_TS_Stop+0x100>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d62:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000d64:	bf00      	nop
 8000d66:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <HW_TS_Stop+0x100>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	68db      	ldr	r3, [r3, #12]
 8000d6e:	f003 0304 	and.w	r3, r3, #4
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d0f7      	beq.n	8000d66 <HW_TS_Stop+0x96>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000d76:	4b16      	ldr	r3, [pc, #88]	; (8000dd0 <HW_TS_Stop+0x100>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	68db      	ldr	r3, [r3, #12]
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	4b13      	ldr	r3, [pc, #76]	; (8000dd0 <HW_TS_Stop+0x100>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000d8a:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000d8c:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <HW_TS_Stop+0x110>)
 8000d8e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000d92:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000d94:	2003      	movs	r0, #3
 8000d96:	f000 fcbe 	bl	8001716 <HAL_NVIC_ClearPendingIRQ>
 8000d9a:	e007      	b.n	8000dac <HW_TS_Stop+0xdc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8000d9c:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <HW_TS_Stop+0x114>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	7cfa      	ldrb	r2, [r7, #19]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d001      	beq.n	8000dac <HW_TS_Stop+0xdc>
    {
      RescheduleTimerList();
 8000da8:	f7ff fd94 	bl	80008d4 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000dac:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <HW_TS_Stop+0x100>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	22ff      	movs	r2, #255	; 0xff
 8000db4:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000db6:	2003      	movs	r0, #3
 8000db8:	f000 fc77 	bl	80016aa <HAL_NVIC_EnableIRQ>
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	f383 8810 	msr	PRIMASK, r3
}
 8000dc6:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8000dc8:	bf00      	nop
}
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	200001b8 	.word	0x200001b8
 8000dd4:	20000024 	.word	0x20000024
 8000dd8:	200000b4 	.word	0x200000b4
 8000ddc:	40002800 	.word	0x40002800
 8000de0:	58000800 	.word	0x58000800
 8000de4:	200000b5 	.word	0x200000b5

08000de8 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	6039      	str	r1, [r7, #0]
 8000df2:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8000df4:	79fa      	ldrb	r2, [r7, #7]
 8000df6:	493c      	ldr	r1, [pc, #240]	; (8000ee8 <HW_TS_Start+0x100>)
 8000df8:	4613      	mov	r3, r2
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	4413      	add	r3, r2
 8000dfe:	00db      	lsls	r3, r3, #3
 8000e00:	440b      	add	r3, r1
 8000e02:	330c      	adds	r3, #12
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d103      	bne.n	8000e14 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff ff5e 	bl	8000cd0 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000e14:	f3ef 8310 	mrs	r3, PRIMASK
 8000e18:	60fb      	str	r3, [r7, #12]
  return(result);
 8000e1a:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000e1c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8000e1e:	b672      	cpsid	i
}
 8000e20:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8000e22:	2003      	movs	r0, #3
 8000e24:	f000 fc4f 	bl	80016c6 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000e28:	4b30      	ldr	r3, [pc, #192]	; (8000eec <HW_TS_Start+0x104>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	22ca      	movs	r2, #202	; 0xca
 8000e30:	625a      	str	r2, [r3, #36]	; 0x24
 8000e32:	4b2e      	ldr	r3, [pc, #184]	; (8000eec <HW_TS_Start+0x104>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2253      	movs	r2, #83	; 0x53
 8000e3a:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8000e3c:	79fa      	ldrb	r2, [r7, #7]
 8000e3e:	492a      	ldr	r1, [pc, #168]	; (8000ee8 <HW_TS_Start+0x100>)
 8000e40:	4613      	mov	r3, r2
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	4413      	add	r3, r2
 8000e46:	00db      	lsls	r3, r3, #3
 8000e48:	440b      	add	r3, r1
 8000e4a:	330c      	adds	r3, #12
 8000e4c:	2202      	movs	r2, #2
 8000e4e:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8000e50:	79fa      	ldrb	r2, [r7, #7]
 8000e52:	4925      	ldr	r1, [pc, #148]	; (8000ee8 <HW_TS_Start+0x100>)
 8000e54:	4613      	mov	r3, r2
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	4413      	add	r3, r2
 8000e5a:	00db      	lsls	r3, r3, #3
 8000e5c:	440b      	add	r3, r1
 8000e5e:	3308      	adds	r3, #8
 8000e60:	683a      	ldr	r2, [r7, #0]
 8000e62:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8000e64:	79fa      	ldrb	r2, [r7, #7]
 8000e66:	4920      	ldr	r1, [pc, #128]	; (8000ee8 <HW_TS_Start+0x100>)
 8000e68:	4613      	mov	r3, r2
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	4413      	add	r3, r2
 8000e6e:	00db      	lsls	r3, r3, #3
 8000e70:	440b      	add	r3, r1
 8000e72:	3304      	adds	r3, #4
 8000e74:	683a      	ldr	r2, [r7, #0]
 8000e76:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff fb5e 	bl	800053c <linkTimer>
 8000e80:	4603      	mov	r3, r0
 8000e82:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8000e84:	4b1a      	ldr	r3, [pc, #104]	; (8000ef0 <HW_TS_Start+0x108>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8000e8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ef4 <HW_TS_Start+0x10c>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	7c7a      	ldrb	r2, [r7, #17]
 8000e92:	429a      	cmp	r2, r3
 8000e94:	d002      	beq.n	8000e9c <HW_TS_Start+0xb4>
  {
    RescheduleTimerList();
 8000e96:	f7ff fd1d 	bl	80008d4 <RescheduleTimerList>
 8000e9a:	e013      	b.n	8000ec4 <HW_TS_Start+0xdc>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8000e9c:	79fa      	ldrb	r2, [r7, #7]
 8000e9e:	4912      	ldr	r1, [pc, #72]	; (8000ee8 <HW_TS_Start+0x100>)
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	4413      	add	r3, r2
 8000ea6:	00db      	lsls	r3, r3, #3
 8000ea8:	440b      	add	r3, r1
 8000eaa:	3308      	adds	r3, #8
 8000eac:	6819      	ldr	r1, [r3, #0]
 8000eae:	8a7b      	ldrh	r3, [r7, #18]
 8000eb0:	79fa      	ldrb	r2, [r7, #7]
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	480c      	ldr	r0, [pc, #48]	; (8000ee8 <HW_TS_Start+0x100>)
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	4413      	add	r3, r2
 8000ebc:	00db      	lsls	r3, r3, #3
 8000ebe:	4403      	add	r3, r0
 8000ec0:	3308      	adds	r3, #8
 8000ec2:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000ec4:	4b09      	ldr	r3, [pc, #36]	; (8000eec <HW_TS_Start+0x104>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	22ff      	movs	r2, #255	; 0xff
 8000ecc:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000ece:	2003      	movs	r0, #3
 8000ed0:	f000 fbeb 	bl	80016aa <HAL_NVIC_EnableIRQ>
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	f383 8810 	msr	PRIMASK, r3
}
 8000ede:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8000ee0:	bf00      	nop
}
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000024 	.word	0x20000024
 8000eec:	200001b8 	.word	0x200001b8
 8000ef0:	200000b4 	.word	0x200000b4
 8000ef4:	200000b5 	.word	0x200000b5

08000ef8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000efc:	f000 f9fa 	bl	80012f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f00:	f000 f80b 	bl	8000f1a <SystemClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 8000f04:	f000 f874 	bl	8000ff0 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f08:	f000 f8b4 	bl	8001074 <MX_GPIO_Init>
  MX_RF_Init();
 8000f0c:	f000 f884 	bl	8001018 <MX_RF_Init>
  MX_RTC_Init();
 8000f10:	f000 f88a 	bl	8001028 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  APPE_Init();
 8000f14:	f7ff f980 	bl	8000218 <APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <main+0x20>

08000f1a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b0a4      	sub	sp, #144	; 0x90
 8000f1e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f20:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f24:	2244      	movs	r2, #68	; 0x44
 8000f26:	2100      	movs	r1, #0
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f004 ff35 	bl	8005d98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f2e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]
 8000f3c:	611a      	str	r2, [r3, #16]
 8000f3e:	615a      	str	r2, [r3, #20]
 8000f40:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f42:	463b      	mov	r3, r7
 8000f44:	2230      	movs	r2, #48	; 0x30
 8000f46:	2100      	movs	r1, #0
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f004 ff25 	bl	8005d98 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8000f4e:	232b      	movs	r3, #43	; 0x2b
 8000f50:	64fb      	str	r3, [r7, #76]	; 0x4c
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f56:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f5c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f62:	2340      	movs	r3, #64	; 0x40
 8000f64:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000f66:	2300      	movs	r3, #0
 8000f68:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8000f6a:	23a0      	movs	r3, #160	; 0xa0
 8000f6c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f6e:	2305      	movs	r3, #5
 8000f70:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f72:	2300      	movs	r3, #0
 8000f74:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f76:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f000 ffd4 	bl	8001f28 <HAL_RCC_OscConfig>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000f86:	f000 f87c 	bl	8001082 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000f8a:	236f      	movs	r3, #111	; 0x6f
 8000f8c:	633b      	str	r3, [r7, #48]	; 0x30
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f92:	2300      	movs	r3, #0
 8000f94:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f96:	2300      	movs	r3, #0
 8000f98:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000fa6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000faa:	2101      	movs	r1, #1
 8000fac:	4618      	mov	r0, r3
 8000fae:	f001 fb09 	bl	80025c4 <HAL_RCC_ClockConfig>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000fb8:	f000 f863 	bl	8001082 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8000fbc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000fc0:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000fc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fc6:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8000fc8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000fd2:	2310      	movs	r3, #16
 8000fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f001 fe8b 	bl	8002cf4 <HAL_RCCEx_PeriphCLKConfig>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000fe4:	f000 f84d 	bl	8001082 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000fe8:	bf00      	nop
 8000fea:	3790      	adds	r7, #144	; 0x90
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8000ff4:	4b06      	ldr	r3, [pc, #24]	; (8001010 <MX_IPCC_Init+0x20>)
 8000ff6:	4a07      	ldr	r2, [pc, #28]	; (8001014 <MX_IPCC_Init+0x24>)
 8000ff8:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8000ffa:	4805      	ldr	r0, [pc, #20]	; (8001010 <MX_IPCC_Init+0x20>)
 8000ffc:	f000 fbbe 	bl	800177c <HAL_IPCC_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001006:	f000 f83c 	bl	8001082 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	200002e4 	.word	0x200002e4
 8001014:	58000c00 	.word	0x58000c00

08001018 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
	...

08001028 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800102c:	4b0f      	ldr	r3, [pc, #60]	; (800106c <MX_RTC_Init+0x44>)
 800102e:	4a10      	ldr	r2, [pc, #64]	; (8001070 <MX_RTC_Init+0x48>)
 8001030:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001032:	4b0e      	ldr	r3, [pc, #56]	; (800106c <MX_RTC_Init+0x44>)
 8001034:	2200      	movs	r2, #0
 8001036:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001038:	4b0c      	ldr	r3, [pc, #48]	; (800106c <MX_RTC_Init+0x44>)
 800103a:	220f      	movs	r2, #15
 800103c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800103e:	4b0b      	ldr	r3, [pc, #44]	; (800106c <MX_RTC_Init+0x44>)
 8001040:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001044:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001046:	4b09      	ldr	r3, [pc, #36]	; (800106c <MX_RTC_Init+0x44>)
 8001048:	2200      	movs	r2, #0
 800104a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800104c:	4b07      	ldr	r3, [pc, #28]	; (800106c <MX_RTC_Init+0x44>)
 800104e:	2200      	movs	r2, #0
 8001050:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <MX_RTC_Init+0x44>)
 8001054:	2200      	movs	r2, #0
 8001056:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001058:	4804      	ldr	r0, [pc, #16]	; (800106c <MX_RTC_Init+0x44>)
 800105a:	f001 ff41 	bl	8002ee0 <HAL_RTC_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_RTC_Init+0x40>
  {
    Error_Handler();
 8001064:	f000 f80d 	bl	8001082 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000320 	.word	0x20000320
 8001070:	40002800 	.word	0x40002800

08001074 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */

}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001086:	b672      	cpsid	i
}
 8001088:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800108a:	e7fe      	b.n	800108a <Error_Handler+0x8>

0800108c <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001098:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800109c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80010ae:	b480      	push	{r7}
 80010b0:	b085      	sub	sp, #20
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80010b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80010bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80010c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4013      	ands	r3, r2
 80010d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010d2:	68fb      	ldr	r3, [r7, #12]
}
 80010d4:	bf00      	nop
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80010e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80010ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80010f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4013      	ands	r3, r2
 8001102:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001104:	68fb      	ldr	r3, [r7, #12]
}
 8001106:	bf00      	nop
 8001108:	3714      	adds	r7, #20
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001116:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800111a:	f7ff ffc8 	bl	80010ae <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800111e:	2200      	movs	r2, #0
 8001120:	2100      	movs	r1, #0
 8001122:	202e      	movs	r0, #46	; 0x2e
 8001124:	f000 faa7 	bl	8001676 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001128:	202e      	movs	r0, #46	; 0x2e
 800112a:	f000 fabe 	bl	80016aa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a05      	ldr	r2, [pc, #20]	; (8001158 <HAL_IPCC_MspInit+0x24>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d103      	bne.n	800114e <HAL_IPCC_MspInit+0x1a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001146:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800114a:	f7ff ffb0 	bl	80010ae <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	58000c00 	.word	0x58000c00

0800115c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a06      	ldr	r2, [pc, #24]	; (8001184 <HAL_RTC_MspInit+0x28>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d105      	bne.n	800117a <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800116e:	f7ff ff8d 	bl	800108c <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001172:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001176:	f7ff ffb3 	bl	80010e0 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40002800 	.word	0x40002800

08001188 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800118c:	e7fe      	b.n	800118c <NMI_Handler+0x4>

0800118e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001192:	e7fe      	b.n	8001192 <HardFault_Handler+0x4>

08001194 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001198:	e7fe      	b.n	8001198 <MemManage_Handler+0x4>

0800119a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800119e:	e7fe      	b.n	800119e <BusFault_Handler+0x4>

080011a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a4:	e7fe      	b.n	80011a4 <UsageFault_Handler+0x4>

080011a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011d4:	f000 f8e8 	bl	80013a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}

080011dc <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80011e0:	f000 faa8 	bl	8001734 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80011ec:	4b22      	ldr	r3, [pc, #136]	; (8001278 <SystemInit+0x90>)
 80011ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011f2:	4a21      	ldr	r2, [pc, #132]	; (8001278 <SystemInit+0x90>)
 80011f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80011fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001206:	f043 0301 	orr.w	r3, r3, #1
 800120a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800120c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001210:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001214:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001220:	4b16      	ldr	r3, [pc, #88]	; (800127c <SystemInit+0x94>)
 8001222:	4013      	ands	r3, r2
 8001224:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800122a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800122e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001232:	f023 0305 	bic.w	r3, r3, #5
 8001236:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800123a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800123e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001242:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001246:	f023 0301 	bic.w	r3, r3, #1
 800124a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800124e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001252:	4a0b      	ldr	r2, [pc, #44]	; (8001280 <SystemInit+0x98>)
 8001254:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001260:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001264:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001266:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800126a:	2200      	movs	r2, #0
 800126c:	619a      	str	r2, [r3, #24]
}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000ed00 	.word	0xe000ed00
 800127c:	faf6fefb 	.word	0xfaf6fefb
 8001280:	22041000 	.word	0x22041000

08001284 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001284:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001286:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001288:	3304      	adds	r3, #4

0800128a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800128a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800128c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800128e:	d3f9      	bcc.n	8001284 <CopyDataInit>
  bx lr
 8001290:	4770      	bx	lr

08001292 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001292:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001294:	3004      	adds	r0, #4

08001296 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001296:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001298:	d3fb      	bcc.n	8001292 <FillZerobss>
  bx lr
 800129a:	4770      	bx	lr

0800129c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800129c:	480c      	ldr	r0, [pc, #48]	; (80012d0 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800129e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80012a0:	f7ff ffa2 	bl	80011e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80012a4:	480b      	ldr	r0, [pc, #44]	; (80012d4 <LoopForever+0x8>)
 80012a6:	490c      	ldr	r1, [pc, #48]	; (80012d8 <LoopForever+0xc>)
 80012a8:	4a0c      	ldr	r2, [pc, #48]	; (80012dc <LoopForever+0x10>)
 80012aa:	2300      	movs	r3, #0
 80012ac:	f7ff ffed 	bl	800128a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80012b0:	480b      	ldr	r0, [pc, #44]	; (80012e0 <LoopForever+0x14>)
 80012b2:	490c      	ldr	r1, [pc, #48]	; (80012e4 <LoopForever+0x18>)
 80012b4:	2300      	movs	r3, #0
 80012b6:	f7ff ffee 	bl	8001296 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80012ba:	480b      	ldr	r0, [pc, #44]	; (80012e8 <LoopForever+0x1c>)
 80012bc:	490b      	ldr	r1, [pc, #44]	; (80012ec <LoopForever+0x20>)
 80012be:	2300      	movs	r3, #0
 80012c0:	f7ff ffe9 	bl	8001296 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80012c4:	f004 fd36 	bl	8005d34 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80012c8:	f7ff fe16 	bl	8000ef8 <main>

080012cc <LoopForever>:

LoopForever:
  b LoopForever
 80012cc:	e7fe      	b.n	80012cc <LoopForever>
 80012ce:	0000      	.short	0x0000
  ldr   r0, =_estack
 80012d0:	20003000 	.word	0x20003000
  INIT_DATA _sdata, _edata, _sidata
 80012d4:	20000000 	.word	0x20000000
 80012d8:	20000024 	.word	0x20000024
 80012dc:	0800600c 	.word	0x0800600c
  INIT_BSS _sbss, _ebss
 80012e0:	2000019c 	.word	0x2000019c
 80012e4:	2000034c 	.word	0x2000034c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80012e8:	200301e0 	.word	0x200301e0
 80012ec:	20030a57 	.word	0x20030a57

080012f0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012f0:	e7fe      	b.n	80012f0 <ADC1_IRQHandler>
	...

080012f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012fa:	2300      	movs	r3, #0
 80012fc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012fe:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <HAL_Init+0x3c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a0b      	ldr	r2, [pc, #44]	; (8001330 <HAL_Init+0x3c>)
 8001304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001308:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800130a:	2003      	movs	r0, #3
 800130c:	f000 f9a8 	bl	8001660 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001310:	2000      	movs	r0, #0
 8001312:	f000 f80f 	bl	8001334 <HAL_InitTick>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d002      	beq.n	8001322 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	71fb      	strb	r3, [r7, #7]
 8001320:	e001      	b.n	8001326 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001322:	f7ff fef6 	bl	8001112 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001326:	79fb      	ldrb	r3, [r7, #7]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	58004000 	.word	0x58004000

08001334 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800133c:	2300      	movs	r3, #0
 800133e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001340:	4b17      	ldr	r3, [pc, #92]	; (80013a0 <HAL_InitTick+0x6c>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d024      	beq.n	8001392 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001348:	f001 fae8 	bl	800291c <HAL_RCC_GetHCLKFreq>
 800134c:	4602      	mov	r2, r0
 800134e:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <HAL_InitTick+0x6c>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	4619      	mov	r1, r3
 8001354:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001358:	fbb3 f3f1 	udiv	r3, r3, r1
 800135c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001360:	4618      	mov	r0, r3
 8001362:	f000 f9be 	bl	80016e2 <HAL_SYSTICK_Config>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d10f      	bne.n	800138c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2b0f      	cmp	r3, #15
 8001370:	d809      	bhi.n	8001386 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001372:	2200      	movs	r2, #0
 8001374:	6879      	ldr	r1, [r7, #4]
 8001376:	f04f 30ff 	mov.w	r0, #4294967295
 800137a:	f000 f97c 	bl	8001676 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800137e:	4a09      	ldr	r2, [pc, #36]	; (80013a4 <HAL_InitTick+0x70>)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6013      	str	r3, [r2, #0]
 8001384:	e007      	b.n	8001396 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	73fb      	strb	r3, [r7, #15]
 800138a:	e004      	b.n	8001396 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	73fb      	strb	r3, [r7, #15]
 8001390:	e001      	b.n	8001396 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001396:	7bfb      	ldrb	r3, [r7, #15]
}
 8001398:	4618      	mov	r0, r3
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20000008 	.word	0x20000008
 80013a4:	20000004 	.word	0x20000004

080013a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013ac:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <HAL_IncTick+0x20>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	461a      	mov	r2, r3
 80013b2:	4b06      	ldr	r3, [pc, #24]	; (80013cc <HAL_IncTick+0x24>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4413      	add	r3, r2
 80013b8:	4a04      	ldr	r2, [pc, #16]	; (80013cc <HAL_IncTick+0x24>)
 80013ba:	6013      	str	r3, [r2, #0]
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	20000008 	.word	0x20000008
 80013cc:	20000344 	.word	0x20000344

080013d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  return uwTick;
 80013d4:	4b03      	ldr	r3, [pc, #12]	; (80013e4 <HAL_GetTick+0x14>)
 80013d6:	681b      	ldr	r3, [r3, #0]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	20000344 	.word	0x20000344

080013e8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80013ec:	4b03      	ldr	r3, [pc, #12]	; (80013fc <HAL_GetTickPrio+0x14>)
 80013ee:	681b      	ldr	r3, [r3, #0]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	20000004 	.word	0x20000004

08001400 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <__NVIC_SetPriorityGrouping+0x44>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001416:	68ba      	ldr	r2, [r7, #8]
 8001418:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800141c:	4013      	ands	r3, r2
 800141e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001428:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800142c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001430:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001432:	4a04      	ldr	r2, [pc, #16]	; (8001444 <__NVIC_SetPriorityGrouping+0x44>)
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	60d3      	str	r3, [r2, #12]
}
 8001438:	bf00      	nop
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800144c:	4b04      	ldr	r3, [pc, #16]	; (8001460 <__NVIC_GetPriorityGrouping+0x18>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	0a1b      	lsrs	r3, r3, #8
 8001452:	f003 0307 	and.w	r3, r3, #7
}
 8001456:	4618      	mov	r0, r3
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800146e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001472:	2b00      	cmp	r3, #0
 8001474:	db0b      	blt.n	800148e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	f003 021f 	and.w	r2, r3, #31
 800147c:	4907      	ldr	r1, [pc, #28]	; (800149c <__NVIC_EnableIRQ+0x38>)
 800147e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001482:	095b      	lsrs	r3, r3, #5
 8001484:	2001      	movs	r0, #1
 8001486:	fa00 f202 	lsl.w	r2, r0, r2
 800148a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	e000e100 	.word	0xe000e100

080014a0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	db12      	blt.n	80014d8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	f003 021f 	and.w	r2, r3, #31
 80014b8:	490a      	ldr	r1, [pc, #40]	; (80014e4 <__NVIC_DisableIRQ+0x44>)
 80014ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014be:	095b      	lsrs	r3, r3, #5
 80014c0:	2001      	movs	r0, #1
 80014c2:	fa00 f202 	lsl.w	r2, r0, r2
 80014c6:	3320      	adds	r3, #32
 80014c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80014cc:	f3bf 8f4f 	dsb	sy
}
 80014d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014d2:	f3bf 8f6f 	isb	sy
}
 80014d6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	e000e100 	.word	0xe000e100

080014e8 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	db0c      	blt.n	8001514 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	f003 021f 	and.w	r2, r3, #31
 8001500:	4907      	ldr	r1, [pc, #28]	; (8001520 <__NVIC_SetPendingIRQ+0x38>)
 8001502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001506:	095b      	lsrs	r3, r3, #5
 8001508:	2001      	movs	r0, #1
 800150a:	fa00 f202 	lsl.w	r2, r0, r2
 800150e:	3340      	adds	r3, #64	; 0x40
 8001510:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	e000e100 	.word	0xe000e100

08001524 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800152e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001532:	2b00      	cmp	r3, #0
 8001534:	db0c      	blt.n	8001550 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	f003 021f 	and.w	r2, r3, #31
 800153c:	4907      	ldr	r1, [pc, #28]	; (800155c <__NVIC_ClearPendingIRQ+0x38>)
 800153e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001542:	095b      	lsrs	r3, r3, #5
 8001544:	2001      	movs	r0, #1
 8001546:	fa00 f202 	lsl.w	r2, r0, r2
 800154a:	3360      	adds	r3, #96	; 0x60
 800154c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	e000e100 	.word	0xe000e100

08001560 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	6039      	str	r1, [r7, #0]
 800156a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800156c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001570:	2b00      	cmp	r3, #0
 8001572:	db0a      	blt.n	800158a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	b2da      	uxtb	r2, r3
 8001578:	490c      	ldr	r1, [pc, #48]	; (80015ac <__NVIC_SetPriority+0x4c>)
 800157a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157e:	0112      	lsls	r2, r2, #4
 8001580:	b2d2      	uxtb	r2, r2
 8001582:	440b      	add	r3, r1
 8001584:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001588:	e00a      	b.n	80015a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	b2da      	uxtb	r2, r3
 800158e:	4908      	ldr	r1, [pc, #32]	; (80015b0 <__NVIC_SetPriority+0x50>)
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	f003 030f 	and.w	r3, r3, #15
 8001596:	3b04      	subs	r3, #4
 8001598:	0112      	lsls	r2, r2, #4
 800159a:	b2d2      	uxtb	r2, r2
 800159c:	440b      	add	r3, r1
 800159e:	761a      	strb	r2, [r3, #24]
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	e000e100 	.word	0xe000e100
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b089      	sub	sp, #36	; 0x24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	f1c3 0307 	rsb	r3, r3, #7
 80015ce:	2b04      	cmp	r3, #4
 80015d0:	bf28      	it	cs
 80015d2:	2304      	movcs	r3, #4
 80015d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	3304      	adds	r3, #4
 80015da:	2b06      	cmp	r3, #6
 80015dc:	d902      	bls.n	80015e4 <NVIC_EncodePriority+0x30>
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	3b03      	subs	r3, #3
 80015e2:	e000      	b.n	80015e6 <NVIC_EncodePriority+0x32>
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e8:	f04f 32ff 	mov.w	r2, #4294967295
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	43da      	mvns	r2, r3
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	401a      	ands	r2, r3
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	fa01 f303 	lsl.w	r3, r1, r3
 8001606:	43d9      	mvns	r1, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800160c:	4313      	orrs	r3, r2
         );
}
 800160e:	4618      	mov	r0, r3
 8001610:	3724      	adds	r7, #36	; 0x24
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
	...

0800161c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3b01      	subs	r3, #1
 8001628:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800162c:	d301      	bcc.n	8001632 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800162e:	2301      	movs	r3, #1
 8001630:	e00f      	b.n	8001652 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001632:	4a0a      	ldr	r2, [pc, #40]	; (800165c <SysTick_Config+0x40>)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3b01      	subs	r3, #1
 8001638:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800163a:	210f      	movs	r1, #15
 800163c:	f04f 30ff 	mov.w	r0, #4294967295
 8001640:	f7ff ff8e 	bl	8001560 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001644:	4b05      	ldr	r3, [pc, #20]	; (800165c <SysTick_Config+0x40>)
 8001646:	2200      	movs	r2, #0
 8001648:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800164a:	4b04      	ldr	r3, [pc, #16]	; (800165c <SysTick_Config+0x40>)
 800164c:	2207      	movs	r2, #7
 800164e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	e000e010 	.word	0xe000e010

08001660 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f7ff fec9 	bl	8001400 <__NVIC_SetPriorityGrouping>
}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b086      	sub	sp, #24
 800167a:	af00      	add	r7, sp, #0
 800167c:	4603      	mov	r3, r0
 800167e:	60b9      	str	r1, [r7, #8]
 8001680:	607a      	str	r2, [r7, #4]
 8001682:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001684:	f7ff fee0 	bl	8001448 <__NVIC_GetPriorityGrouping>
 8001688:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	68b9      	ldr	r1, [r7, #8]
 800168e:	6978      	ldr	r0, [r7, #20]
 8001690:	f7ff ff90 	bl	80015b4 <NVIC_EncodePriority>
 8001694:	4602      	mov	r2, r0
 8001696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800169a:	4611      	mov	r1, r2
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff ff5f 	bl	8001560 <__NVIC_SetPriority>
}
 80016a2:	bf00      	nop
 80016a4:	3718      	adds	r7, #24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b082      	sub	sp, #8
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	4603      	mov	r3, r0
 80016b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fed3 	bl	8001464 <__NVIC_EnableIRQ>
}
 80016be:	bf00      	nop
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	4603      	mov	r3, r0
 80016ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80016d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff fee3 	bl	80014a0 <__NVIC_DisableIRQ>
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b082      	sub	sp, #8
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f7ff ff96 	bl	800161c <SysTick_Config>
 80016f0:	4603      	mov	r3, r0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af00      	add	r7, sp, #0
 8001700:	4603      	mov	r3, r0
 8001702:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8001704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff feed 	bl	80014e8 <__NVIC_SetPendingIRQ>
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
 800171c:	4603      	mov	r3, r0
 800171e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8001720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff fefd 	bl	8001524 <__NVIC_ClearPendingIRQ>
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
	...

08001734 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800173a:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <HAL_HSEM_IRQHandler+0x30>)
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8001740:	4b08      	ldr	r3, [pc, #32]	; (8001764 <HAL_HSEM_IRQHandler+0x30>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	43db      	mvns	r3, r3
 8001748:	4906      	ldr	r1, [pc, #24]	; (8001764 <HAL_HSEM_IRQHandler+0x30>)
 800174a:	4013      	ands	r3, r2
 800174c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800174e:	4a05      	ldr	r2, [pc, #20]	; (8001764 <HAL_HSEM_IRQHandler+0x30>)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f000 f807 	bl	8001768 <HAL_HSEM_FreeCallback>
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	58001500 	.word	0x58001500

08001768 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8001784:	2300      	movs	r3, #0
 8001786:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d01e      	beq.n	80017cc <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800178e:	4b13      	ldr	r3, [pc, #76]	; (80017dc <HAL_IPCC_Init+0x60>)
 8001790:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b00      	cmp	r3, #0
 800179c:	d102      	bne.n	80017a4 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff fcc8 	bl	8001134 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80017a4:	68b8      	ldr	r0, [r7, #8]
 80017a6:	f000 f85b 	bl	8001860 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 f82c 	bl	8001814 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2201      	movs	r2, #1
 80017c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80017ca:	e001      	b.n	80017d0 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	58000c00 	.word	0x58000c00

080017e0 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	4613      	mov	r3, r2
 80017ec:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80017ee:	bf00      	nop
 80017f0:	3714      	adds	r7, #20
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80017fa:	b480      	push	{r7}
 80017fc:	b085      	sub	sp, #20
 80017fe:	af00      	add	r7, sp, #0
 8001800:	60f8      	str	r0, [r7, #12]
 8001802:	60b9      	str	r1, [r7, #8]
 8001804:	4613      	mov	r3, r2
 8001806:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8001808:	bf00      	nop
 800180a:	3714      	adds	r7, #20
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800181c:	2300      	movs	r3, #0
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	e00f      	b.n	8001842 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	4413      	add	r3, r2
 800182a:	4a0b      	ldr	r2, [pc, #44]	; (8001858 <IPCC_SetDefaultCallbacks+0x44>)
 800182c:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	3306      	adds	r3, #6
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4413      	add	r3, r2
 8001838:	4a08      	ldr	r2, [pc, #32]	; (800185c <IPCC_SetDefaultCallbacks+0x48>)
 800183a:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	3301      	adds	r3, #1
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2b05      	cmp	r3, #5
 8001846:	d9ec      	bls.n	8001822 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8001848:	bf00      	nop
 800184a:	bf00      	nop
 800184c:	3714      	adds	r7, #20
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	080017e1 	.word	0x080017e1
 800185c:	080017fb 	.word	0x080017fb

08001860 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8001874:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	223f      	movs	r2, #63	; 0x3f
 800187a:	609a      	str	r2, [r3, #8]
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800188c:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a04      	ldr	r2, [pc, #16]	; (80018a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001892:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001896:	6013      	str	r3, [r2, #0]
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	58000400 	.word	0x58000400

080018a8 <LL_PWR_EnableSRAM2Retention>:
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_RRS);
 80018ac:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <LL_PWR_EnableSRAM2Retention+0x1c>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	4a04      	ldr	r2, [pc, #16]	; (80018c4 <LL_PWR_EnableSRAM2Retention+0x1c>)
 80018b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018b6:	6093      	str	r3, [r2, #8]
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	58000400 	.word	0x58000400

080018c8 <HAL_PWREx_EnableSRAMRetention>:
  * @note   On devices STM32WB15xx, STM32WB10xx, retention is extended 
  *         to SRAM1, SRAM2a and SRAM2b.
  * @retval None
  */
void HAL_PWREx_EnableSRAMRetention(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  LL_PWR_EnableSRAM2Retention();
 80018cc:	f7ff ffec 	bl	80018a8 <LL_PWR_EnableSRAM2Retention>
}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80018d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018e6:	d101      	bne.n	80018ec <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80018e8:	2301      	movs	r3, #1
 80018ea:	e000      	b.n	80018ee <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <LL_RCC_HSE_Enable>:
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80018fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800190a:	6013      	str	r3, [r2, #0]
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <LL_RCC_HSE_Disable>:
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800191a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001924:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001928:	6013      	str	r3, [r2, #0]
}
 800192a:	bf00      	nop
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <LL_RCC_HSE_IsReady>:
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001938:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001942:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001946:	d101      	bne.n	800194c <LL_RCC_HSE_IsReady+0x18>
 8001948:	2301      	movs	r3, #1
 800194a:	e000      	b.n	800194e <LL_RCC_HSE_IsReady+0x1a>
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <LL_RCC_HSI_Enable>:
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800195c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001966:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800196a:	6013      	str	r3, [r2, #0]
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <LL_RCC_HSI_Disable>:
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800197a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001984:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001988:	6013      	str	r3, [r2, #0]
}
 800198a:	bf00      	nop
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <LL_RCC_HSI_IsReady>:
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001998:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019a6:	d101      	bne.n	80019ac <LL_RCC_HSI_IsReady+0x18>
 80019a8:	2301      	movs	r3, #1
 80019aa:	e000      	b.n	80019ae <LL_RCC_HSI_IsReady+0x1a>
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <LL_RCC_HSI_SetCalibTrimming>:
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80019c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	061b      	lsls	r3, r3, #24
 80019ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019d2:	4313      	orrs	r3, r2
 80019d4:	604b      	str	r3, [r1, #4]
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <LL_RCC_LSE_Enable>:
{
 80019e2:	b480      	push	{r7}
 80019e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80019e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019f2:	f043 0301 	orr.w	r3, r3, #1
 80019f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80019fa:	bf00      	nop
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <LL_RCC_LSE_Disable>:
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001a08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a14:	f023 0301 	bic.w	r3, r3, #1
 8001a18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001a1c:	bf00      	nop
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <LL_RCC_LSE_EnableBypass>:
{
 8001a26:	b480      	push	{r7}
 8001a28:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001a2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a36:	f043 0304 	orr.w	r3, r3, #4
 8001a3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001a3e:	bf00      	nop
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <LL_RCC_LSE_DisableBypass>:
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a58:	f023 0304 	bic.w	r3, r3, #4
 8001a5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <LL_RCC_LSE_IsReady>:
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001a6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d101      	bne.n	8001a82 <LL_RCC_LSE_IsReady+0x18>
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e000      	b.n	8001a84 <LL_RCC_LSE_IsReady+0x1a>
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <LL_RCC_LSI1_Enable>:
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001a92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a9e:	f043 0301 	orr.w	r3, r3, #1
 8001aa2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001aa6:	bf00      	nop
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <LL_RCC_LSI1_Disable>:
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001ab4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ab8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001abc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ac0:	f023 0301 	bic.w	r3, r3, #1
 8001ac4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <LL_RCC_LSI1_IsReady>:
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001ad6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ada:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d101      	bne.n	8001aea <LL_RCC_LSI1_IsReady+0x18>
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e000      	b.n	8001aec <LL_RCC_LSI1_IsReady+0x1a>
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <LL_RCC_LSI2_Enable>:
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001afe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b06:	f043 0304 	orr.w	r3, r3, #4
 8001b0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001b0e:	bf00      	nop
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <LL_RCC_LSI2_Disable>:
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001b1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b28:	f023 0304 	bic.w	r3, r3, #4
 8001b2c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <LL_RCC_LSI2_IsReady>:
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b46:	f003 0308 	and.w	r3, r3, #8
 8001b4a:	2b08      	cmp	r3, #8
 8001b4c:	d101      	bne.n	8001b52 <LL_RCC_LSI2_IsReady+0x18>
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e000      	b.n	8001b54 <LL_RCC_LSI2_IsReady+0x1a>
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <LL_RCC_LSI2_SetTrimming>:
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001b66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b6e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	021b      	lsls	r3, r3, #8
 8001b76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <LL_RCC_MSI_Enable>:
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b9a:	f043 0301 	orr.w	r3, r3, #1
 8001b9e:	6013      	str	r3, [r2, #0]
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <LL_RCC_MSI_Disable>:
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bb8:	f023 0301 	bic.w	r3, r3, #1
 8001bbc:	6013      	str	r3, [r2, #0]
}
 8001bbe:	bf00      	nop
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <LL_RCC_MSI_IsReady>:
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d101      	bne.n	8001bde <LL_RCC_MSI_IsReady+0x16>
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e000      	b.n	8001be0 <LL_RCC_MSI_IsReady+0x18>
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <LL_RCC_MSI_SetRange>:
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bfc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	600b      	str	r3, [r1, #0]
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <LL_RCC_MSI_GetRange>:
{
 8001c12:	b480      	push	{r7}
 8001c14:	b083      	sub	sp, #12
 8001c16:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001c18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c22:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2bb0      	cmp	r3, #176	; 0xb0
 8001c28:	d901      	bls.n	8001c2e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8001c2a:	23b0      	movs	r3, #176	; 0xb0
 8001c2c:	607b      	str	r3, [r7, #4]
  return msiRange;
 8001c2e:	687b      	ldr	r3, [r7, #4]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <LL_RCC_MSI_SetCalibTrimming>:
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	021b      	lsls	r3, r3, #8
 8001c52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c56:	4313      	orrs	r3, r2
 8001c58:	604b      	str	r3, [r1, #4]
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <LL_RCC_SetSysClkSource>:
{
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001c6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f023 0203 	bic.w	r2, r3, #3
 8001c78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	608b      	str	r3, [r1, #8]
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <LL_RCC_GetSysClkSource>:
{
 8001c8e:	b480      	push	{r7}
 8001c90:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001c92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f003 030c 	and.w	r3, r3, #12
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <LL_RCC_SetAHBPrescaler>:
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	608b      	str	r3, [r1, #8]
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <LL_C2_RCC_SetAHBPrescaler>:
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cda:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001cde:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ce2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <LL_RCC_SetAHB4Prescaler>:
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d06:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001d0a:	f023 020f 	bic.w	r2, r3, #15
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	091b      	lsrs	r3, r3, #4
 8001d12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d16:	4313      	orrs	r3, r2
 8001d18:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <LL_RCC_SetAPB1Prescaler>:
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001d30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	608b      	str	r3, [r1, #8]
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <LL_RCC_SetAPB2Prescaler>:
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001d58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	608b      	str	r3, [r1, #8]
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <LL_RCC_GetAHBPrescaler>:
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <LL_RCC_GetAHB4Prescaler>:
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001d94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d98:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001d9c:	011b      	lsls	r3, r3, #4
 8001d9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dbe:	6013      	str	r3, [r2, #0]
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001dce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ddc:	6013      	str	r3, [r2, #0]
}
 8001dde:	bf00      	nop
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001dec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001dfa:	d101      	bne.n	8001e00 <LL_RCC_PLL_IsReady+0x18>
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e000      	b.n	8001e02 <LL_RCC_PLL_IsReady+0x1a>
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	0a1b      	lsrs	r3, r3, #8
 8001e18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001e26:	b480      	push	{r7}
 8001e28:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001e2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001e42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001e56:	b480      	push	{r7}
 8001e58:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001e5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	f003 0303 	and.w	r3, r3, #3
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001e72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e80:	d101      	bne.n	8001e86 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001e82:	2301      	movs	r3, #1
 8001e84:	e000      	b.n	8001e88 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001e92:	b480      	push	{r7}
 8001e94:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001e96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e9a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ea6:	d101      	bne.n	8001eac <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e000      	b.n	8001eae <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ec0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ec4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ecc:	d101      	bne.n	8001ed2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e000      	b.n	8001ed4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001ee2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ef0:	d101      	bne.n	8001ef6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e000      	b.n	8001ef8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001f02:	b480      	push	{r7}
 8001f04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001f06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f10:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001f14:	d101      	bne.n	8001f1a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001f16:	2301      	movs	r3, #1
 8001f18:	e000      	b.n	8001f1c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
	...

08001f28 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f28:	b590      	push	{r4, r7, lr}
 8001f2a:	b08d      	sub	sp, #52	; 0x34
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e33b      	b.n	80025b2 <HAL_RCC_OscConfig+0x68a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0320 	and.w	r3, r3, #32
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f000 8092 	beq.w	800206c <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f48:	f7ff fea1 	bl	8001c8e <LL_RCC_GetSysClkSource>
 8001f4c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f4e:	f7ff ff82 	bl	8001e56 <LL_RCC_PLL_GetMainSource>
 8001f52:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d005      	beq.n	8001f66 <HAL_RCC_OscConfig+0x3e>
 8001f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f5c:	2b0c      	cmp	r3, #12
 8001f5e:	d14c      	bne.n	8001ffa <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d149      	bne.n	8001ffa <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f66:	f7ff fe2f 	bl	8001bc8 <LL_RCC_MSI_IsReady>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d005      	beq.n	8001f7c <HAL_RCC_OscConfig+0x54>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	69db      	ldr	r3, [r3, #28]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e31a      	b.n	80025b2 <HAL_RCC_OscConfig+0x68a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001f80:	f7ff fe47 	bl	8001c12 <LL_RCC_MSI_GetRange>
 8001f84:	4603      	mov	r3, r0
 8001f86:	429c      	cmp	r4, r3
 8001f88:	d914      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f000 fcd8 	bl	8002944 <RCC_SetFlashLatencyFromMSIRange>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e309      	b.n	80025b2 <HAL_RCC_OscConfig+0x68a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff fe21 	bl	8001bea <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff fe45 	bl	8001c3c <LL_RCC_MSI_SetCalibTrimming>
 8001fb2:	e013      	b.n	8001fdc <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff fe16 	bl	8001bea <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a1b      	ldr	r3, [r3, #32]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff fe3a 	bl	8001c3c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f000 fcb9 	bl	8002944 <RCC_SetFlashLatencyFromMSIRange>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e2ea      	b.n	80025b2 <HAL_RCC_OscConfig+0x68a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001fdc:	f000 fc9e 	bl	800291c <HAL_RCC_GetHCLKFreq>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	4ab3      	ldr	r2, [pc, #716]	; (80022b0 <HAL_RCC_OscConfig+0x388>)
 8001fe4:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001fe6:	4bb3      	ldr	r3, [pc, #716]	; (80022b4 <HAL_RCC_OscConfig+0x38c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff f9a2 	bl	8001334 <HAL_InitTick>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d039      	beq.n	800206a <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e2db      	b.n	80025b2 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d01e      	beq.n	8002040 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002002:	f7ff fdc3 	bl	8001b8c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002006:	f7ff f9e3 	bl	80013d0 <HAL_GetTick>
 800200a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800200c:	e008      	b.n	8002020 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800200e:	f7ff f9df 	bl	80013d0 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e2c8      	b.n	80025b2 <HAL_RCC_OscConfig+0x68a>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002020:	f7ff fdd2 	bl	8001bc8 <LL_RCC_MSI_IsReady>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d0f1      	beq.n	800200e <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff fddb 	bl	8001bea <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a1b      	ldr	r3, [r3, #32]
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff fdff 	bl	8001c3c <LL_RCC_MSI_SetCalibTrimming>
 800203e:	e015      	b.n	800206c <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002040:	f7ff fdb3 	bl	8001baa <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002044:	f7ff f9c4 	bl	80013d0 <HAL_GetTick>
 8002048:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800204c:	f7ff f9c0 	bl	80013d0 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e2a9      	b.n	80025b2 <HAL_RCC_OscConfig+0x68a>
        while (LL_RCC_MSI_IsReady() != 0U)
 800205e:	f7ff fdb3 	bl	8001bc8 <LL_RCC_MSI_IsReady>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1f1      	bne.n	800204c <HAL_RCC_OscConfig+0x124>
 8002068:	e000      	b.n	800206c <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800206a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	2b00      	cmp	r3, #0
 8002076:	d04e      	beq.n	8002116 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002078:	f7ff fe09 	bl	8001c8e <LL_RCC_GetSysClkSource>
 800207c:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800207e:	f7ff feea 	bl	8001e56 <LL_RCC_PLL_GetMainSource>
 8002082:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002084:	6a3b      	ldr	r3, [r7, #32]
 8002086:	2b08      	cmp	r3, #8
 8002088:	d005      	beq.n	8002096 <HAL_RCC_OscConfig+0x16e>
 800208a:	6a3b      	ldr	r3, [r7, #32]
 800208c:	2b0c      	cmp	r3, #12
 800208e:	d10d      	bne.n	80020ac <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	2b03      	cmp	r3, #3
 8002094:	d10a      	bne.n	80020ac <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002096:	f7ff fc4d 	bl	8001934 <LL_RCC_HSE_IsReady>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d039      	beq.n	8002114 <HAL_RCC_OscConfig+0x1ec>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d135      	bne.n	8002114 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e282      	b.n	80025b2 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020b4:	d102      	bne.n	80020bc <HAL_RCC_OscConfig+0x194>
 80020b6:	f7ff fc1f 	bl	80018f8 <LL_RCC_HSE_Enable>
 80020ba:	e001      	b.n	80020c0 <HAL_RCC_OscConfig+0x198>
 80020bc:	f7ff fc2b 	bl	8001916 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d012      	beq.n	80020ee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c8:	f7ff f982 	bl	80013d0 <HAL_GetTick>
 80020cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020d0:	f7ff f97e 	bl	80013d0 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b64      	cmp	r3, #100	; 0x64
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e267      	b.n	80025b2 <HAL_RCC_OscConfig+0x68a>
        while (LL_RCC_HSE_IsReady() == 0U)
 80020e2:	f7ff fc27 	bl	8001934 <LL_RCC_HSE_IsReady>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d0f1      	beq.n	80020d0 <HAL_RCC_OscConfig+0x1a8>
 80020ec:	e013      	b.n	8002116 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ee:	f7ff f96f 	bl	80013d0 <HAL_GetTick>
 80020f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80020f4:	e008      	b.n	8002108 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020f6:	f7ff f96b 	bl	80013d0 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b64      	cmp	r3, #100	; 0x64
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e254      	b.n	80025b2 <HAL_RCC_OscConfig+0x68a>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002108:	f7ff fc14 	bl	8001934 <LL_RCC_HSE_IsReady>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1f1      	bne.n	80020f6 <HAL_RCC_OscConfig+0x1ce>
 8002112:	e000      	b.n	8002116 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002114:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d051      	beq.n	80021c6 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002122:	f7ff fdb4 	bl	8001c8e <LL_RCC_GetSysClkSource>
 8002126:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002128:	f7ff fe95 	bl	8001e56 <LL_RCC_PLL_GetMainSource>
 800212c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	2b04      	cmp	r3, #4
 8002132:	d005      	beq.n	8002140 <HAL_RCC_OscConfig+0x218>
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	2b0c      	cmp	r3, #12
 8002138:	d113      	bne.n	8002162 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	2b02      	cmp	r3, #2
 800213e:	d110      	bne.n	8002162 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002140:	f7ff fc28 	bl	8001994 <LL_RCC_HSI_IsReady>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d005      	beq.n	8002156 <HAL_RCC_OscConfig+0x22e>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e22d      	b.n	80025b2 <HAL_RCC_OscConfig+0x68a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff fc2c 	bl	80019b8 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002160:	e031      	b.n	80021c6 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d019      	beq.n	800219e <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800216a:	f7ff fbf5 	bl	8001958 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800216e:	f7ff f92f 	bl	80013d0 <HAL_GetTick>
 8002172:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002174:	e008      	b.n	8002188 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002176:	f7ff f92b 	bl	80013d0 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e214      	b.n	80025b2 <HAL_RCC_OscConfig+0x68a>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002188:	f7ff fc04 	bl	8001994 <LL_RCC_HSI_IsReady>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0f1      	beq.n	8002176 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff fc0e 	bl	80019b8 <LL_RCC_HSI_SetCalibTrimming>
 800219c:	e013      	b.n	80021c6 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800219e:	f7ff fbea 	bl	8001976 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a2:	f7ff f915 	bl	80013d0 <HAL_GetTick>
 80021a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80021a8:	e008      	b.n	80021bc <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021aa:	f7ff f911 	bl	80013d0 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e1fa      	b.n	80025b2 <HAL_RCC_OscConfig+0x68a>
        while (LL_RCC_HSI_IsReady() != 0U)
 80021bc:	f7ff fbea 	bl	8001994 <LL_RCC_HSI_IsReady>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1f1      	bne.n	80021aa <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0308 	and.w	r3, r3, #8
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d106      	bne.n	80021e0 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f000 80a3 	beq.w	8002326 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d076      	beq.n	80022d6 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0310 	and.w	r3, r3, #16
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d046      	beq.n	8002282 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80021f4:	f7ff fc6d 	bl	8001ad2 <LL_RCC_LSI1_IsReady>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d113      	bne.n	8002226 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80021fe:	f7ff fc46 	bl	8001a8e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002202:	f7ff f8e5 	bl	80013d0 <HAL_GetTick>
 8002206:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002208:	e008      	b.n	800221c <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800220a:	f7ff f8e1 	bl	80013d0 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e1ca      	b.n	80025b2 <HAL_RCC_OscConfig+0x68a>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800221c:	f7ff fc59 	bl	8001ad2 <LL_RCC_LSI1_IsReady>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d0f1      	beq.n	800220a <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002226:	f7ff fc66 	bl	8001af6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800222a:	f7ff f8d1 	bl	80013d0 <HAL_GetTick>
 800222e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002230:	e008      	b.n	8002244 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002232:	f7ff f8cd 	bl	80013d0 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b03      	cmp	r3, #3
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e1b6      	b.n	80025b2 <HAL_RCC_OscConfig+0x68a>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002244:	f7ff fc79 	bl	8001b3a <LL_RCC_LSI2_IsReady>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d0f1      	beq.n	8002232 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff fc83 	bl	8001b5e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002258:	f7ff fc2a 	bl	8001ab0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225c:	f7ff f8b8 	bl	80013d0 <HAL_GetTick>
 8002260:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002264:	f7ff f8b4 	bl	80013d0 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e19d      	b.n	80025b2 <HAL_RCC_OscConfig+0x68a>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002276:	f7ff fc2c 	bl	8001ad2 <LL_RCC_LSI1_IsReady>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1f1      	bne.n	8002264 <HAL_RCC_OscConfig+0x33c>
 8002280:	e051      	b.n	8002326 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002282:	f7ff fc04 	bl	8001a8e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002286:	f7ff f8a3 	bl	80013d0 <HAL_GetTick>
 800228a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800228c:	e008      	b.n	80022a0 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800228e:	f7ff f89f 	bl	80013d0 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e188      	b.n	80025b2 <HAL_RCC_OscConfig+0x68a>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80022a0:	f7ff fc17 	bl	8001ad2 <LL_RCC_LSI1_IsReady>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d0f1      	beq.n	800228e <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80022aa:	f7ff fc35 	bl	8001b18 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80022ae:	e00c      	b.n	80022ca <HAL_RCC_OscConfig+0x3a2>
 80022b0:	20000000 	.word	0x20000000
 80022b4:	20000004 	.word	0x20000004
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80022b8:	f7ff f88a 	bl	80013d0 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b03      	cmp	r3, #3
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e173      	b.n	80025b2 <HAL_RCC_OscConfig+0x68a>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80022ca:	f7ff fc36 	bl	8001b3a <LL_RCC_LSI2_IsReady>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1f1      	bne.n	80022b8 <HAL_RCC_OscConfig+0x390>
 80022d4:	e027      	b.n	8002326 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80022d6:	f7ff fc1f 	bl	8001b18 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022da:	f7ff f879 	bl	80013d0 <HAL_GetTick>
 80022de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80022e0:	e008      	b.n	80022f4 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80022e2:	f7ff f875 	bl	80013d0 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b03      	cmp	r3, #3
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e15e      	b.n	80025b2 <HAL_RCC_OscConfig+0x68a>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80022f4:	f7ff fc21 	bl	8001b3a <LL_RCC_LSI2_IsReady>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1f1      	bne.n	80022e2 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80022fe:	f7ff fbd7 	bl	8001ab0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002302:	f7ff f865 	bl	80013d0 <HAL_GetTick>
 8002306:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002308:	e008      	b.n	800231c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800230a:	f7ff f861 	bl	80013d0 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e14a      	b.n	80025b2 <HAL_RCC_OscConfig+0x68a>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800231c:	f7ff fbd9 	bl	8001ad2 <LL_RCC_LSI1_IsReady>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1f1      	bne.n	800230a <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0304 	and.w	r3, r3, #4
 800232e:	2b00      	cmp	r3, #0
 8002330:	d05b      	beq.n	80023ea <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002332:	4ba2      	ldr	r3, [pc, #648]	; (80025bc <HAL_RCC_OscConfig+0x694>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800233a:	2b00      	cmp	r3, #0
 800233c:	d114      	bne.n	8002368 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800233e:	f7ff faa3 	bl	8001888 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002342:	f7ff f845 	bl	80013d0 <HAL_GetTick>
 8002346:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002348:	e008      	b.n	800235c <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800234a:	f7ff f841 	bl	80013d0 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e12a      	b.n	80025b2 <HAL_RCC_OscConfig+0x68a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800235c:	4b97      	ldr	r3, [pc, #604]	; (80025bc <HAL_RCC_OscConfig+0x694>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002364:	2b00      	cmp	r3, #0
 8002366:	d0f0      	beq.n	800234a <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d102      	bne.n	8002376 <HAL_RCC_OscConfig+0x44e>
 8002370:	f7ff fb37 	bl	80019e2 <LL_RCC_LSE_Enable>
 8002374:	e00c      	b.n	8002390 <HAL_RCC_OscConfig+0x468>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	2b05      	cmp	r3, #5
 800237c:	d104      	bne.n	8002388 <HAL_RCC_OscConfig+0x460>
 800237e:	f7ff fb52 	bl	8001a26 <LL_RCC_LSE_EnableBypass>
 8002382:	f7ff fb2e 	bl	80019e2 <LL_RCC_LSE_Enable>
 8002386:	e003      	b.n	8002390 <HAL_RCC_OscConfig+0x468>
 8002388:	f7ff fb3c 	bl	8001a04 <LL_RCC_LSE_Disable>
 800238c:	f7ff fb5c 	bl	8001a48 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d014      	beq.n	80023c2 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002398:	f7ff f81a 	bl	80013d0 <HAL_GetTick>
 800239c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800239e:	e00a      	b.n	80023b6 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023a0:	f7ff f816 	bl	80013d0 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e0fd      	b.n	80025b2 <HAL_RCC_OscConfig+0x68a>
      while (LL_RCC_LSE_IsReady() == 0U)
 80023b6:	f7ff fb58 	bl	8001a6a <LL_RCC_LSE_IsReady>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d0ef      	beq.n	80023a0 <HAL_RCC_OscConfig+0x478>
 80023c0:	e013      	b.n	80023ea <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023c2:	f7ff f805 	bl	80013d0 <HAL_GetTick>
 80023c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80023c8:	e00a      	b.n	80023e0 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ca:	f7ff f801 	bl	80013d0 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d8:	4293      	cmp	r3, r2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e0e8      	b.n	80025b2 <HAL_RCC_OscConfig+0x68a>
      while (LL_RCC_LSE_IsReady() != 0U)
 80023e0:	f7ff fb43 	bl	8001a6a <LL_RCC_LSE_IsReady>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1ef      	bne.n	80023ca <HAL_RCC_OscConfig+0x4a2>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f000 80de 	beq.w	80025b0 <HAL_RCC_OscConfig+0x688>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023f4:	f7ff fc4b 	bl	8001c8e <LL_RCC_GetSysClkSource>
 80023f8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80023fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002406:	2b02      	cmp	r3, #2
 8002408:	f040 80a6 	bne.w	8002558 <HAL_RCC_OscConfig+0x630>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f003 0203 	and.w	r2, r3, #3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002416:	429a      	cmp	r2, r3
 8002418:	d123      	bne.n	8002462 <HAL_RCC_OscConfig+0x53a>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002424:	429a      	cmp	r2, r3
 8002426:	d11c      	bne.n	8002462 <HAL_RCC_OscConfig+0x53a>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	0a1b      	lsrs	r3, r3, #8
 800242c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002434:	429a      	cmp	r2, r3
 8002436:	d114      	bne.n	8002462 <HAL_RCC_OscConfig+0x53a>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002442:	429a      	cmp	r2, r3
 8002444:	d10d      	bne.n	8002462 <HAL_RCC_OscConfig+0x53a>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002450:	429a      	cmp	r2, r3
 8002452:	d106      	bne.n	8002462 <HAL_RCC_OscConfig+0x53a>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800245e:	429a      	cmp	r2, r3
 8002460:	d054      	beq.n	800250c <HAL_RCC_OscConfig+0x5e4>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	2b0c      	cmp	r3, #12
 8002466:	d04f      	beq.n	8002508 <HAL_RCC_OscConfig+0x5e0>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002468:	f7ff fcaf 	bl	8001dca <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800246c:	f7fe ffb0 	bl	80013d0 <HAL_GetTick>
 8002470:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0x55e>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002474:	f7fe ffac 	bl	80013d0 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x55e>
              {
                return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e095      	b.n	80025b2 <HAL_RCC_OscConfig+0x68a>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002486:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1ef      	bne.n	8002474 <HAL_RCC_OscConfig+0x54c>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002498:	68da      	ldr	r2, [r3, #12]
 800249a:	4b49      	ldr	r3, [pc, #292]	; (80025c0 <HAL_RCC_OscConfig+0x698>)
 800249c:	4013      	ands	r3, r2
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80024a6:	4311      	orrs	r1, r2
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024ac:	0212      	lsls	r2, r2, #8
 80024ae:	4311      	orrs	r1, r2
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024b4:	4311      	orrs	r1, r2
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80024ba:	4311      	orrs	r1, r2
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80024c0:	430a      	orrs	r2, r1
 80024c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024c6:	4313      	orrs	r3, r2
 80024c8:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80024ca:	f7ff fc6f 	bl	8001dac <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024dc:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024de:	f7fe ff77 	bl	80013d0 <HAL_GetTick>
 80024e2:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024e4:	e008      	b.n	80024f8 <HAL_RCC_OscConfig+0x5d0>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e6:	f7fe ff73 	bl	80013d0 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x5d0>
              {
                return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e05c      	b.n	80025b2 <HAL_RCC_OscConfig+0x68a>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d0ef      	beq.n	80024e6 <HAL_RCC_OscConfig+0x5be>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002506:	e053      	b.n	80025b0 <HAL_RCC_OscConfig+0x688>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e052      	b.n	80025b2 <HAL_RCC_OscConfig+0x68a>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800250c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d14a      	bne.n	80025b0 <HAL_RCC_OscConfig+0x688>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800251a:	f7ff fc47 	bl	8001dac <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800251e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800252c:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800252e:	f7fe ff4f 	bl	80013d0 <HAL_GetTick>
 8002532:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x620>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002536:	f7fe ff4b 	bl	80013d0 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x620>
            {
              return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e034      	b.n	80025b2 <HAL_RCC_OscConfig+0x68a>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0ef      	beq.n	8002536 <HAL_RCC_OscConfig+0x60e>
 8002556:	e02b      	b.n	80025b0 <HAL_RCC_OscConfig+0x688>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	2b0c      	cmp	r3, #12
 800255c:	d026      	beq.n	80025ac <HAL_RCC_OscConfig+0x684>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800255e:	f7ff fc34 	bl	8001dca <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800256c:	f023 0303 	bic.w	r3, r3, #3
 8002570:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
 8002572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800257c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002580:	60d3      	str	r3, [r2, #12]
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002582:	f7fe ff25 	bl	80013d0 <HAL_GetTick>
 8002586:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x674>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800258a:	f7fe ff21 	bl	80013d0 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x674>
          {
            return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e00a      	b.n	80025b2 <HAL_RCC_OscConfig+0x68a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800259c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1ef      	bne.n	800258a <HAL_RCC_OscConfig+0x662>
 80025aa:	e001      	b.n	80025b0 <HAL_RCC_OscConfig+0x688>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e000      	b.n	80025b2 <HAL_RCC_OscConfig+0x68a>
      }
    }
  }
  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3734      	adds	r7, #52	; 0x34
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd90      	pop	{r4, r7, pc}
 80025ba:	bf00      	nop
 80025bc:	58000400 	.word	0x58000400
 80025c0:	11c1808c 	.word	0x11c1808c

080025c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d101      	bne.n	80025d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e12d      	b.n	8002834 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025d8:	4b98      	ldr	r3, [pc, #608]	; (800283c <HAL_RCC_ClockConfig+0x278>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d91b      	bls.n	800261e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e6:	4b95      	ldr	r3, [pc, #596]	; (800283c <HAL_RCC_ClockConfig+0x278>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f023 0207 	bic.w	r2, r3, #7
 80025ee:	4993      	ldr	r1, [pc, #588]	; (800283c <HAL_RCC_ClockConfig+0x278>)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025f6:	f7fe feeb 	bl	80013d0 <HAL_GetTick>
 80025fa:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025fc:	e008      	b.n	8002610 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80025fe:	f7fe fee7 	bl	80013d0 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e111      	b.n	8002834 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002610:	4b8a      	ldr	r3, [pc, #552]	; (800283c <HAL_RCC_ClockConfig+0x278>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	d1ef      	bne.n	80025fe <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d016      	beq.n	8002658 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	4618      	mov	r0, r3
 8002630:	f7ff fb39 	bl	8001ca6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002634:	f7fe fecc 	bl	80013d0 <HAL_GetTick>
 8002638:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800263a:	e008      	b.n	800264e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800263c:	f7fe fec8 	bl	80013d0 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d901      	bls.n	800264e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e0f2      	b.n	8002834 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800264e:	f7ff fc0e 	bl	8001e6e <LL_RCC_IsActiveFlag_HPRE>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d0f1      	beq.n	800263c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0320 	and.w	r3, r3, #32
 8002660:	2b00      	cmp	r3, #0
 8002662:	d016      	beq.n	8002692 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff fb30 	bl	8001cce <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800266e:	f7fe feaf 	bl	80013d0 <HAL_GetTick>
 8002672:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002674:	e008      	b.n	8002688 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002676:	f7fe feab 	bl	80013d0 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e0d5      	b.n	8002834 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002688:	f7ff fc03 	bl	8001e92 <LL_RCC_IsActiveFlag_C2HPRE>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d0f1      	beq.n	8002676 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800269a:	2b00      	cmp	r3, #0
 800269c:	d016      	beq.n	80026cc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7ff fb29 	bl	8001cfa <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80026a8:	f7fe fe92 	bl	80013d0 <HAL_GetTick>
 80026ac:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80026b0:	f7fe fe8e 	bl	80013d0 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e0b8      	b.n	8002834 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80026c2:	f7ff fbf9 	bl	8001eb8 <LL_RCC_IsActiveFlag_SHDHPRE>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d0f1      	beq.n	80026b0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0304 	and.w	r3, r3, #4
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d016      	beq.n	8002706 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff fb23 	bl	8001d28 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80026e2:	f7fe fe75 	bl	80013d0 <HAL_GetTick>
 80026e6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80026e8:	e008      	b.n	80026fc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80026ea:	f7fe fe71 	bl	80013d0 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e09b      	b.n	8002834 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80026fc:	f7ff fbef 	bl	8001ede <LL_RCC_IsActiveFlag_PPRE1>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d0f1      	beq.n	80026ea <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0308 	and.w	r3, r3, #8
 800270e:	2b00      	cmp	r3, #0
 8002710:	d017      	beq.n	8002742 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff fb19 	bl	8001d50 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800271e:	f7fe fe57 	bl	80013d0 <HAL_GetTick>
 8002722:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002724:	e008      	b.n	8002738 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002726:	f7fe fe53 	bl	80013d0 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e07d      	b.n	8002834 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002738:	f7ff fbe3 	bl	8001f02 <LL_RCC_IsActiveFlag_PPRE2>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d0f1      	beq.n	8002726 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b00      	cmp	r3, #0
 800274c:	d043      	beq.n	80027d6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	2b02      	cmp	r3, #2
 8002754:	d106      	bne.n	8002764 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002756:	f7ff f8ed 	bl	8001934 <LL_RCC_HSE_IsReady>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d11e      	bne.n	800279e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e067      	b.n	8002834 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	2b03      	cmp	r3, #3
 800276a:	d106      	bne.n	800277a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800276c:	f7ff fb3c 	bl	8001de8 <LL_RCC_PLL_IsReady>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d113      	bne.n	800279e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e05c      	b.n	8002834 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d106      	bne.n	8002790 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002782:	f7ff fa21 	bl	8001bc8 <LL_RCC_MSI_IsReady>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d108      	bne.n	800279e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e051      	b.n	8002834 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002790:	f7ff f900 	bl	8001994 <LL_RCC_HSI_IsReady>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e04a      	b.n	8002834 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7ff fa5f 	bl	8001c66 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027a8:	f7fe fe12 	bl	80013d0 <HAL_GetTick>
 80027ac:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ae:	e00a      	b.n	80027c6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027b0:	f7fe fe0e 	bl	80013d0 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80027be:	4293      	cmp	r3, r2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e036      	b.n	8002834 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027c6:	f7ff fa62 	bl	8001c8e <LL_RCC_GetSysClkSource>
 80027ca:	4602      	mov	r2, r0
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d1ec      	bne.n	80027b0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027d6:	4b19      	ldr	r3, [pc, #100]	; (800283c <HAL_RCC_ClockConfig+0x278>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0307 	and.w	r3, r3, #7
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d21b      	bcs.n	800281c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027e4:	4b15      	ldr	r3, [pc, #84]	; (800283c <HAL_RCC_ClockConfig+0x278>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f023 0207 	bic.w	r2, r3, #7
 80027ec:	4913      	ldr	r1, [pc, #76]	; (800283c <HAL_RCC_ClockConfig+0x278>)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027f4:	f7fe fdec 	bl	80013d0 <HAL_GetTick>
 80027f8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fa:	e008      	b.n	800280e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80027fc:	f7fe fde8 	bl	80013d0 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d901      	bls.n	800280e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e012      	b.n	8002834 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800280e:	4b0b      	ldr	r3, [pc, #44]	; (800283c <HAL_RCC_ClockConfig+0x278>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	429a      	cmp	r2, r3
 800281a:	d1ef      	bne.n	80027fc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800281c:	f000 f87e 	bl	800291c <HAL_RCC_GetHCLKFreq>
 8002820:	4603      	mov	r3, r0
 8002822:	4a07      	ldr	r2, [pc, #28]	; (8002840 <HAL_RCC_ClockConfig+0x27c>)
 8002824:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002826:	f7fe fddf 	bl	80013e8 <HAL_GetTickPrio>
 800282a:	4603      	mov	r3, r0
 800282c:	4618      	mov	r0, r3
 800282e:	f7fe fd81 	bl	8001334 <HAL_InitTick>
 8002832:	4603      	mov	r3, r0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	58004000 	.word	0x58004000
 8002840:	20000000 	.word	0x20000000

08002844 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002844:	b590      	push	{r4, r7, lr}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800284a:	f7ff fa20 	bl	8001c8e <LL_RCC_GetSysClkSource>
 800284e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d10a      	bne.n	800286c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002856:	f7ff f9dc 	bl	8001c12 <LL_RCC_MSI_GetRange>
 800285a:	4603      	mov	r3, r0
 800285c:	091b      	lsrs	r3, r3, #4
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	4a2b      	ldr	r2, [pc, #172]	; (8002910 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	e04b      	b.n	8002904 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b04      	cmp	r3, #4
 8002870:	d102      	bne.n	8002878 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002872:	4b28      	ldr	r3, [pc, #160]	; (8002914 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	e045      	b.n	8002904 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2b08      	cmp	r3, #8
 800287c:	d10a      	bne.n	8002894 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800287e:	f7ff f829 	bl	80018d4 <LL_RCC_HSE_IsEnabledDiv2>
 8002882:	4603      	mov	r3, r0
 8002884:	2b01      	cmp	r3, #1
 8002886:	d102      	bne.n	800288e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002888:	4b22      	ldr	r3, [pc, #136]	; (8002914 <HAL_RCC_GetSysClockFreq+0xd0>)
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	e03a      	b.n	8002904 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800288e:	4b22      	ldr	r3, [pc, #136]	; (8002918 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002890:	60fb      	str	r3, [r7, #12]
 8002892:	e037      	b.n	8002904 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002894:	f7ff fadf 	bl	8001e56 <LL_RCC_PLL_GetMainSource>
 8002898:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	2b02      	cmp	r3, #2
 800289e:	d003      	beq.n	80028a8 <HAL_RCC_GetSysClockFreq+0x64>
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	2b03      	cmp	r3, #3
 80028a4:	d003      	beq.n	80028ae <HAL_RCC_GetSysClockFreq+0x6a>
 80028a6:	e00d      	b.n	80028c4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80028a8:	4b1a      	ldr	r3, [pc, #104]	; (8002914 <HAL_RCC_GetSysClockFreq+0xd0>)
 80028aa:	60bb      	str	r3, [r7, #8]
        break;
 80028ac:	e015      	b.n	80028da <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80028ae:	f7ff f811 	bl	80018d4 <LL_RCC_HSE_IsEnabledDiv2>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d102      	bne.n	80028be <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80028b8:	4b16      	ldr	r3, [pc, #88]	; (8002914 <HAL_RCC_GetSysClockFreq+0xd0>)
 80028ba:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80028bc:	e00d      	b.n	80028da <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80028be:	4b16      	ldr	r3, [pc, #88]	; (8002918 <HAL_RCC_GetSysClockFreq+0xd4>)
 80028c0:	60bb      	str	r3, [r7, #8]
        break;
 80028c2:	e00a      	b.n	80028da <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80028c4:	f7ff f9a5 	bl	8001c12 <LL_RCC_MSI_GetRange>
 80028c8:	4603      	mov	r3, r0
 80028ca:	091b      	lsrs	r3, r3, #4
 80028cc:	f003 030f 	and.w	r3, r3, #15
 80028d0:	4a0f      	ldr	r2, [pc, #60]	; (8002910 <HAL_RCC_GetSysClockFreq+0xcc>)
 80028d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028d6:	60bb      	str	r3, [r7, #8]
        break;
 80028d8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80028da:	f7ff fa97 	bl	8001e0c <LL_RCC_PLL_GetN>
 80028de:	4602      	mov	r2, r0
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	fb03 f402 	mul.w	r4, r3, r2
 80028e6:	f7ff faaa 	bl	8001e3e <LL_RCC_PLL_GetDivider>
 80028ea:	4603      	mov	r3, r0
 80028ec:	091b      	lsrs	r3, r3, #4
 80028ee:	3301      	adds	r3, #1
 80028f0:	fbb4 f4f3 	udiv	r4, r4, r3
 80028f4:	f7ff fa97 	bl	8001e26 <LL_RCC_PLL_GetR>
 80028f8:	4603      	mov	r3, r0
 80028fa:	0f5b      	lsrs	r3, r3, #29
 80028fc:	3301      	adds	r3, #1
 80028fe:	fbb4 f3f3 	udiv	r3, r4, r3
 8002902:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8002904:	68fb      	ldr	r3, [r7, #12]
}
 8002906:	4618      	mov	r0, r3
 8002908:	3714      	adds	r7, #20
 800290a:	46bd      	mov	sp, r7
 800290c:	bd90      	pop	{r4, r7, pc}
 800290e:	bf00      	nop
 8002910:	08005f84 	.word	0x08005f84
 8002914:	00f42400 	.word	0x00f42400
 8002918:	01e84800 	.word	0x01e84800

0800291c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800291c:	b598      	push	{r3, r4, r7, lr}
 800291e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002920:	f7ff ff90 	bl	8002844 <HAL_RCC_GetSysClockFreq>
 8002924:	4604      	mov	r4, r0
 8002926:	f7ff fa27 	bl	8001d78 <LL_RCC_GetAHBPrescaler>
 800292a:	4603      	mov	r3, r0
 800292c:	091b      	lsrs	r3, r3, #4
 800292e:	f003 030f 	and.w	r3, r3, #15
 8002932:	4a03      	ldr	r2, [pc, #12]	; (8002940 <HAL_RCC_GetHCLKFreq+0x24>)
 8002934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002938:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800293c:	4618      	mov	r0, r3
 800293e:	bd98      	pop	{r3, r4, r7, pc}
 8002940:	08005f44 	.word	0x08005f44

08002944 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2bb0      	cmp	r3, #176	; 0xb0
 8002950:	d903      	bls.n	800295a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002952:	4b14      	ldr	r3, [pc, #80]	; (80029a4 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8002954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	e007      	b.n	800296a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	091b      	lsrs	r3, r3, #4
 800295e:	f003 030f 	and.w	r3, r3, #15
 8002962:	4a10      	ldr	r2, [pc, #64]	; (80029a4 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8002964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002968:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800296a:	f7ff fa11 	bl	8001d90 <LL_RCC_GetAHB4Prescaler>
 800296e:	4603      	mov	r3, r0
 8002970:	091b      	lsrs	r3, r3, #4
 8002972:	f003 030f 	and.w	r3, r3, #15
 8002976:	4a0c      	ldr	r2, [pc, #48]	; (80029a8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002982:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	4a09      	ldr	r2, [pc, #36]	; (80029ac <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002988:	fba2 2303 	umull	r2, r3, r2, r3
 800298c:	0c9b      	lsrs	r3, r3, #18
 800298e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002992:	4618      	mov	r0, r3
 8002994:	f000 f80c 	bl	80029b0 <RCC_SetFlashLatency>
 8002998:	4603      	mov	r3, r0
#endif
}
 800299a:	4618      	mov	r0, r3
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	08005f84 	.word	0x08005f84
 80029a8:	08005f44 	.word	0x08005f44
 80029ac:	431bde83 	.word	0x431bde83

080029b0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80029b0:	b590      	push	{r4, r7, lr}
 80029b2:	b08f      	sub	sp, #60	; 0x3c
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80029ba:	4b25      	ldr	r3, [pc, #148]	; (8002a50 <RCC_SetFlashLatency+0xa0>)
 80029bc:	f107 041c 	add.w	r4, r7, #28
 80029c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80029c6:	4b23      	ldr	r3, [pc, #140]	; (8002a54 <RCC_SetFlashLatency+0xa4>)
 80029c8:	f107 040c 	add.w	r4, r7, #12
 80029cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80029d2:	2300      	movs	r3, #0
 80029d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80029d6:	2300      	movs	r3, #0
 80029d8:	633b      	str	r3, [r7, #48]	; 0x30
 80029da:	e015      	b.n	8002a08 <RCC_SetFlashLatency+0x58>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80029dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80029e4:	4413      	add	r3, r2
 80029e6:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d808      	bhi.n	8002a02 <RCC_SetFlashLatency+0x52>
    {
      latency = FLASH_LATENCY_RANGE[index];
 80029f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80029f8:	4413      	add	r3, r2
 80029fa:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80029fe:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8002a00:	e005      	b.n	8002a0e <RCC_SetFlashLatency+0x5e>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a04:	3301      	adds	r3, #1
 8002a06:	633b      	str	r3, [r7, #48]	; 0x30
 8002a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a0a:	2b03      	cmp	r3, #3
 8002a0c:	d9e6      	bls.n	80029dc <RCC_SetFlashLatency+0x2c>
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8002a0e:	4b12      	ldr	r3, [pc, #72]	; (8002a58 <RCC_SetFlashLatency+0xa8>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f023 0207 	bic.w	r2, r3, #7
 8002a16:	4910      	ldr	r1, [pc, #64]	; (8002a58 <RCC_SetFlashLatency+0xa8>)
 8002a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002a1e:	f7fe fcd7 	bl	80013d0 <HAL_GetTick>
 8002a22:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002a24:	e008      	b.n	8002a38 <RCC_SetFlashLatency+0x88>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002a26:	f7fe fcd3 	bl	80013d0 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d901      	bls.n	8002a38 <RCC_SetFlashLatency+0x88>
    {
      return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e007      	b.n	8002a48 <RCC_SetFlashLatency+0x98>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002a38:	4b07      	ldr	r3, [pc, #28]	; (8002a58 <RCC_SetFlashLatency+0xa8>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0307 	and.w	r3, r3, #7
 8002a40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d1ef      	bne.n	8002a26 <RCC_SetFlashLatency+0x76>
    }
  }
  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	373c      	adds	r7, #60	; 0x3c
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd90      	pop	{r4, r7, pc}
 8002a50:	08005ddc 	.word	0x08005ddc
 8002a54:	08005dec 	.word	0x08005dec
 8002a58:	58004000 	.word	0x58004000

08002a5c <LL_RCC_LSE_IsEnabled>:
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d101      	bne.n	8002a74 <LL_RCC_LSE_IsEnabled+0x18>
 8002a70:	2301      	movs	r3, #1
 8002a72:	e000      	b.n	8002a76 <LL_RCC_LSE_IsEnabled+0x1a>
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <LL_RCC_LSE_IsReady>:
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002a84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d101      	bne.n	8002a98 <LL_RCC_LSE_IsReady+0x18>
 8002a94:	2301      	movs	r3, #1
 8002a96:	e000      	b.n	8002a9a <LL_RCC_LSE_IsReady+0x1a>
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <LL_RCC_SetRFWKPClockSource>:
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002aac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ab4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ab8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <LL_RCC_SetSMPSClockSource>:
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ade:	f023 0203 	bic.w	r2, r3, #3
 8002ae2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <LL_RCC_SetSMPSPrescaler>:
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b06:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <LL_RCC_SetUSARTClockSource>:
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002b28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b30:	f023 0203 	bic.w	r2, r3, #3
 8002b34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <LL_RCC_SetLPUARTClockSource>:
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b5c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <LL_RCC_SetI2CClockSource>:
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002b80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b84:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	091b      	lsrs	r3, r3, #4
 8002b8c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002b90:	43db      	mvns	r3, r3
 8002b92:	401a      	ands	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	011b      	lsls	r3, r3, #4
 8002b98:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002b9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr

08002bb2 <LL_RCC_SetLPTIMClockSource>:
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b083      	sub	sp, #12
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002bba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bbe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	0c1b      	lsrs	r3, r3, #16
 8002bc6:	041b      	lsls	r3, r3, #16
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	401a      	ands	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	041b      	lsls	r3, r3, #16
 8002bd0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <LL_RCC_SetRNGClockSource>:
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002bee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002bfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr

08002c12 <LL_RCC_SetCLK48ClockSource>:
{
 8002c12:	b480      	push	{r7}
 8002c14:	b083      	sub	sp, #12
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c22:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c32:	bf00      	nop
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <LL_RCC_SetADCClockSource>:
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b083      	sub	sp, #12
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002c46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c4e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <LL_RCC_SetRTCClockSource>:
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b083      	sub	sp, #12
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002c72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c7a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <LL_RCC_GetRTCClockSource>:
{
 8002c96:	b480      	push	{r7}
 8002c98:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <LL_RCC_ForceBackupDomainReset>:
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002cb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002cc8:	bf00      	nop
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr

08002cd2 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ce2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ce6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002cea:	bf00      	nop
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b088      	sub	sp, #32
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002d00:	2300      	movs	r3, #0
 8002d02:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d046      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002d10:	f7ff ffc1 	bl	8002c96 <LL_RCC_GetRTCClockSource>
 8002d14:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d03c      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002d20:	f7fe fdb2 	bl	8001888 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d105      	bne.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7ff ff9b 	bl	8002c6a <LL_RCC_SetRTCClockSource>
 8002d34:	e02e      	b.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002d36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d3e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002d40:	f7ff ffb6 	bl	8002cb0 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002d44:	f7ff ffc5 	bl	8002cd2 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002d56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002d60:	f7ff fe7c 	bl	8002a5c <LL_RCC_LSE_IsEnabled>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d114      	bne.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d6a:	f7fe fb31 	bl	80013d0 <HAL_GetTick>
 8002d6e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002d70:	e00b      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d72:	f7fe fb2d 	bl	80013d0 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d902      	bls.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	77fb      	strb	r3, [r7, #31]
              break;
 8002d88:	e004      	b.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002d8a:	f7ff fe79 	bl	8002a80 <LL_RCC_LSE_IsReady>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d1ee      	bne.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002d94:	7ffb      	ldrb	r3, [r7, #31]
 8002d96:	77bb      	strb	r3, [r7, #30]
 8002d98:	e001      	b.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d9a:	7ffb      	ldrb	r3, [r7, #31]
 8002d9c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d004      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff feb6 	bl	8002b20 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d004      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff fec1 	bl	8002b4c <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0310 	and.w	r3, r3, #16
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d004      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff fee9 	bl	8002bb2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0320 	and.w	r3, r3, #32
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d004      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	695b      	ldr	r3, [r3, #20]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7ff fede 	bl	8002bb2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0304 	and.w	r3, r3, #4
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d004      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff feb6 	bl	8002b78 <LL_RCC_SetI2CClockSource>
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d02b      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e20:	d008      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e2a:	d003      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d105      	bne.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff fed4 	bl	8002be6 <LL_RCC_SetRNGClockSource>
 8002e3e:	e00a      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x162>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e48:	60fb      	str	r3, [r7, #12]
 8002e4a:	2000      	movs	r0, #0
 8002e4c:	f7ff fecb 	bl	8002be6 <LL_RCC_SetRNGClockSource>
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f7ff fede 	bl	8002c12 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002e5e:	d107      	bne.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e6e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d011      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	69db      	ldr	r3, [r3, #28]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff fedc 	bl	8002c3e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e8e:	d107      	bne.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002e90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e9e:	60d3      	str	r3, [r2, #12]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d004      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7ff fdf7 	bl	8002aa4 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d009      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff fe16 	bl	8002af8 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff fdfd 	bl	8002ad0 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8002ed6:	7fbb      	ldrb	r3, [r7, #30]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3720      	adds	r7, #32
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e090      	b.n	8003014 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d106      	bne.n	8002f0c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f7fe f928 	bl	800115c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2202      	movs	r2, #2
 8002f10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	22ca      	movs	r2, #202	; 0xca
 8002f1a:	625a      	str	r2, [r3, #36]	; 0x24
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2253      	movs	r2, #83	; 0x53
 8002f22:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f000 f89f 	bl	8003068 <RTC_EnterInitMode>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d009      	beq.n	8002f44 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	22ff      	movs	r2, #255	; 0xff
 8002f36:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2204      	movs	r2, #4
 8002f3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e067      	b.n	8003014 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	6812      	ldr	r2, [r2, #0]
 8002f4e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002f52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f56:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6899      	ldr	r1, [r3, #8]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685a      	ldr	r2, [r3, #4]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	431a      	orrs	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	431a      	orrs	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	68d2      	ldr	r2, [r2, #12]
 8002f7e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6919      	ldr	r1, [r3, #16]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	041a      	lsls	r2, r3, #16
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fa2:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 0202 	bic.w	r2, r2, #2
 8002fb2:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	69da      	ldr	r2, [r3, #28]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 0320 	and.w	r3, r3, #32
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d113      	bne.n	8003002 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f81e 	bl	800301c <HAL_RTC_WaitForSynchro>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00d      	beq.n	8003002 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	22ff      	movs	r2, #255	; 0xff
 8002fec:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2204      	movs	r2, #4
 8002ff2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e008      	b.n	8003014 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	22ff      	movs	r2, #255	; 0xff
 8003008:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8003012:	2300      	movs	r3, #0
  }
}
 8003014:	4618      	mov	r0, r3
 8003016:	3708      	adds	r7, #8
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68da      	ldr	r2, [r3, #12]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003032:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003034:	f7fe f9cc 	bl	80013d0 <HAL_GetTick>
 8003038:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800303a:	e009      	b.n	8003050 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800303c:	f7fe f9c8 	bl	80013d0 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800304a:	d901      	bls.n	8003050 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e007      	b.n	8003060 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	f003 0320 	and.w	r3, r3, #32
 800305a:	2b00      	cmp	r3, #0
 800305c:	d0ee      	beq.n	800303c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800307a:	2b00      	cmp	r3, #0
 800307c:	d119      	bne.n	80030b2 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f04f 32ff 	mov.w	r2, #4294967295
 8003086:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003088:	f7fe f9a2 	bl	80013d0 <HAL_GetTick>
 800308c:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800308e:	e009      	b.n	80030a4 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8003090:	f7fe f99e 	bl	80013d0 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800309e:	d901      	bls.n	80030a4 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e007      	b.n	80030b4 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d0ee      	beq.n	8003090 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3710      	adds	r7, #16
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b088      	sub	sp, #32
 80030c0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80030c2:	2300      	movs	r3, #0
 80030c4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80030c6:	f107 0308 	add.w	r3, r7, #8
 80030ca:	2218      	movs	r2, #24
 80030cc:	2100      	movs	r1, #0
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 ff45 	bl	8003f5e <Osal_MemSet>
  rq.ogf = 0x3f;
 80030d4:	233f      	movs	r3, #63	; 0x3f
 80030d6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 80030d8:	2381      	movs	r3, #129	; 0x81
 80030da:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80030dc:	1dfb      	adds	r3, r7, #7
 80030de:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80030e0:	2301      	movs	r3, #1
 80030e2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80030e4:	f107 0308 	add.w	r3, r7, #8
 80030e8:	2100      	movs	r1, #0
 80030ea:	4618      	mov	r0, r3
 80030ec:	f001 f9f8 	bl	80044e0 <hci_send_req>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	da01      	bge.n	80030fa <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 80030f6:	23ff      	movs	r3, #255	; 0xff
 80030f8:	e000      	b.n	80030fc <aci_gap_set_non_discoverable+0x40>
  return status;
 80030fa:	79fb      	ldrb	r3, [r7, #7]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3720      	adds	r7, #32
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8003104:	b5b0      	push	{r4, r5, r7, lr}
 8003106:	b0ce      	sub	sp, #312	; 0x138
 8003108:	af00      	add	r7, sp, #0
 800310a:	4605      	mov	r5, r0
 800310c:	460c      	mov	r4, r1
 800310e:	4610      	mov	r0, r2
 8003110:	4619      	mov	r1, r3
 8003112:	1dfb      	adds	r3, r7, #7
 8003114:	462a      	mov	r2, r5
 8003116:	701a      	strb	r2, [r3, #0]
 8003118:	1d3b      	adds	r3, r7, #4
 800311a:	4622      	mov	r2, r4
 800311c:	801a      	strh	r2, [r3, #0]
 800311e:	1cbb      	adds	r3, r7, #2
 8003120:	4602      	mov	r2, r0
 8003122:	801a      	strh	r2, [r3, #0]
 8003124:	1dbb      	adds	r3, r7, #6
 8003126:	460a      	mov	r2, r1
 8003128:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800312a:	f107 0310 	add.w	r3, r7, #16
 800312e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8003132:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8003136:	3308      	adds	r3, #8
 8003138:	f107 0210 	add.w	r2, r7, #16
 800313c:	4413      	add	r3, r2
 800313e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8003142:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8003146:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800314a:	4413      	add	r3, r2
 800314c:	3309      	adds	r3, #9
 800314e:	f107 0210 	add.w	r2, r7, #16
 8003152:	4413      	add	r3, r2
 8003154:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8003158:	f107 030f 	add.w	r3, r7, #15
 800315c:	2200      	movs	r2, #0
 800315e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8003160:	2300      	movs	r3, #0
 8003162:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8003166:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800316a:	1dfa      	adds	r2, r7, #7
 800316c:	7812      	ldrb	r2, [r2, #0]
 800316e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8003170:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003174:	3301      	adds	r3, #1
 8003176:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800317a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800317e:	1d3a      	adds	r2, r7, #4
 8003180:	8812      	ldrh	r2, [r2, #0]
 8003182:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8003186:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800318a:	3302      	adds	r3, #2
 800318c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8003190:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003194:	1cba      	adds	r2, r7, #2
 8003196:	8812      	ldrh	r2, [r2, #0]
 8003198:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800319c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80031a0:	3302      	adds	r3, #2
 80031a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 80031a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80031aa:	1dba      	adds	r2, r7, #6
 80031ac:	7812      	ldrb	r2, [r2, #0]
 80031ae:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80031b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80031b4:	3301      	adds	r3, #1
 80031b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 80031ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80031be:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80031c2:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80031c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80031c8:	3301      	adds	r3, #1
 80031ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 80031ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80031d2:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80031d6:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80031d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80031dc:	3301      	adds	r3, #1
 80031de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80031e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80031e6:	3308      	adds	r3, #8
 80031e8:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80031ec:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80031f0:	4618      	mov	r0, r3
 80031f2:	f000 fea4 	bl	8003f3e <Osal_MemCpy>
    index_input += Local_Name_Length;
 80031f6:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80031fa:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80031fe:	4413      	add	r3, r2
 8003200:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8003204:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003208:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800320c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800320e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003212:	3301      	adds	r3, #1
 8003214:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8003218:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800321c:	3301      	adds	r3, #1
 800321e:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8003222:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8003226:	4618      	mov	r0, r3
 8003228:	f000 fe89 	bl	8003f3e <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800322c:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8003230:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8003234:	4413      	add	r3, r2
 8003236:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 800323a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800323e:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8003242:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8003244:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003248:	3302      	adds	r3, #2
 800324a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 800324e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003252:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8003256:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8003258:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800325c:	3302      	adds	r3, #2
 800325e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003262:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003266:	2218      	movs	r2, #24
 8003268:	2100      	movs	r1, #0
 800326a:	4618      	mov	r0, r3
 800326c:	f000 fe77 	bl	8003f5e <Osal_MemSet>
  rq.ogf = 0x3f;
 8003270:	233f      	movs	r3, #63	; 0x3f
 8003272:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8003276:	2383      	movs	r3, #131	; 0x83
 8003278:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800327c:	f107 0310 	add.w	r3, r7, #16
 8003280:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8003284:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003288:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800328c:	f107 030f 	add.w	r3, r7, #15
 8003290:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8003294:	2301      	movs	r3, #1
 8003296:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800329a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800329e:	2100      	movs	r1, #0
 80032a0:	4618      	mov	r0, r3
 80032a2:	f001 f91d 	bl	80044e0 <hci_send_req>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	da01      	bge.n	80032b0 <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 80032ac:	23ff      	movs	r3, #255	; 0xff
 80032ae:	e002      	b.n	80032b6 <aci_gap_set_discoverable+0x1b2>
  return status;
 80032b0:	f107 030f 	add.w	r3, r7, #15
 80032b4:	781b      	ldrb	r3, [r3, #0]
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80032bc:	46bd      	mov	sp, r7
 80032be:	bdb0      	pop	{r4, r5, r7, pc}

080032c0 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b0cc      	sub	sp, #304	; 0x130
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	4602      	mov	r2, r0
 80032c8:	1dfb      	adds	r3, r7, #7
 80032ca:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 80032cc:	f107 0310 	add.w	r3, r7, #16
 80032d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80032d4:	f107 030f 	add.w	r3, r7, #15
 80032d8:	2200      	movs	r2, #0
 80032da:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80032dc:	2300      	movs	r3, #0
 80032de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 80032e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80032e6:	1dfa      	adds	r2, r7, #7
 80032e8:	7812      	ldrb	r2, [r2, #0]
 80032ea:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80032ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80032f0:	3301      	adds	r3, #1
 80032f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80032f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80032fa:	2218      	movs	r2, #24
 80032fc:	2100      	movs	r1, #0
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 fe2d 	bl	8003f5e <Osal_MemSet>
  rq.ogf = 0x3f;
 8003304:	233f      	movs	r3, #63	; 0x3f
 8003306:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800330a:	2385      	movs	r3, #133	; 0x85
 800330c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8003310:	f107 0310 	add.w	r3, r7, #16
 8003314:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8003318:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800331c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8003320:	f107 030f 	add.w	r3, r7, #15
 8003324:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8003328:	2301      	movs	r3, #1
 800332a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800332e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003332:	2100      	movs	r1, #0
 8003334:	4618      	mov	r0, r3
 8003336:	f001 f8d3 	bl	80044e0 <hci_send_req>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	da01      	bge.n	8003344 <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 8003340:	23ff      	movs	r3, #255	; 0xff
 8003342:	e002      	b.n	800334a <aci_gap_set_io_capability+0x8a>
  return status;
 8003344:	f107 030f 	add.w	r3, r7, #15
 8003348:	781b      	ldrb	r3, [r3, #0]
}
 800334a:	4618      	mov	r0, r3
 800334c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8003354:	b5b0      	push	{r4, r5, r7, lr}
 8003356:	b0cc      	sub	sp, #304	; 0x130
 8003358:	af00      	add	r7, sp, #0
 800335a:	4605      	mov	r5, r0
 800335c:	460c      	mov	r4, r1
 800335e:	4610      	mov	r0, r2
 8003360:	4619      	mov	r1, r3
 8003362:	1dfb      	adds	r3, r7, #7
 8003364:	462a      	mov	r2, r5
 8003366:	701a      	strb	r2, [r3, #0]
 8003368:	1dbb      	adds	r3, r7, #6
 800336a:	4622      	mov	r2, r4
 800336c:	701a      	strb	r2, [r3, #0]
 800336e:	1d7b      	adds	r3, r7, #5
 8003370:	4602      	mov	r2, r0
 8003372:	701a      	strb	r2, [r3, #0]
 8003374:	1d3b      	adds	r3, r7, #4
 8003376:	460a      	mov	r2, r1
 8003378:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800337a:	f107 0310 	add.w	r3, r7, #16
 800337e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8003382:	f107 030f 	add.w	r3, r7, #15
 8003386:	2200      	movs	r2, #0
 8003388:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800338a:	2300      	movs	r3, #0
 800338c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8003390:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003394:	1dfa      	adds	r2, r7, #7
 8003396:	7812      	ldrb	r2, [r2, #0]
 8003398:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800339a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800339e:	3301      	adds	r3, #1
 80033a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 80033a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80033a8:	1dba      	adds	r2, r7, #6
 80033aa:	7812      	ldrb	r2, [r2, #0]
 80033ac:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80033ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80033b2:	3301      	adds	r3, #1
 80033b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 80033b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80033bc:	1d7a      	adds	r2, r7, #5
 80033be:	7812      	ldrb	r2, [r2, #0]
 80033c0:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80033c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80033c6:	3301      	adds	r3, #1
 80033c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80033cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80033d0:	1d3a      	adds	r2, r7, #4
 80033d2:	7812      	ldrb	r2, [r2, #0]
 80033d4:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 80033d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80033da:	3301      	adds	r3, #1
 80033dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 80033e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80033e4:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 80033e8:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80033ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80033ee:	3301      	adds	r3, #1
 80033f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 80033f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80033f8:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 80033fc:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80033fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003402:	3301      	adds	r3, #1
 8003404:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8003408:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800340c:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8003410:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8003412:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003416:	3301      	adds	r3, #1
 8003418:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800341c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003420:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003424:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8003428:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800342c:	3304      	adds	r3, #4
 800342e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8003432:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003436:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800343a:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800343c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003440:	3301      	adds	r3, #1
 8003442:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003446:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800344a:	2218      	movs	r2, #24
 800344c:	2100      	movs	r1, #0
 800344e:	4618      	mov	r0, r3
 8003450:	f000 fd85 	bl	8003f5e <Osal_MemSet>
  rq.ogf = 0x3f;
 8003454:	233f      	movs	r3, #63	; 0x3f
 8003456:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800345a:	2386      	movs	r3, #134	; 0x86
 800345c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8003460:	f107 0310 	add.w	r3, r7, #16
 8003464:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8003468:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800346c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8003470:	f107 030f 	add.w	r3, r7, #15
 8003474:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8003478:	2301      	movs	r3, #1
 800347a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800347e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003482:	2100      	movs	r1, #0
 8003484:	4618      	mov	r0, r3
 8003486:	f001 f82b 	bl	80044e0 <hci_send_req>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	da01      	bge.n	8003494 <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 8003490:	23ff      	movs	r3, #255	; 0xff
 8003492:	e002      	b.n	800349a <aci_gap_set_authentication_requirement+0x146>
  return status;
 8003494:	f107 030f 	add.w	r3, r7, #15
 8003498:	781b      	ldrb	r3, [r3, #0]
}
 800349a:	4618      	mov	r0, r3
 800349c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bdb0      	pop	{r4, r5, r7, pc}

080034a4 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 80034a4:	b590      	push	{r4, r7, lr}
 80034a6:	b0cd      	sub	sp, #308	; 0x134
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	4604      	mov	r4, r0
 80034ac:	4608      	mov	r0, r1
 80034ae:	4611      	mov	r1, r2
 80034b0:	463a      	mov	r2, r7
 80034b2:	6013      	str	r3, [r2, #0]
 80034b4:	1dfb      	adds	r3, r7, #7
 80034b6:	4622      	mov	r2, r4
 80034b8:	701a      	strb	r2, [r3, #0]
 80034ba:	1dbb      	adds	r3, r7, #6
 80034bc:	4602      	mov	r2, r0
 80034be:	701a      	strb	r2, [r3, #0]
 80034c0:	1d7b      	adds	r3, r7, #5
 80034c2:	460a      	mov	r2, r1
 80034c4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80034c6:	f107 0310 	add.w	r3, r7, #16
 80034ca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80034ce:	f107 0308 	add.w	r3, r7, #8
 80034d2:	2207      	movs	r2, #7
 80034d4:	2100      	movs	r1, #0
 80034d6:	4618      	mov	r0, r3
 80034d8:	f000 fd41 	bl	8003f5e <Osal_MemSet>
  int index_input = 0;
 80034dc:	2300      	movs	r3, #0
 80034de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 80034e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80034e6:	1dfa      	adds	r2, r7, #7
 80034e8:	7812      	ldrb	r2, [r2, #0]
 80034ea:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80034ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80034f0:	3301      	adds	r3, #1
 80034f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 80034f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80034fa:	1dba      	adds	r2, r7, #6
 80034fc:	7812      	ldrb	r2, [r2, #0]
 80034fe:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8003500:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003504:	3301      	adds	r3, #1
 8003506:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 800350a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800350e:	1d7a      	adds	r2, r7, #5
 8003510:	7812      	ldrb	r2, [r2, #0]
 8003512:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8003514:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003518:	3301      	adds	r3, #1
 800351a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800351e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003522:	2218      	movs	r2, #24
 8003524:	2100      	movs	r1, #0
 8003526:	4618      	mov	r0, r3
 8003528:	f000 fd19 	bl	8003f5e <Osal_MemSet>
  rq.ogf = 0x3f;
 800352c:	233f      	movs	r3, #63	; 0x3f
 800352e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8003532:	238a      	movs	r3, #138	; 0x8a
 8003534:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8003538:	f107 0310 	add.w	r3, r7, #16
 800353c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8003540:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003544:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8003548:	f107 0308 	add.w	r3, r7, #8
 800354c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8003550:	2307      	movs	r3, #7
 8003552:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8003556:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800355a:	2100      	movs	r1, #0
 800355c:	4618      	mov	r0, r3
 800355e:	f000 ffbf 	bl	80044e0 <hci_send_req>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	da01      	bge.n	800356c <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 8003568:	23ff      	movs	r3, #255	; 0xff
 800356a:	e021      	b.n	80035b0 <aci_gap_init+0x10c>
  if ( resp.Status )
 800356c:	f107 0308 	add.w	r3, r7, #8
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d003      	beq.n	800357e <aci_gap_init+0xda>
    return resp.Status;
 8003576:	f107 0308 	add.w	r3, r7, #8
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	e018      	b.n	80035b0 <aci_gap_init+0x10c>
  *Service_Handle = resp.Service_Handle;
 800357e:	f107 0308 	add.w	r3, r7, #8
 8003582:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003586:	b29a      	uxth	r2, r3
 8003588:	463b      	mov	r3, r7
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800358e:	f107 0308 	add.w	r3, r7, #8
 8003592:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8003596:	b29a      	uxth	r2, r3
 8003598:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800359c:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800359e:	f107 0308 	add.w	r3, r7, #8
 80035a2:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80035ac:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd90      	pop	{r4, r7, pc}

080035ba <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b0cc      	sub	sp, #304	; 0x130
 80035be:	af00      	add	r7, sp, #0
 80035c0:	4602      	mov	r2, r0
 80035c2:	463b      	mov	r3, r7
 80035c4:	6019      	str	r1, [r3, #0]
 80035c6:	1dfb      	adds	r3, r7, #7
 80035c8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 80035ca:	f107 0310 	add.w	r3, r7, #16
 80035ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80035d2:	f107 030f 	add.w	r3, r7, #15
 80035d6:	2200      	movs	r2, #0
 80035d8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80035da:	2300      	movs	r3, #0
 80035dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 80035e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80035e4:	1dfa      	adds	r2, r7, #7
 80035e6:	7812      	ldrb	r2, [r2, #0]
 80035e8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80035ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80035ee:	3301      	adds	r3, #1
 80035f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 80035f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80035f8:	1c58      	adds	r0, r3, #1
 80035fa:	1dfb      	adds	r3, r7, #7
 80035fc:	781a      	ldrb	r2, [r3, #0]
 80035fe:	463b      	mov	r3, r7
 8003600:	6819      	ldr	r1, [r3, #0]
 8003602:	f000 fc9c 	bl	8003f3e <Osal_MemCpy>
  index_input += AdvDataLen;
 8003606:	1dfb      	adds	r3, r7, #7
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800360e:	4413      	add	r3, r2
 8003610:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003614:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003618:	2218      	movs	r2, #24
 800361a:	2100      	movs	r1, #0
 800361c:	4618      	mov	r0, r3
 800361e:	f000 fc9e 	bl	8003f5e <Osal_MemSet>
  rq.ogf = 0x3f;
 8003622:	233f      	movs	r3, #63	; 0x3f
 8003624:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8003628:	238e      	movs	r3, #142	; 0x8e
 800362a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800362e:	f107 0310 	add.w	r3, r7, #16
 8003632:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8003636:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800363a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800363e:	f107 030f 	add.w	r3, r7, #15
 8003642:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8003646:	2301      	movs	r3, #1
 8003648:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800364c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003650:	2100      	movs	r1, #0
 8003652:	4618      	mov	r0, r3
 8003654:	f000 ff44 	bl	80044e0 <hci_send_req>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	da01      	bge.n	8003662 <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 800365e:	23ff      	movs	r3, #255	; 0xff
 8003660:	e002      	b.n	8003668 <aci_gap_update_adv_data+0xae>
  return status;
 8003662:	f107 030f 	add.w	r3, r7, #15
 8003666:	781b      	ldrb	r3, [r3, #0]
}
 8003668:	4618      	mov	r0, r3
 800366a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b088      	sub	sp, #32
 8003676:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8003678:	2300      	movs	r3, #0
 800367a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800367c:	f107 0308 	add.w	r3, r7, #8
 8003680:	2218      	movs	r2, #24
 8003682:	2100      	movs	r1, #0
 8003684:	4618      	mov	r0, r3
 8003686:	f000 fc6a 	bl	8003f5e <Osal_MemSet>
  rq.ogf = 0x3f;
 800368a:	233f      	movs	r3, #63	; 0x3f
 800368c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800368e:	2392      	movs	r3, #146	; 0x92
 8003690:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8003692:	1dfb      	adds	r3, r7, #7
 8003694:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8003696:	2301      	movs	r3, #1
 8003698:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800369a:	f107 0308 	add.w	r3, r7, #8
 800369e:	2100      	movs	r1, #0
 80036a0:	4618      	mov	r0, r3
 80036a2:	f000 ff1d 	bl	80044e0 <hci_send_req>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	da01      	bge.n	80036b0 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 80036ac:	23ff      	movs	r3, #255	; 0xff
 80036ae:	e000      	b.n	80036b2 <aci_gap_configure_whitelist+0x40>
  return status;
 80036b0:	79fb      	ldrb	r3, [r7, #7]
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3720      	adds	r7, #32
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b088      	sub	sp, #32
 80036be:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80036c0:	2300      	movs	r3, #0
 80036c2:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80036c4:	f107 0308 	add.w	r3, r7, #8
 80036c8:	2218      	movs	r2, #24
 80036ca:	2100      	movs	r1, #0
 80036cc:	4618      	mov	r0, r3
 80036ce:	f000 fc46 	bl	8003f5e <Osal_MemSet>
  rq.ogf = 0x3f;
 80036d2:	233f      	movs	r3, #63	; 0x3f
 80036d4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 80036d6:	f240 1301 	movw	r3, #257	; 0x101
 80036da:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80036dc:	1dfb      	adds	r3, r7, #7
 80036de:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80036e0:	2301      	movs	r3, #1
 80036e2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80036e4:	f107 0308 	add.w	r3, r7, #8
 80036e8:	2100      	movs	r1, #0
 80036ea:	4618      	mov	r0, r3
 80036ec:	f000 fef8 	bl	80044e0 <hci_send_req>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	da01      	bge.n	80036fa <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 80036f6:	23ff      	movs	r3, #255	; 0xff
 80036f8:	e000      	b.n	80036fc <aci_gatt_init+0x42>
  return status;
 80036fa:	79fb      	ldrb	r3, [r7, #7]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3720      	adds	r7, #32
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8003704:	b590      	push	{r4, r7, lr}
 8003706:	b0cf      	sub	sp, #316	; 0x13c
 8003708:	af00      	add	r7, sp, #0
 800370a:	4604      	mov	r4, r0
 800370c:	4638      	mov	r0, r7
 800370e:	6001      	str	r1, [r0, #0]
 8003710:	4610      	mov	r0, r2
 8003712:	4619      	mov	r1, r3
 8003714:	1dfb      	adds	r3, r7, #7
 8003716:	4622      	mov	r2, r4
 8003718:	701a      	strb	r2, [r3, #0]
 800371a:	1dbb      	adds	r3, r7, #6
 800371c:	4602      	mov	r2, r0
 800371e:	701a      	strb	r2, [r3, #0]
 8003720:	1d7b      	adds	r3, r7, #5
 8003722:	460a      	mov	r2, r1
 8003724:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8003726:	f107 0310 	add.w	r3, r7, #16
 800372a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800372e:	1dfb      	adds	r3, r7, #7
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d007      	beq.n	8003746 <aci_gatt_add_service+0x42>
 8003736:	1dfb      	adds	r3, r7, #7
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	2b02      	cmp	r3, #2
 800373c:	d101      	bne.n	8003742 <aci_gatt_add_service+0x3e>
 800373e:	2311      	movs	r3, #17
 8003740:	e002      	b.n	8003748 <aci_gatt_add_service+0x44>
 8003742:	2301      	movs	r3, #1
 8003744:	e000      	b.n	8003748 <aci_gatt_add_service+0x44>
 8003746:	2303      	movs	r3, #3
 8003748:	f107 0210 	add.w	r2, r7, #16
 800374c:	4413      	add	r3, r2
 800374e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8003752:	f107 030c 	add.w	r3, r7, #12
 8003756:	2203      	movs	r2, #3
 8003758:	2100      	movs	r1, #0
 800375a:	4618      	mov	r0, r3
 800375c:	f000 fbff 	bl	8003f5e <Osal_MemSet>
  int index_input = 0;
 8003760:	2300      	movs	r3, #0
 8003762:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8003766:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800376a:	1dfa      	adds	r2, r7, #7
 800376c:	7812      	ldrb	r2, [r2, #0]
 800376e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8003770:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003774:	3301      	adds	r3, #1
 8003776:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800377a:	1dfb      	adds	r3, r7, #7
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d002      	beq.n	8003788 <aci_gatt_add_service+0x84>
 8003782:	2b02      	cmp	r3, #2
 8003784:	d004      	beq.n	8003790 <aci_gatt_add_service+0x8c>
 8003786:	e007      	b.n	8003798 <aci_gatt_add_service+0x94>
    {
      case 1: size = 2; break;
 8003788:	2302      	movs	r3, #2
 800378a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800378e:	e005      	b.n	800379c <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 8003790:	2310      	movs	r3, #16
 8003792:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8003796:	e001      	b.n	800379c <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 8003798:	2347      	movs	r3, #71	; 0x47
 800379a:	e05d      	b.n	8003858 <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800379c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80037a0:	1c58      	adds	r0, r3, #1
 80037a2:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 80037a6:	463b      	mov	r3, r7
 80037a8:	6819      	ldr	r1, [r3, #0]
 80037aa:	f000 fbc8 	bl	8003f3e <Osal_MemCpy>
    index_input += size;
 80037ae:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80037b2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80037b6:	4413      	add	r3, r2
 80037b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 80037bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80037c0:	1dba      	adds	r2, r7, #6
 80037c2:	7812      	ldrb	r2, [r2, #0]
 80037c4:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80037c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80037ca:	3301      	adds	r3, #1
 80037cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 80037d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80037d4:	1d7a      	adds	r2, r7, #5
 80037d6:	7812      	ldrb	r2, [r2, #0]
 80037d8:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 80037da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80037de:	3301      	adds	r3, #1
 80037e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80037e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80037e8:	2218      	movs	r2, #24
 80037ea:	2100      	movs	r1, #0
 80037ec:	4618      	mov	r0, r3
 80037ee:	f000 fbb6 	bl	8003f5e <Osal_MemSet>
  rq.ogf = 0x3f;
 80037f2:	233f      	movs	r3, #63	; 0x3f
 80037f4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 80037f8:	f44f 7381 	mov.w	r3, #258	; 0x102
 80037fc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8003800:	f107 0310 	add.w	r3, r7, #16
 8003804:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8003808:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800380c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8003810:	f107 030c 	add.w	r3, r7, #12
 8003814:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8003818:	2303      	movs	r3, #3
 800381a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800381e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003822:	2100      	movs	r1, #0
 8003824:	4618      	mov	r0, r3
 8003826:	f000 fe5b 	bl	80044e0 <hci_send_req>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	da01      	bge.n	8003834 <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 8003830:	23ff      	movs	r3, #255	; 0xff
 8003832:	e011      	b.n	8003858 <aci_gatt_add_service+0x154>
  if ( resp.Status )
 8003834:	f107 030c 	add.w	r3, r7, #12
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <aci_gatt_add_service+0x142>
    return resp.Status;
 800383e:	f107 030c 	add.w	r3, r7, #12
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	e008      	b.n	8003858 <aci_gatt_add_service+0x154>
  *Service_Handle = resp.Service_Handle;
 8003846:	f107 030c 	add.w	r3, r7, #12
 800384a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800384e:	b29a      	uxth	r2, r3
 8003850:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8003854:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800385e:	46bd      	mov	sp, r7
 8003860:	bd90      	pop	{r4, r7, pc}

08003862 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8003862:	b590      	push	{r4, r7, lr}
 8003864:	b0d1      	sub	sp, #324	; 0x144
 8003866:	af00      	add	r7, sp, #0
 8003868:	4604      	mov	r4, r0
 800386a:	4608      	mov	r0, r1
 800386c:	f107 0108 	add.w	r1, r7, #8
 8003870:	600a      	str	r2, [r1, #0]
 8003872:	4619      	mov	r1, r3
 8003874:	f107 030e 	add.w	r3, r7, #14
 8003878:	4622      	mov	r2, r4
 800387a:	801a      	strh	r2, [r3, #0]
 800387c:	f107 030d 	add.w	r3, r7, #13
 8003880:	4602      	mov	r2, r0
 8003882:	701a      	strb	r2, [r3, #0]
 8003884:	1dbb      	adds	r3, r7, #6
 8003886:	460a      	mov	r2, r1
 8003888:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800388a:	f107 0318 	add.w	r3, r7, #24
 800388e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8003892:	f107 030d 	add.w	r3, r7, #13
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d008      	beq.n	80038ae <aci_gatt_add_char+0x4c>
 800389c:	f107 030d 	add.w	r3, r7, #13
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d101      	bne.n	80038aa <aci_gatt_add_char+0x48>
 80038a6:	2313      	movs	r3, #19
 80038a8:	e002      	b.n	80038b0 <aci_gatt_add_char+0x4e>
 80038aa:	2303      	movs	r3, #3
 80038ac:	e000      	b.n	80038b0 <aci_gatt_add_char+0x4e>
 80038ae:	2305      	movs	r3, #5
 80038b0:	f107 0218 	add.w	r2, r7, #24
 80038b4:	4413      	add	r3, r2
 80038b6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80038ba:	f107 0314 	add.w	r3, r7, #20
 80038be:	2203      	movs	r2, #3
 80038c0:	2100      	movs	r1, #0
 80038c2:	4618      	mov	r0, r3
 80038c4:	f000 fb4b 	bl	8003f5e <Osal_MemSet>
  int index_input = 0;
 80038c8:	2300      	movs	r3, #0
 80038ca:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 80038ce:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80038d2:	f107 020e 	add.w	r2, r7, #14
 80038d6:	8812      	ldrh	r2, [r2, #0]
 80038d8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80038da:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80038de:	3302      	adds	r3, #2
 80038e0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 80038e4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80038e8:	f107 020d 	add.w	r2, r7, #13
 80038ec:	7812      	ldrb	r2, [r2, #0]
 80038ee:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80038f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80038f4:	3301      	adds	r3, #1
 80038f6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 80038fa:	f107 030d 	add.w	r3, r7, #13
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d002      	beq.n	800390a <aci_gatt_add_char+0xa8>
 8003904:	2b02      	cmp	r3, #2
 8003906:	d004      	beq.n	8003912 <aci_gatt_add_char+0xb0>
 8003908:	e007      	b.n	800391a <aci_gatt_add_char+0xb8>
    {
      case 1: size = 2; break;
 800390a:	2302      	movs	r3, #2
 800390c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8003910:	e005      	b.n	800391e <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 8003912:	2310      	movs	r3, #16
 8003914:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8003918:	e001      	b.n	800391e <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 800391a:	2347      	movs	r3, #71	; 0x47
 800391c:	e086      	b.n	8003a2c <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800391e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003922:	1cd8      	adds	r0, r3, #3
 8003924:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8003928:	f107 0308 	add.w	r3, r7, #8
 800392c:	6819      	ldr	r1, [r3, #0]
 800392e:	f000 fb06 	bl	8003f3e <Osal_MemCpy>
    index_input += size;
 8003932:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8003936:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800393a:	4413      	add	r3, r2
 800393c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8003940:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003944:	1dba      	adds	r2, r7, #6
 8003946:	8812      	ldrh	r2, [r2, #0]
 8003948:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800394a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800394e:	3302      	adds	r3, #2
 8003950:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8003954:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003958:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800395c:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800395e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003962:	3301      	adds	r3, #1
 8003964:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8003968:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800396c:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8003970:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8003972:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003976:	3301      	adds	r3, #1
 8003978:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800397c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003980:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8003984:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8003986:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800398a:	3301      	adds	r3, #1
 800398c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8003990:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003994:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8003998:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800399a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800399e:	3301      	adds	r3, #1
 80039a0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 80039a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80039a8:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 80039ac:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 80039ae:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80039b2:	3301      	adds	r3, #1
 80039b4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80039b8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80039bc:	2218      	movs	r2, #24
 80039be:	2100      	movs	r1, #0
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 facc 	bl	8003f5e <Osal_MemSet>
  rq.ogf = 0x3f;
 80039c6:	233f      	movs	r3, #63	; 0x3f
 80039c8:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 80039cc:	f44f 7382 	mov.w	r3, #260	; 0x104
 80039d0:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 80039d4:	f107 0318 	add.w	r3, r7, #24
 80039d8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 80039dc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80039e0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 80039e4:	f107 0314 	add.w	r3, r7, #20
 80039e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 80039ec:	2303      	movs	r3, #3
 80039ee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80039f2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80039f6:	2100      	movs	r1, #0
 80039f8:	4618      	mov	r0, r3
 80039fa:	f000 fd71 	bl	80044e0 <hci_send_req>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	da01      	bge.n	8003a08 <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 8003a04:	23ff      	movs	r3, #255	; 0xff
 8003a06:	e011      	b.n	8003a2c <aci_gatt_add_char+0x1ca>
  if ( resp.Status )
 8003a08:	f107 0314 	add.w	r3, r7, #20
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <aci_gatt_add_char+0x1b8>
    return resp.Status;
 8003a12:	f107 0314 	add.w	r3, r7, #20
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	e008      	b.n	8003a2c <aci_gatt_add_char+0x1ca>
  *Char_Handle = resp.Char_Handle;
 8003a1a:	f107 0314 	add.w	r3, r7, #20
 8003a1e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003a28:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd90      	pop	{r4, r7, pc}

08003a36 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8003a36:	b5b0      	push	{r4, r5, r7, lr}
 8003a38:	b0cc      	sub	sp, #304	; 0x130
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	4605      	mov	r5, r0
 8003a3e:	460c      	mov	r4, r1
 8003a40:	4610      	mov	r0, r2
 8003a42:	4619      	mov	r1, r3
 8003a44:	1dbb      	adds	r3, r7, #6
 8003a46:	462a      	mov	r2, r5
 8003a48:	801a      	strh	r2, [r3, #0]
 8003a4a:	1d3b      	adds	r3, r7, #4
 8003a4c:	4622      	mov	r2, r4
 8003a4e:	801a      	strh	r2, [r3, #0]
 8003a50:	1cfb      	adds	r3, r7, #3
 8003a52:	4602      	mov	r2, r0
 8003a54:	701a      	strb	r2, [r3, #0]
 8003a56:	1cbb      	adds	r3, r7, #2
 8003a58:	460a      	mov	r2, r1
 8003a5a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8003a5c:	f107 0310 	add.w	r3, r7, #16
 8003a60:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8003a64:	f107 030f 	add.w	r3, r7, #15
 8003a68:	2200      	movs	r2, #0
 8003a6a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8003a72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003a76:	1dba      	adds	r2, r7, #6
 8003a78:	8812      	ldrh	r2, [r2, #0]
 8003a7a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8003a7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003a80:	3302      	adds	r3, #2
 8003a82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8003a86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003a8a:	1d3a      	adds	r2, r7, #4
 8003a8c:	8812      	ldrh	r2, [r2, #0]
 8003a8e:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8003a90:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003a94:	3302      	adds	r3, #2
 8003a96:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8003a9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003a9e:	1cfa      	adds	r2, r7, #3
 8003aa0:	7812      	ldrb	r2, [r2, #0]
 8003aa2:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8003aa4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8003aae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ab2:	1cba      	adds	r2, r7, #2
 8003ab4:	7812      	ldrb	r2, [r2, #0]
 8003ab6:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8003ab8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003abc:	3301      	adds	r3, #1
 8003abe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8003ac2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ac6:	1d98      	adds	r0, r3, #6
 8003ac8:	1cbb      	adds	r3, r7, #2
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	461a      	mov	r2, r3
 8003ace:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003ad2:	f000 fa34 	bl	8003f3e <Osal_MemCpy>
  index_input += Char_Value_Length;
 8003ad6:	1cbb      	adds	r3, r7, #2
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8003ade:	4413      	add	r3, r2
 8003ae0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003ae4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003ae8:	2218      	movs	r2, #24
 8003aea:	2100      	movs	r1, #0
 8003aec:	4618      	mov	r0, r3
 8003aee:	f000 fa36 	bl	8003f5e <Osal_MemSet>
  rq.ogf = 0x3f;
 8003af2:	233f      	movs	r3, #63	; 0x3f
 8003af4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8003af8:	f44f 7383 	mov.w	r3, #262	; 0x106
 8003afc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8003b00:	f107 0310 	add.w	r3, r7, #16
 8003b04:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8003b08:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003b0c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8003b10:	f107 030f 	add.w	r3, r7, #15
 8003b14:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8003b1e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003b22:	2100      	movs	r1, #0
 8003b24:	4618      	mov	r0, r3
 8003b26:	f000 fcdb 	bl	80044e0 <hci_send_req>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	da01      	bge.n	8003b34 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 8003b30:	23ff      	movs	r3, #255	; 0xff
 8003b32:	e002      	b.n	8003b3a <aci_gatt_update_char_value+0x104>
  return status;
 8003b34:	f107 030f 	add.w	r3, r7, #15
 8003b38:	781b      	ldrb	r3, [r3, #0]
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bdb0      	pop	{r4, r5, r7, pc}

08003b44 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b0cc      	sub	sp, #304	; 0x130
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	463b      	mov	r3, r7
 8003b4c:	601a      	str	r2, [r3, #0]
 8003b4e:	1dfb      	adds	r3, r7, #7
 8003b50:	4602      	mov	r2, r0
 8003b52:	701a      	strb	r2, [r3, #0]
 8003b54:	1dbb      	adds	r3, r7, #6
 8003b56:	460a      	mov	r2, r1
 8003b58:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8003b5a:	f107 0310 	add.w	r3, r7, #16
 8003b5e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8003b62:	f107 030f 	add.w	r3, r7, #15
 8003b66:	2200      	movs	r2, #0
 8003b68:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8003b70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b74:	1dfa      	adds	r2, r7, #7
 8003b76:	7812      	ldrb	r2, [r2, #0]
 8003b78:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8003b7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003b7e:	3301      	adds	r3, #1
 8003b80:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8003b84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b88:	1dba      	adds	r2, r7, #6
 8003b8a:	7812      	ldrb	r2, [r2, #0]
 8003b8c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8003b8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003b92:	3301      	adds	r3, #1
 8003b94:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8003b98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b9c:	1c98      	adds	r0, r3, #2
 8003b9e:	1dbb      	adds	r3, r7, #6
 8003ba0:	781a      	ldrb	r2, [r3, #0]
 8003ba2:	463b      	mov	r3, r7
 8003ba4:	6819      	ldr	r1, [r3, #0]
 8003ba6:	f000 f9ca 	bl	8003f3e <Osal_MemCpy>
  index_input += Length;
 8003baa:	1dbb      	adds	r3, r7, #6
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003bb8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003bbc:	2218      	movs	r2, #24
 8003bbe:	2100      	movs	r1, #0
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f000 f9cc 	bl	8003f5e <Osal_MemSet>
  rq.ogf = 0x3f;
 8003bc6:	233f      	movs	r3, #63	; 0x3f
 8003bc8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8003bcc:	230c      	movs	r3, #12
 8003bce:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8003bd2:	f107 0310 	add.w	r3, r7, #16
 8003bd6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8003bda:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003bde:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8003be2:	f107 030f 	add.w	r3, r7, #15
 8003be6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8003bea:	2301      	movs	r3, #1
 8003bec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8003bf0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f000 fc72 	bl	80044e0 <hci_send_req>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	da01      	bge.n	8003c06 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 8003c02:	23ff      	movs	r3, #255	; 0xff
 8003c04:	e002      	b.n	8003c0c <aci_hal_write_config_data+0xc8>
  return status;
 8003c06:	f107 030f 	add.w	r3, r7, #15
 8003c0a:	781b      	ldrb	r3, [r3, #0]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b0cc      	sub	sp, #304	; 0x130
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	1dfb      	adds	r3, r7, #7
 8003c20:	701a      	strb	r2, [r3, #0]
 8003c22:	1dbb      	adds	r3, r7, #6
 8003c24:	460a      	mov	r2, r1
 8003c26:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8003c28:	f107 0310 	add.w	r3, r7, #16
 8003c2c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8003c30:	f107 030f 	add.w	r3, r7, #15
 8003c34:	2200      	movs	r2, #0
 8003c36:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8003c3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c42:	1dfa      	adds	r2, r7, #7
 8003c44:	7812      	ldrb	r2, [r2, #0]
 8003c46:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8003c48:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8003c52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c56:	1dba      	adds	r2, r7, #6
 8003c58:	7812      	ldrb	r2, [r2, #0]
 8003c5a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8003c5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003c60:	3301      	adds	r3, #1
 8003c62:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003c66:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003c6a:	2218      	movs	r2, #24
 8003c6c:	2100      	movs	r1, #0
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f000 f975 	bl	8003f5e <Osal_MemSet>
  rq.ogf = 0x3f;
 8003c74:	233f      	movs	r3, #63	; 0x3f
 8003c76:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8003c7a:	230f      	movs	r3, #15
 8003c7c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8003c80:	f107 0310 	add.w	r3, r7, #16
 8003c84:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8003c88:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003c8c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8003c90:	f107 030f 	add.w	r3, r7, #15
 8003c94:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8003c9e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f000 fc1b 	bl	80044e0 <hci_send_req>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	da01      	bge.n	8003cb4 <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 8003cb0:	23ff      	movs	r3, #255	; 0xff
 8003cb2:	e002      	b.n	8003cba <aci_hal_set_tx_power_level+0xa4>
  return status;
 8003cb4:	f107 030f 	add.w	r3, r7, #15
 8003cb8:	781b      	ldrb	r3, [r3, #0]
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b0cc      	sub	sp, #304	; 0x130
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	4602      	mov	r2, r0
 8003ccc:	1dbb      	adds	r3, r7, #6
 8003cce:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8003cd0:	f107 0310 	add.w	r3, r7, #16
 8003cd4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8003cd8:	f107 030f 	add.w	r3, r7, #15
 8003cdc:	2200      	movs	r2, #0
 8003cde:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8003ce6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003cea:	1dba      	adds	r2, r7, #6
 8003cec:	8812      	ldrh	r2, [r2, #0]
 8003cee:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8003cf0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003cf4:	3302      	adds	r3, #2
 8003cf6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003cfa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003cfe:	2218      	movs	r2, #24
 8003d00:	2100      	movs	r1, #0
 8003d02:	4618      	mov	r0, r3
 8003d04:	f000 f92b 	bl	8003f5e <Osal_MemSet>
  rq.ogf = 0x3f;
 8003d08:	233f      	movs	r3, #63	; 0x3f
 8003d0a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8003d0e:	2318      	movs	r3, #24
 8003d10:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8003d14:	f107 0310 	add.w	r3, r7, #16
 8003d18:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8003d1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003d20:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8003d24:	f107 030f 	add.w	r3, r7, #15
 8003d28:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8003d32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003d36:	2100      	movs	r1, #0
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f000 fbd1 	bl	80044e0 <hci_send_req>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	da01      	bge.n	8003d48 <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 8003d44:	23ff      	movs	r3, #255	; 0xff
 8003d46:	e002      	b.n	8003d4e <aci_hal_set_radio_activity_mask+0x8a>
  return status;
 8003d48:	f107 030f 	add.w	r3, r7, #15
 8003d4c:	781b      	ldrb	r3, [r3, #0]
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b088      	sub	sp, #32
 8003d5c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003d62:	f107 0308 	add.w	r3, r7, #8
 8003d66:	2218      	movs	r2, #24
 8003d68:	2100      	movs	r1, #0
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f000 f8f7 	bl	8003f5e <Osal_MemSet>
  rq.ogf = 0x03;
 8003d70:	2303      	movs	r3, #3
 8003d72:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8003d74:	2303      	movs	r3, #3
 8003d76:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8003d78:	1dfb      	adds	r3, r7, #7
 8003d7a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8003d80:	f107 0308 	add.w	r3, r7, #8
 8003d84:	2100      	movs	r1, #0
 8003d86:	4618      	mov	r0, r3
 8003d88:	f000 fbaa 	bl	80044e0 <hci_send_req>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	da01      	bge.n	8003d96 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8003d92:	23ff      	movs	r3, #255	; 0xff
 8003d94:	e000      	b.n	8003d98 <hci_reset+0x40>
  return status;
 8003d96:	79fb      	ldrb	r3, [r7, #7]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3720      	adds	r7, #32
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b0ce      	sub	sp, #312	; 0x138
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	f107 0308 	add.w	r3, r7, #8
 8003daa:	6019      	str	r1, [r3, #0]
 8003dac:	1d3b      	adds	r3, r7, #4
 8003dae:	601a      	str	r2, [r3, #0]
 8003db0:	f107 030e 	add.w	r3, r7, #14
 8003db4:	4602      	mov	r2, r0
 8003db6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 8003db8:	f107 0318 	add.w	r3, r7, #24
 8003dbc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8003dc0:	f107 0310 	add.w	r3, r7, #16
 8003dc4:	2205      	movs	r2, #5
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 f8c8 	bl	8003f5e <Osal_MemSet>
  int index_input = 0;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 8003dd4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003dd8:	f107 020e 	add.w	r2, r7, #14
 8003ddc:	8812      	ldrh	r2, [r2, #0]
 8003dde:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8003de0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003de4:	3302      	adds	r3, #2
 8003de6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003dea:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003dee:	2218      	movs	r2, #24
 8003df0:	2100      	movs	r1, #0
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 f8b3 	bl	8003f5e <Osal_MemSet>
  rq.ogf = 0x08;
 8003df8:	2308      	movs	r3, #8
 8003dfa:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 8003dfe:	2330      	movs	r3, #48	; 0x30
 8003e00:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8003e04:	f107 0318 	add.w	r3, r7, #24
 8003e08:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8003e0c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003e10:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8003e14:	f107 0310 	add.w	r3, r7, #16
 8003e18:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8003e1c:	2305      	movs	r3, #5
 8003e1e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8003e22:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003e26:	2100      	movs	r1, #0
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f000 fb59 	bl	80044e0 <hci_send_req>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	da01      	bge.n	8003e38 <hci_le_read_phy+0x98>
    return BLE_STATUS_TIMEOUT;
 8003e34:	23ff      	movs	r3, #255	; 0xff
 8003e36:	e016      	b.n	8003e66 <hci_le_read_phy+0xc6>
  if ( resp.Status )
 8003e38:	f107 0310 	add.w	r3, r7, #16
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d003      	beq.n	8003e4a <hci_le_read_phy+0xaa>
    return resp.Status;
 8003e42:	f107 0310 	add.w	r3, r7, #16
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	e00d      	b.n	8003e66 <hci_le_read_phy+0xc6>
  *TX_PHY = resp.TX_PHY;
 8003e4a:	f107 0310 	add.w	r3, r7, #16
 8003e4e:	78da      	ldrb	r2, [r3, #3]
 8003e50:	f107 0308 	add.w	r3, r7, #8
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 8003e58:	f107 0310 	add.w	r3, r7, #16
 8003e5c:	791a      	ldrb	r2, [r3, #4]
 8003e5e:	1d3b      	adds	r3, r7, #4
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8003e70:	b590      	push	{r4, r7, lr}
 8003e72:	b0cd      	sub	sp, #308	; 0x134
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	4604      	mov	r4, r0
 8003e78:	4608      	mov	r0, r1
 8003e7a:	4611      	mov	r1, r2
 8003e7c:	1dfb      	adds	r3, r7, #7
 8003e7e:	4622      	mov	r2, r4
 8003e80:	701a      	strb	r2, [r3, #0]
 8003e82:	1dbb      	adds	r3, r7, #6
 8003e84:	4602      	mov	r2, r0
 8003e86:	701a      	strb	r2, [r3, #0]
 8003e88:	1d7b      	adds	r3, r7, #5
 8003e8a:	460a      	mov	r2, r1
 8003e8c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8003e8e:	f107 0310 	add.w	r3, r7, #16
 8003e92:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8003e96:	f107 030f 	add.w	r3, r7, #15
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8003ea4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ea8:	1dfa      	adds	r2, r7, #7
 8003eaa:	7812      	ldrb	r2, [r2, #0]
 8003eac:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8003eae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8003eb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ebc:	1dba      	adds	r2, r7, #6
 8003ebe:	7812      	ldrb	r2, [r2, #0]
 8003ec0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8003ec2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8003ecc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ed0:	1d7a      	adds	r2, r7, #5
 8003ed2:	7812      	ldrb	r2, [r2, #0]
 8003ed4:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8003ed6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003eda:	3301      	adds	r3, #1
 8003edc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8003ee0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003ee4:	2218      	movs	r2, #24
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f000 f838 	bl	8003f5e <Osal_MemSet>
  rq.ogf = 0x08;
 8003eee:	2308      	movs	r3, #8
 8003ef0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8003ef4:	2331      	movs	r3, #49	; 0x31
 8003ef6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8003efa:	f107 0310 	add.w	r3, r7, #16
 8003efe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8003f02:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003f06:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8003f0a:	f107 030f 	add.w	r3, r7, #15
 8003f0e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8003f12:	2301      	movs	r3, #1
 8003f14:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8003f18:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 fade 	bl	80044e0 <hci_send_req>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	da01      	bge.n	8003f2e <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 8003f2a:	23ff      	movs	r3, #255	; 0xff
 8003f2c:	e002      	b.n	8003f34 <hci_le_set_default_phy+0xc4>
  return status;
 8003f2e:	f107 030f 	add.w	r3, r7, #15
 8003f32:	781b      	ldrb	r3, [r3, #0]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd90      	pop	{r4, r7, pc}

08003f3e <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b084      	sub	sp, #16
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	60f8      	str	r0, [r7, #12]
 8003f46:	60b9      	str	r1, [r7, #8]
 8003f48:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	68b9      	ldr	r1, [r7, #8]
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f001 ff14 	bl	8005d7c <memcpy>
 8003f54:	4603      	mov	r3, r0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3710      	adds	r7, #16
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b084      	sub	sp, #16
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	60f8      	str	r0, [r7, #12]
 8003f66:	60b9      	str	r1, [r7, #8]
 8003f68:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	68b9      	ldr	r1, [r7, #8]
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f001 ff12 	bl	8005d98 <memset>
 8003f74:	4603      	mov	r3, r0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
	...

08003f80 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b08a      	sub	sp, #40	; 0x28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	3301      	adds	r3, #1
 8003f92:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 8003f94:	6a3b      	ldr	r3, [r7, #32]
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	2bff      	cmp	r3, #255	; 0xff
 8003f9a:	d14c      	bne.n	8004036 <PeerToPeer_Event_Handler+0xb6>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8003f9c:	6a3b      	ldr	r3, [r7, #32]
 8003f9e:	3302      	adds	r3, #2
 8003fa0:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	881b      	ldrh	r3, [r3, #0]
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	461a      	mov	r2, r3
 8003faa:	f640 4301 	movw	r3, #3073	; 0xc01
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d13d      	bne.n	800402e <PeerToPeer_Event_Handler+0xae>
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
       {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	3302      	adds	r3, #2
 8003fb6:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	885b      	ldrh	r3, [r3, #2]
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	4b20      	ldr	r3, [pc, #128]	; (8004044 <PeerToPeer_Event_Handler+0xc4>)
 8003fc2:	889b      	ldrh	r3, [r3, #4]
 8003fc4:	3302      	adds	r3, #2
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d118      	bne.n	8003ffc <PeerToPeer_Event_Handler+0x7c>
            {
              /**
               * Descriptor handle
               */
              return_value = SVCCTL_EvtAckFlowEnable;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              /**
               * Notify to application
               */
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	7a1b      	ldrb	r3, [r3, #8]
 8003fd4:	f003 0301 	and.w	r3, r3, #1
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d007      	beq.n	8003fec <PeerToPeer_Event_Handler+0x6c>
              {
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8003fe0:	f107 0308 	add.w	r3, r7, #8
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f001 fab9 	bl	800555c <P2PS_STM_App_Notification>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
              P2PS_STM_App_Notification(&Notification);
            }
#endif
        }
        break;
 8003fea:	e022      	b.n	8004032 <PeerToPeer_Event_Handler+0xb2>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 8003fec:	2301      	movs	r3, #1
 8003fee:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8003ff0:	f107 0308 	add.w	r3, r7, #8
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f001 fab1 	bl	800555c <P2PS_STM_App_Notification>
        break;
 8003ffa:	e01a      	b.n	8004032 <PeerToPeer_Event_Handler+0xb2>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	885b      	ldrh	r3, [r3, #2]
 8004000:	b29b      	uxth	r3, r3
 8004002:	461a      	mov	r2, r3
 8004004:	4b0f      	ldr	r3, [pc, #60]	; (8004044 <PeerToPeer_Event_Handler+0xc4>)
 8004006:	885b      	ldrh	r3, [r3, #2]
 8004008:	3301      	adds	r3, #1
 800400a:	429a      	cmp	r2, r3
 800400c:	d111      	bne.n	8004032 <PeerToPeer_Event_Handler+0xb2>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 800400e:	2303      	movs	r3, #3
 8004010:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	88db      	ldrh	r3, [r3, #6]
 8004016:	b29b      	uxth	r3, r3
 8004018:	b2db      	uxtb	r3, r3
 800401a:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	3308      	adds	r3, #8
 8004020:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 8004022:	f107 0308 	add.w	r3, r7, #8
 8004026:	4618      	mov	r0, r3
 8004028:	f001 fa98 	bl	800555c <P2PS_STM_App_Notification>
        break;
 800402c:	e001      	b.n	8004032 <PeerToPeer_Event_Handler+0xb2>

        default:
          break;
 800402e:	bf00      	nop
 8004030:	e002      	b.n	8004038 <PeerToPeer_Event_Handler+0xb8>
        break;
 8004032:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8004034:	e000      	b.n	8004038 <PeerToPeer_Event_Handler+0xb8>

    default:
      break;
 8004036:	bf00      	nop
  }

  return(return_value);
 8004038:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 800403c:	4618      	mov	r0, r3
 800403e:	3728      	adds	r7, #40	; 0x28
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	200000c0 	.word	0x200000c0

08004048 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b08a      	sub	sp, #40	; 0x28
 800404c:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 800404e:	484a      	ldr	r0, [pc, #296]	; (8004178 <P2PS_STM_Init+0x130>)
 8004050:	f000 f940 	bl	80042d4 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 8004054:	238f      	movs	r3, #143	; 0x8f
 8004056:	703b      	strb	r3, [r7, #0]
 8004058:	23e5      	movs	r3, #229	; 0xe5
 800405a:	707b      	strb	r3, [r7, #1]
 800405c:	23b3      	movs	r3, #179	; 0xb3
 800405e:	70bb      	strb	r3, [r7, #2]
 8004060:	23d5      	movs	r3, #213	; 0xd5
 8004062:	70fb      	strb	r3, [r7, #3]
 8004064:	232e      	movs	r3, #46	; 0x2e
 8004066:	713b      	strb	r3, [r7, #4]
 8004068:	237f      	movs	r3, #127	; 0x7f
 800406a:	717b      	strb	r3, [r7, #5]
 800406c:	234a      	movs	r3, #74	; 0x4a
 800406e:	71bb      	strb	r3, [r7, #6]
 8004070:	2398      	movs	r3, #152	; 0x98
 8004072:	71fb      	strb	r3, [r7, #7]
 8004074:	232a      	movs	r3, #42	; 0x2a
 8004076:	723b      	strb	r3, [r7, #8]
 8004078:	2348      	movs	r3, #72	; 0x48
 800407a:	727b      	strb	r3, [r7, #9]
 800407c:	237a      	movs	r3, #122	; 0x7a
 800407e:	72bb      	strb	r3, [r7, #10]
 8004080:	23cc      	movs	r3, #204	; 0xcc
 8004082:	72fb      	strb	r3, [r7, #11]
 8004084:	2340      	movs	r3, #64	; 0x40
 8004086:	733b      	strb	r3, [r7, #12]
 8004088:	23fe      	movs	r3, #254	; 0xfe
 800408a:	737b      	strb	r3, [r7, #13]
 800408c:	2300      	movs	r3, #0
 800408e:	73bb      	strb	r3, [r7, #14]
 8004090:	2300      	movs	r3, #0
 8004092:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 8004094:	4639      	mov	r1, r7
 8004096:	4b39      	ldr	r3, [pc, #228]	; (800417c <P2PS_STM_Init+0x134>)
 8004098:	9300      	str	r3, [sp, #0]
 800409a:	2308      	movs	r3, #8
 800409c:	2201      	movs	r2, #1
 800409e:	2002      	movs	r0, #2
 80040a0:	f7ff fb30 	bl	8003704 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 80040a4:	2319      	movs	r3, #25
 80040a6:	703b      	strb	r3, [r7, #0]
 80040a8:	23ed      	movs	r3, #237	; 0xed
 80040aa:	707b      	strb	r3, [r7, #1]
 80040ac:	2382      	movs	r3, #130	; 0x82
 80040ae:	70bb      	strb	r3, [r7, #2]
 80040b0:	23ae      	movs	r3, #174	; 0xae
 80040b2:	70fb      	strb	r3, [r7, #3]
 80040b4:	23ed      	movs	r3, #237	; 0xed
 80040b6:	713b      	strb	r3, [r7, #4]
 80040b8:	2321      	movs	r3, #33	; 0x21
 80040ba:	717b      	strb	r3, [r7, #5]
 80040bc:	234c      	movs	r3, #76	; 0x4c
 80040be:	71bb      	strb	r3, [r7, #6]
 80040c0:	239d      	movs	r3, #157	; 0x9d
 80040c2:	71fb      	strb	r3, [r7, #7]
 80040c4:	2341      	movs	r3, #65	; 0x41
 80040c6:	723b      	strb	r3, [r7, #8]
 80040c8:	2345      	movs	r3, #69	; 0x45
 80040ca:	727b      	strb	r3, [r7, #9]
 80040cc:	2322      	movs	r3, #34	; 0x22
 80040ce:	72bb      	strb	r3, [r7, #10]
 80040d0:	238e      	movs	r3, #142	; 0x8e
 80040d2:	72fb      	strb	r3, [r7, #11]
 80040d4:	2341      	movs	r3, #65	; 0x41
 80040d6:	733b      	strb	r3, [r7, #12]
 80040d8:	23fe      	movs	r3, #254	; 0xfe
 80040da:	737b      	strb	r3, [r7, #13]
 80040dc:	2300      	movs	r3, #0
 80040de:	73bb      	strb	r3, [r7, #14]
 80040e0:	2300      	movs	r3, #0
 80040e2:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 80040e4:	4b25      	ldr	r3, [pc, #148]	; (800417c <P2PS_STM_Init+0x134>)
 80040e6:	8818      	ldrh	r0, [r3, #0]
 80040e8:	463a      	mov	r2, r7
 80040ea:	4b25      	ldr	r3, [pc, #148]	; (8004180 <P2PS_STM_Init+0x138>)
 80040ec:	9305      	str	r3, [sp, #20]
 80040ee:	2301      	movs	r3, #1
 80040f0:	9304      	str	r3, [sp, #16]
 80040f2:	230a      	movs	r3, #10
 80040f4:	9303      	str	r3, [sp, #12]
 80040f6:	2301      	movs	r3, #1
 80040f8:	9302      	str	r3, [sp, #8]
 80040fa:	2300      	movs	r3, #0
 80040fc:	9301      	str	r3, [sp, #4]
 80040fe:	2306      	movs	r3, #6
 8004100:	9300      	str	r3, [sp, #0]
 8004102:	2302      	movs	r3, #2
 8004104:	2102      	movs	r1, #2
 8004106:	f7ff fbac 	bl	8003862 <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 800410a:	2319      	movs	r3, #25
 800410c:	703b      	strb	r3, [r7, #0]
 800410e:	23ed      	movs	r3, #237	; 0xed
 8004110:	707b      	strb	r3, [r7, #1]
 8004112:	2382      	movs	r3, #130	; 0x82
 8004114:	70bb      	strb	r3, [r7, #2]
 8004116:	23ae      	movs	r3, #174	; 0xae
 8004118:	70fb      	strb	r3, [r7, #3]
 800411a:	23ed      	movs	r3, #237	; 0xed
 800411c:	713b      	strb	r3, [r7, #4]
 800411e:	2321      	movs	r3, #33	; 0x21
 8004120:	717b      	strb	r3, [r7, #5]
 8004122:	234c      	movs	r3, #76	; 0x4c
 8004124:	71bb      	strb	r3, [r7, #6]
 8004126:	239d      	movs	r3, #157	; 0x9d
 8004128:	71fb      	strb	r3, [r7, #7]
 800412a:	2341      	movs	r3, #65	; 0x41
 800412c:	723b      	strb	r3, [r7, #8]
 800412e:	2345      	movs	r3, #69	; 0x45
 8004130:	727b      	strb	r3, [r7, #9]
 8004132:	2322      	movs	r3, #34	; 0x22
 8004134:	72bb      	strb	r3, [r7, #10]
 8004136:	238e      	movs	r3, #142	; 0x8e
 8004138:	72fb      	strb	r3, [r7, #11]
 800413a:	2342      	movs	r3, #66	; 0x42
 800413c:	733b      	strb	r3, [r7, #12]
 800413e:	23fe      	movs	r3, #254	; 0xfe
 8004140:	737b      	strb	r3, [r7, #13]
 8004142:	2300      	movs	r3, #0
 8004144:	73bb      	strb	r3, [r7, #14]
 8004146:	2300      	movs	r3, #0
 8004148:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800414a:	4b0c      	ldr	r3, [pc, #48]	; (800417c <P2PS_STM_Init+0x134>)
 800414c:	8818      	ldrh	r0, [r3, #0]
 800414e:	463a      	mov	r2, r7
 8004150:	4b0c      	ldr	r3, [pc, #48]	; (8004184 <P2PS_STM_Init+0x13c>)
 8004152:	9305      	str	r3, [sp, #20]
 8004154:	2301      	movs	r3, #1
 8004156:	9304      	str	r3, [sp, #16]
 8004158:	230a      	movs	r3, #10
 800415a:	9303      	str	r3, [sp, #12]
 800415c:	2301      	movs	r3, #1
 800415e:	9302      	str	r3, [sp, #8]
 8004160:	2300      	movs	r3, #0
 8004162:	9301      	str	r3, [sp, #4]
 8004164:	2310      	movs	r3, #16
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	2302      	movs	r3, #2
 800416a:	2102      	movs	r1, #2
 800416c:	f7ff fb79 	bl	8003862 <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 8004170:	bf00      	nop
}
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	08003f81 	.word	0x08003f81
 800417c:	200000c0 	.word	0x200000c0
 8004180:	200000c2 	.word	0x200000c2
 8004184:	200000c4 	.word	0x200000c4

08004188 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BAS_Init( void )
{
 8004188:	b480      	push	{r7}
 800418a:	af00      	add	r7, sp, #0
  return;
 800418c:	bf00      	nop
}
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr

08004196 <BLS_Init>:

__weak void BLS_Init( void )
{
 8004196:	b480      	push	{r7}
 8004198:	af00      	add	r7, sp, #0
  return;
 800419a:	bf00      	nop
}
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 80041a4:	b480      	push	{r7}
 80041a6:	af00      	add	r7, sp, #0
  return;
 80041a8:	bf00      	nop
}
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr

080041b2 <DIS_Init>:
__weak void DIS_Init( void )
{
 80041b2:	b480      	push	{r7}
 80041b4:	af00      	add	r7, sp, #0
  return;
 80041b6:	bf00      	nop
}
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 80041c0:	b480      	push	{r7}
 80041c2:	af00      	add	r7, sp, #0
  return;
 80041c4:	bf00      	nop
}
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr

080041ce <HIDS_Init>:
__weak void HIDS_Init( void )
{
 80041ce:	b480      	push	{r7}
 80041d0:	af00      	add	r7, sp, #0
  return;
 80041d2:	bf00      	nop
}
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <HRS_Init>:
__weak void HRS_Init( void )
{
 80041dc:	b480      	push	{r7}
 80041de:	af00      	add	r7, sp, #0
  return;
 80041e0:	bf00      	nop
}
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <HTS_Init>:
__weak void HTS_Init( void )
{
 80041ea:	b480      	push	{r7}
 80041ec:	af00      	add	r7, sp, #0
  return;
 80041ee:	bf00      	nop
}
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <IAS_Init>:
__weak void IAS_Init( void )
{
 80041f8:	b480      	push	{r7}
 80041fa:	af00      	add	r7, sp, #0
  return;
 80041fc:	bf00      	nop
}
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <LLS_Init>:
__weak void LLS_Init( void )
{
 8004206:	b480      	push	{r7}
 8004208:	af00      	add	r7, sp, #0
  return;
 800420a:	bf00      	nop
}
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <TPS_Init>:
__weak void TPS_Init( void )
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0
  return;
 8004218:	bf00      	nop
}
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 8004222:	b480      	push	{r7}
 8004224:	af00      	add	r7, sp, #0
  return;
 8004226:	bf00      	nop
}
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 8004230:	b480      	push	{r7}
 8004232:	af00      	add	r7, sp, #0
  return;
 8004234:	bf00      	nop
}
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr

0800423e <MESH_Init>:
__weak void MESH_Init( void )
{
 800423e:	b480      	push	{r7}
 8004240:	af00      	add	r7, sp, #0
  return;
 8004242:	bf00      	nop
}
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 800424c:	b480      	push	{r7}
 800424e:	af00      	add	r7, sp, #0
  return;
 8004250:	bf00      	nop
}
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr

0800425a <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
 800425a:	b480      	push	{r7}
 800425c:	af00      	add	r7, sp, #0
  return;
 800425e:	bf00      	nop
}
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8004268:	b580      	push	{r7, lr}
 800426a:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800426c:	4b04      	ldr	r3, [pc, #16]	; (8004280 <SVCCTL_Init+0x18>)
 800426e:	2200      	movs	r2, #0
 8004270:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8004272:	4b04      	ldr	r3, [pc, #16]	; (8004284 <SVCCTL_Init+0x1c>)
 8004274:	2200      	movs	r2, #0
 8004276:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8004278:	f000 f806 	bl	8004288 <SVCCTL_SvcInit>

  return;
 800427c:	bf00      	nop
}
 800427e:	bd80      	pop	{r7, pc}
 8004280:	200000c8 	.word	0x200000c8
 8004284:	200000e8 	.word	0x200000e8

08004288 <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0
  BAS_Init();
 800428c:	f7ff ff7c 	bl	8004188 <BAS_Init>

  BLS_Init();
 8004290:	f7ff ff81 	bl	8004196 <BLS_Init>

  CRS_STM_Init();
 8004294:	f7ff ff86 	bl	80041a4 <CRS_STM_Init>

  DIS_Init();
 8004298:	f7ff ff8b 	bl	80041b2 <DIS_Init>

  EDS_STM_Init();
 800429c:	f7ff ff90 	bl	80041c0 <EDS_STM_Init>

  HIDS_Init();
 80042a0:	f7ff ff95 	bl	80041ce <HIDS_Init>

  HRS_Init();
 80042a4:	f7ff ff9a 	bl	80041dc <HRS_Init>

  HTS_Init();
 80042a8:	f7ff ff9f 	bl	80041ea <HTS_Init>

  IAS_Init();
 80042ac:	f7ff ffa4 	bl	80041f8 <IAS_Init>

  LLS_Init();
 80042b0:	f7ff ffa9 	bl	8004206 <LLS_Init>

  TPS_Init();
 80042b4:	f7ff ffae 	bl	8004214 <TPS_Init>

  MOTENV_STM_Init();
 80042b8:	f7ff ffb3 	bl	8004222 <MOTENV_STM_Init>

  P2PS_STM_Init();
 80042bc:	f7ff fec4 	bl	8004048 <P2PS_STM_Init>

  OTAS_STM_Init();
 80042c0:	f7ff ffb6 	bl	8004230 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 80042c4:	f7ff ffc2 	bl	800424c <BVOPUS_STM_Init>

  MESH_Init();
 80042c8:	f7ff ffb9 	bl	800423e <MESH_Init>

  SVCCTL_InitCustomSvc();
 80042cc:	f7ff ffc5 	bl	800425a <SVCCTL_InitCustomSvc>
  
  return;
 80042d0:	bf00      	nop
}
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 80042dc:	4b09      	ldr	r3, [pc, #36]	; (8004304 <SVCCTL_RegisterSvcHandler+0x30>)
 80042de:	7f1b      	ldrb	r3, [r3, #28]
 80042e0:	4619      	mov	r1, r3
 80042e2:	4a08      	ldr	r2, [pc, #32]	; (8004304 <SVCCTL_RegisterSvcHandler+0x30>)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 80042ea:	4b06      	ldr	r3, [pc, #24]	; (8004304 <SVCCTL_RegisterSvcHandler+0x30>)
 80042ec:	7f1b      	ldrb	r3, [r3, #28]
 80042ee:	3301      	adds	r3, #1
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	4b04      	ldr	r3, [pc, #16]	; (8004304 <SVCCTL_RegisterSvcHandler+0x30>)
 80042f4:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 80042f6:	bf00      	nop
}
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	200000c8 	.word	0x200000c8

08004308 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b086      	sub	sp, #24
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	3301      	adds	r3, #1
 8004314:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8004316:	2300      	movs	r3, #0
 8004318:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	2bff      	cmp	r3, #255	; 0xff
 8004320:	d125      	bne.n	800436e <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	3302      	adds	r3, #2
 8004326:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	881b      	ldrh	r3, [r3, #0]
 800432c:	b29b      	uxth	r3, r3
 800432e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004332:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004336:	d118      	bne.n	800436a <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8004338:	2300      	movs	r3, #0
 800433a:	757b      	strb	r3, [r7, #21]
 800433c:	e00d      	b.n	800435a <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800433e:	7d7b      	ldrb	r3, [r7, #21]
 8004340:	4a1a      	ldr	r2, [pc, #104]	; (80043ac <SVCCTL_UserEvtRx+0xa4>)
 8004342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	4798      	blx	r3
 800434a:	4603      	mov	r3, r0
 800434c:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800434e:	7dfb      	ldrb	r3, [r7, #23]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d108      	bne.n	8004366 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8004354:	7d7b      	ldrb	r3, [r7, #21]
 8004356:	3301      	adds	r3, #1
 8004358:	757b      	strb	r3, [r7, #21]
 800435a:	4b14      	ldr	r3, [pc, #80]	; (80043ac <SVCCTL_UserEvtRx+0xa4>)
 800435c:	7f1b      	ldrb	r3, [r3, #28]
 800435e:	7d7a      	ldrb	r2, [r7, #21]
 8004360:	429a      	cmp	r2, r3
 8004362:	d3ec      	bcc.n	800433e <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8004364:	e002      	b.n	800436c <SVCCTL_UserEvtRx+0x64>
              break;
 8004366:	bf00      	nop
          break;
 8004368:	e000      	b.n	800436c <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800436a:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800436c:	e000      	b.n	8004370 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800436e:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8004370:	7dfb      	ldrb	r3, [r7, #23]
 8004372:	2b02      	cmp	r3, #2
 8004374:	d00f      	beq.n	8004396 <SVCCTL_UserEvtRx+0x8e>
 8004376:	2b02      	cmp	r3, #2
 8004378:	dc10      	bgt.n	800439c <SVCCTL_UserEvtRx+0x94>
 800437a:	2b00      	cmp	r3, #0
 800437c:	d002      	beq.n	8004384 <SVCCTL_UserEvtRx+0x7c>
 800437e:	2b01      	cmp	r3, #1
 8004380:	d006      	beq.n	8004390 <SVCCTL_UserEvtRx+0x88>
 8004382:	e00b      	b.n	800439c <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 fe33 	bl	8004ff0 <SVCCTL_App_Notification>
 800438a:	4603      	mov	r3, r0
 800438c:	75bb      	strb	r3, [r7, #22]
      break;
 800438e:	e008      	b.n	80043a2 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8004390:	2301      	movs	r3, #1
 8004392:	75bb      	strb	r3, [r7, #22]
      break;
 8004394:	e005      	b.n	80043a2 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8004396:	2300      	movs	r3, #0
 8004398:	75bb      	strb	r3, [r7, #22]
      break;
 800439a:	e002      	b.n	80043a2 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800439c:	2301      	movs	r3, #1
 800439e:	75bb      	strb	r3, [r7, #22]
      break;
 80043a0:	bf00      	nop
  }

  return (return_status);
 80043a2:	7dbb      	ldrb	r3, [r7, #22]
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3718      	adds	r7, #24
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	200000c8 	.word	0x200000c8

080043b0 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b088      	sub	sp, #32
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80043b8:	f107 030c 	add.w	r3, r7, #12
 80043bc:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	2124      	movs	r1, #36	; 0x24
 80043c8:	f64f 4066 	movw	r0, #64614	; 0xfc66
 80043cc:	f000 fa1e 	bl	800480c <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	330b      	adds	r3, #11
 80043d4:	78db      	ldrb	r3, [r3, #3]
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3720      	adds	r7, #32
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	b088      	sub	sp, #32
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80043e6:	f107 030c 	add.w	r3, r7, #12
 80043ea:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	210f      	movs	r1, #15
 80043f6:	f64f 4068 	movw	r0, #64616	; 0xfc68
 80043fa:	f000 fa07 	bl	800480c <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	330b      	adds	r3, #11
 8004402:	78db      	ldrb	r3, [r3, #3]
}
 8004404:	4618      	mov	r0, r3
 8004406:	3720      	adds	r7, #32
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	4a08      	ldr	r2, [pc, #32]	; (800443c <hci_init+0x30>)
 800441c:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800441e:	4a08      	ldr	r2, [pc, #32]	; (8004440 <hci_init+0x34>)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8004424:	4806      	ldr	r0, [pc, #24]	; (8004440 <hci_init+0x34>)
 8004426:	f000 f973 	bl	8004710 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4618      	mov	r0, r3
 8004430:	f000 f8d4 	bl	80045dc <TlInit>

  return;
 8004434:	bf00      	nop
}
 8004436:	3708      	adds	r7, #8
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	200001ec 	.word	0x200001ec
 8004440:	200001c4 	.word	0x200001c4

08004444 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800444a:	4822      	ldr	r0, [pc, #136]	; (80044d4 <hci_user_evt_proc+0x90>)
 800444c:	f000 fc92 	bl	8004d74 <LST_is_empty>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d12b      	bne.n	80044ae <hci_user_evt_proc+0x6a>
 8004456:	4b20      	ldr	r3, [pc, #128]	; (80044d8 <hci_user_evt_proc+0x94>)
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d027      	beq.n	80044ae <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800445e:	f107 030c 	add.w	r3, r7, #12
 8004462:	4619      	mov	r1, r3
 8004464:	481b      	ldr	r0, [pc, #108]	; (80044d4 <hci_user_evt_proc+0x90>)
 8004466:	f000 fd14 	bl	8004e92 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800446a:	4b1c      	ldr	r3, [pc, #112]	; (80044dc <hci_user_evt_proc+0x98>)
 800446c:	69db      	ldr	r3, [r3, #28]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00c      	beq.n	800448c <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8004476:	2301      	movs	r3, #1
 8004478:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800447a:	4b18      	ldr	r3, [pc, #96]	; (80044dc <hci_user_evt_proc+0x98>)
 800447c:	69db      	ldr	r3, [r3, #28]
 800447e:	1d3a      	adds	r2, r7, #4
 8004480:	4610      	mov	r0, r2
 8004482:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8004484:	793a      	ldrb	r2, [r7, #4]
 8004486:	4b14      	ldr	r3, [pc, #80]	; (80044d8 <hci_user_evt_proc+0x94>)
 8004488:	701a      	strb	r2, [r3, #0]
 800448a:	e002      	b.n	8004492 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800448c:	4b12      	ldr	r3, [pc, #72]	; (80044d8 <hci_user_evt_proc+0x94>)
 800448e:	2201      	movs	r2, #1
 8004490:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8004492:	4b11      	ldr	r3, [pc, #68]	; (80044d8 <hci_user_evt_proc+0x94>)
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d004      	beq.n	80044a4 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	4618      	mov	r0, r3
 800449e:	f000 fb91 	bl	8004bc4 <TL_MM_EvtDone>
 80044a2:	e004      	b.n	80044ae <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	4619      	mov	r1, r3
 80044a8:	480a      	ldr	r0, [pc, #40]	; (80044d4 <hci_user_evt_proc+0x90>)
 80044aa:	f000 fc85 	bl	8004db8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80044ae:	4809      	ldr	r0, [pc, #36]	; (80044d4 <hci_user_evt_proc+0x90>)
 80044b0:	f000 fc60 	bl	8004d74 <LST_is_empty>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d107      	bne.n	80044ca <hci_user_evt_proc+0x86>
 80044ba:	4b07      	ldr	r3, [pc, #28]	; (80044d8 <hci_user_evt_proc+0x94>)
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d003      	beq.n	80044ca <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 80044c2:	4804      	ldr	r0, [pc, #16]	; (80044d4 <hci_user_evt_proc+0x90>)
 80044c4:	f000 fff1 	bl	80054aa <hci_notify_asynch_evt>
  }


  return;
 80044c8:	bf00      	nop
 80044ca:	bf00      	nop
}
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	200000f0 	.word	0x200000f0
 80044d8:	200000fc 	.word	0x200000fc
 80044dc:	200001c4 	.word	0x200001c4

080044e0 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b088      	sub	sp, #32
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	460b      	mov	r3, r1
 80044ea:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 80044ec:	2000      	movs	r0, #0
 80044ee:	f000 f8cb 	bl	8004688 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 80044f2:	2300      	movs	r3, #0
 80044f4:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	885b      	ldrh	r3, [r3, #2]
 80044fa:	b21b      	sxth	r3, r3
 80044fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004500:	b21a      	sxth	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	881b      	ldrh	r3, [r3, #0]
 8004506:	029b      	lsls	r3, r3, #10
 8004508:	b21b      	sxth	r3, r3
 800450a:	4313      	orrs	r3, r2
 800450c:	b21b      	sxth	r3, r3
 800450e:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	b2d9      	uxtb	r1, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	689a      	ldr	r2, [r3, #8]
 800451a:	8bbb      	ldrh	r3, [r7, #28]
 800451c:	4618      	mov	r0, r3
 800451e:	f000 f88d 	bl	800463c <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8004522:	e04e      	b.n	80045c2 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8004524:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8004528:	f000 ffd6 	bl	80054d8 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800452c:	e043      	b.n	80045b6 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800452e:	f107 030c 	add.w	r3, r7, #12
 8004532:	4619      	mov	r1, r3
 8004534:	4828      	ldr	r0, [pc, #160]	; (80045d8 <hci_send_req+0xf8>)
 8004536:	f000 fcac 	bl	8004e92 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	7a5b      	ldrb	r3, [r3, #9]
 800453e:	2b0f      	cmp	r3, #15
 8004540:	d114      	bne.n	800456c <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	330b      	adds	r3, #11
 8004546:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	885b      	ldrh	r3, [r3, #2]
 800454c:	b29b      	uxth	r3, r3
 800454e:	8bba      	ldrh	r2, [r7, #28]
 8004550:	429a      	cmp	r2, r3
 8004552:	d104      	bne.n	800455e <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	7812      	ldrb	r2, [r2, #0]
 800455c:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	785b      	ldrb	r3, [r3, #1]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d027      	beq.n	80045b6 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8004566:	2301      	movs	r3, #1
 8004568:	77fb      	strb	r3, [r7, #31]
 800456a:	e024      	b.n	80045b6 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	330b      	adds	r3, #11
 8004570:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004578:	b29b      	uxth	r3, r3
 800457a:	8bba      	ldrh	r2, [r7, #28]
 800457c:	429a      	cmp	r2, r3
 800457e:	d114      	bne.n	80045aa <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	7a9b      	ldrb	r3, [r3, #10]
 8004584:	3b03      	subs	r3, #3
 8004586:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	695a      	ldr	r2, [r3, #20]
 800458c:	7dfb      	ldrb	r3, [r7, #23]
 800458e:	429a      	cmp	r2, r3
 8004590:	bfa8      	it	ge
 8004592:	461a      	movge	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6918      	ldr	r0, [r3, #16]
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	1cd9      	adds	r1, r3, #3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	461a      	mov	r2, r3
 80045a6:	f001 fbe9 	bl	8005d7c <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d001      	beq.n	80045b6 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80045b2:	2301      	movs	r3, #1
 80045b4:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80045b6:	4808      	ldr	r0, [pc, #32]	; (80045d8 <hci_send_req+0xf8>)
 80045b8:	f000 fbdc 	bl	8004d74 <LST_is_empty>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d0b5      	beq.n	800452e <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 80045c2:	7ffb      	ldrb	r3, [r7, #31]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d0ad      	beq.n	8004524 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 80045c8:	2001      	movs	r0, #1
 80045ca:	f000 f85d 	bl	8004688 <NotifyCmdStatus>

  return 0;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3720      	adds	r7, #32
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	200001e4 	.word	0x200001e4

080045dc <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b086      	sub	sp, #24
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 80045e4:	480f      	ldr	r0, [pc, #60]	; (8004624 <TlInit+0x48>)
 80045e6:	f000 fbb5 	bl	8004d54 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 80045ea:	4a0f      	ldr	r2, [pc, #60]	; (8004628 <TlInit+0x4c>)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 80045f0:	480e      	ldr	r0, [pc, #56]	; (800462c <TlInit+0x50>)
 80045f2:	f000 fbaf 	bl	8004d54 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80045f6:	4b0e      	ldr	r3, [pc, #56]	; (8004630 <TlInit+0x54>)
 80045f8:	2201      	movs	r2, #1
 80045fa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 80045fc:	4b0d      	ldr	r3, [pc, #52]	; (8004634 <TlInit+0x58>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00a      	beq.n	800461a <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8004608:	4b0b      	ldr	r3, [pc, #44]	; (8004638 <TlInit+0x5c>)
 800460a:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800460c:	4b09      	ldr	r3, [pc, #36]	; (8004634 <TlInit+0x58>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f107 0208 	add.w	r2, r7, #8
 8004614:	4610      	mov	r0, r2
 8004616:	4798      	blx	r3
  }

  return;
 8004618:	bf00      	nop
 800461a:	bf00      	nop
}
 800461c:	3718      	adds	r7, #24
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	200001e4 	.word	0x200001e4
 8004628:	200000f8 	.word	0x200000f8
 800462c:	200000f0 	.word	0x200000f0
 8004630:	200000fc 	.word	0x200000fc
 8004634:	200001c4 	.word	0x200001c4
 8004638:	080046c9 	.word	0x080046c9

0800463c <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	4603      	mov	r3, r0
 8004644:	603a      	str	r2, [r7, #0]
 8004646:	80fb      	strh	r3, [r7, #6]
 8004648:	460b      	mov	r3, r1
 800464a:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800464c:	4b0c      	ldr	r3, [pc, #48]	; (8004680 <SendCmd+0x44>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	88fa      	ldrh	r2, [r7, #6]
 8004652:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8004656:	4b0a      	ldr	r3, [pc, #40]	; (8004680 <SendCmd+0x44>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	797a      	ldrb	r2, [r7, #5]
 800465c:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800465e:	4b08      	ldr	r3, [pc, #32]	; (8004680 <SendCmd+0x44>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	330c      	adds	r3, #12
 8004664:	797a      	ldrb	r2, [r7, #5]
 8004666:	6839      	ldr	r1, [r7, #0]
 8004668:	4618      	mov	r0, r3
 800466a:	f001 fb87 	bl	8005d7c <memcpy>

  hciContext.io.Send(0,0);
 800466e:	4b05      	ldr	r3, [pc, #20]	; (8004684 <SendCmd+0x48>)
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	2100      	movs	r1, #0
 8004674:	2000      	movs	r0, #0
 8004676:	4798      	blx	r3

  return;
 8004678:	bf00      	nop
}
 800467a:	3708      	adds	r7, #8
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	200000f8 	.word	0x200000f8
 8004684:	200001c4 	.word	0x200001c4

08004688 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	4603      	mov	r3, r0
 8004690:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8004692:	79fb      	ldrb	r3, [r7, #7]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d108      	bne.n	80046aa <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8004698:	4b0a      	ldr	r3, [pc, #40]	; (80046c4 <NotifyCmdStatus+0x3c>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00d      	beq.n	80046bc <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 80046a0:	4b08      	ldr	r3, [pc, #32]	; (80046c4 <NotifyCmdStatus+0x3c>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2000      	movs	r0, #0
 80046a6:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 80046a8:	e008      	b.n	80046bc <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 80046aa:	4b06      	ldr	r3, [pc, #24]	; (80046c4 <NotifyCmdStatus+0x3c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d004      	beq.n	80046bc <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 80046b2:	4b04      	ldr	r3, [pc, #16]	; (80046c4 <NotifyCmdStatus+0x3c>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2001      	movs	r0, #1
 80046b8:	4798      	blx	r3
  return;
 80046ba:	bf00      	nop
 80046bc:	bf00      	nop
}
 80046be:	3708      	adds	r7, #8
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	200001ec 	.word	0x200001ec

080046c8 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	7a5b      	ldrb	r3, [r3, #9]
 80046d4:	2b0f      	cmp	r3, #15
 80046d6:	d003      	beq.n	80046e0 <TlEvtReceived+0x18>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	7a5b      	ldrb	r3, [r3, #9]
 80046dc:	2b0e      	cmp	r3, #14
 80046de:	d107      	bne.n	80046f0 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 80046e0:	6879      	ldr	r1, [r7, #4]
 80046e2:	4809      	ldr	r0, [pc, #36]	; (8004708 <TlEvtReceived+0x40>)
 80046e4:	f000 fb8e 	bl	8004e04 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 80046e8:	2000      	movs	r0, #0
 80046ea:	f000 feea 	bl	80054c2 <hci_cmd_resp_release>
 80046ee:	e006      	b.n	80046fe <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 80046f0:	6879      	ldr	r1, [r7, #4]
 80046f2:	4806      	ldr	r0, [pc, #24]	; (800470c <TlEvtReceived+0x44>)
 80046f4:	f000 fb86 	bl	8004e04 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80046f8:	4804      	ldr	r0, [pc, #16]	; (800470c <TlEvtReceived+0x44>)
 80046fa:	f000 fed6 	bl	80054aa <hci_notify_asynch_evt>
  }

  return;
 80046fe:	bf00      	nop
}
 8004700:	3708      	adds	r7, #8
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	200001e4 	.word	0x200001e4
 800470c:	200000f0 	.word	0x200000f0

08004710 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a05      	ldr	r2, [pc, #20]	; (8004730 <hci_register_io_bus+0x20>)
 800471c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a04      	ldr	r2, [pc, #16]	; (8004734 <hci_register_io_bus+0x24>)
 8004722:	611a      	str	r2, [r3, #16]

  return;
 8004724:	bf00      	nop
}
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr
 8004730:	08004a21 	.word	0x08004a21
 8004734:	08004a89 	.word	0x08004a89

08004738 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	4a08      	ldr	r2, [pc, #32]	; (8004768 <shci_init+0x30>)
 8004748:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800474a:	4a08      	ldr	r2, [pc, #32]	; (800476c <shci_init+0x34>)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8004750:	4806      	ldr	r0, [pc, #24]	; (800476c <shci_init+0x34>)
 8004752:	f000 f911 	bl	8004978 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4618      	mov	r0, r3
 800475c:	f000 f894 	bl	8004888 <TlInit>

  return;
 8004760:	bf00      	nop
}
 8004762:	3708      	adds	r7, #8
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	20000210 	.word	0x20000210
 800476c:	200001f0 	.word	0x200001f0

08004770 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8004776:	4822      	ldr	r0, [pc, #136]	; (8004800 <shci_user_evt_proc+0x90>)
 8004778:	f000 fafc 	bl	8004d74 <LST_is_empty>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d12b      	bne.n	80047da <shci_user_evt_proc+0x6a>
 8004782:	4b20      	ldr	r3, [pc, #128]	; (8004804 <shci_user_evt_proc+0x94>)
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d027      	beq.n	80047da <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800478a:	f107 030c 	add.w	r3, r7, #12
 800478e:	4619      	mov	r1, r3
 8004790:	481b      	ldr	r0, [pc, #108]	; (8004800 <shci_user_evt_proc+0x90>)
 8004792:	f000 fb7e 	bl	8004e92 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8004796:	4b1c      	ldr	r3, [pc, #112]	; (8004808 <shci_user_evt_proc+0x98>)
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00c      	beq.n	80047b8 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80047a2:	2301      	movs	r3, #1
 80047a4:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80047a6:	4b18      	ldr	r3, [pc, #96]	; (8004808 <shci_user_evt_proc+0x98>)
 80047a8:	69db      	ldr	r3, [r3, #28]
 80047aa:	1d3a      	adds	r2, r7, #4
 80047ac:	4610      	mov	r0, r2
 80047ae:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80047b0:	793a      	ldrb	r2, [r7, #4]
 80047b2:	4b14      	ldr	r3, [pc, #80]	; (8004804 <shci_user_evt_proc+0x94>)
 80047b4:	701a      	strb	r2, [r3, #0]
 80047b6:	e002      	b.n	80047be <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80047b8:	4b12      	ldr	r3, [pc, #72]	; (8004804 <shci_user_evt_proc+0x94>)
 80047ba:	2201      	movs	r2, #1
 80047bc:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80047be:	4b11      	ldr	r3, [pc, #68]	; (8004804 <shci_user_evt_proc+0x94>)
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d004      	beq.n	80047d0 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	4618      	mov	r0, r3
 80047ca:	f000 f9fb 	bl	8004bc4 <TL_MM_EvtDone>
 80047ce:	e004      	b.n	80047da <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4619      	mov	r1, r3
 80047d4:	480a      	ldr	r0, [pc, #40]	; (8004800 <shci_user_evt_proc+0x90>)
 80047d6:	f000 faef 	bl	8004db8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80047da:	4809      	ldr	r0, [pc, #36]	; (8004800 <shci_user_evt_proc+0x90>)
 80047dc:	f000 faca 	bl	8004d74 <LST_is_empty>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d107      	bne.n	80047f6 <shci_user_evt_proc+0x86>
 80047e6:	4b07      	ldr	r3, [pc, #28]	; (8004804 <shci_user_evt_proc+0x94>)
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d003      	beq.n	80047f6 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 80047ee:	4804      	ldr	r0, [pc, #16]	; (8004800 <shci_user_evt_proc+0x90>)
 80047f0:	f7fb fd95 	bl	800031e <shci_notify_asynch_evt>
  }


  return;
 80047f4:	bf00      	nop
 80047f6:	bf00      	nop
}
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	20000100 	.word	0x20000100
 8004804:	20000110 	.word	0x20000110
 8004808:	200001f0 	.word	0x200001f0

0800480c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	60ba      	str	r2, [r7, #8]
 8004814:	607b      	str	r3, [r7, #4]
 8004816:	4603      	mov	r3, r0
 8004818:	81fb      	strh	r3, [r7, #14]
 800481a:	460b      	mov	r3, r1
 800481c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800481e:	2000      	movs	r0, #0
 8004820:	f000 f864 	bl	80048ec <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8004824:	4b16      	ldr	r3, [pc, #88]	; (8004880 <shci_send+0x74>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	89fa      	ldrh	r2, [r7, #14]
 800482a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800482e:	4b14      	ldr	r3, [pc, #80]	; (8004880 <shci_send+0x74>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	7b7a      	ldrb	r2, [r7, #13]
 8004834:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8004836:	4b12      	ldr	r3, [pc, #72]	; (8004880 <shci_send+0x74>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	330c      	adds	r3, #12
 800483c:	7b7a      	ldrb	r2, [r7, #13]
 800483e:	68b9      	ldr	r1, [r7, #8]
 8004840:	4618      	mov	r0, r3
 8004842:	f001 fa9b 	bl	8005d7c <memcpy>

  shciContext.io.Send(0,0);
 8004846:	4b0f      	ldr	r3, [pc, #60]	; (8004884 <shci_send+0x78>)
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	2100      	movs	r1, #0
 800484c:	2000      	movs	r0, #0
 800484e:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8004850:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8004854:	f7fb fd7a 	bl	800034c <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f103 0008 	add.w	r0, r3, #8
 800485e:	4b08      	ldr	r3, [pc, #32]	; (8004880 <shci_send+0x74>)
 8004860:	6819      	ldr	r1, [r3, #0]
 8004862:	4b07      	ldr	r3, [pc, #28]	; (8004880 <shci_send+0x74>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	789b      	ldrb	r3, [r3, #2]
 8004868:	3303      	adds	r3, #3
 800486a:	461a      	mov	r2, r3
 800486c:	f001 fa86 	bl	8005d7c <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8004870:	2001      	movs	r0, #1
 8004872:	f000 f83b 	bl	80048ec <Cmd_SetStatus>

  return;
 8004876:	bf00      	nop
}
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	2000010c 	.word	0x2000010c
 8004884:	200001f0 	.word	0x200001f0

08004888 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8004890:	4a10      	ldr	r2, [pc, #64]	; (80048d4 <TlInit+0x4c>)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8004896:	4810      	ldr	r0, [pc, #64]	; (80048d8 <TlInit+0x50>)
 8004898:	f000 fa5c 	bl	8004d54 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800489c:	2001      	movs	r0, #1
 800489e:	f000 f825 	bl	80048ec <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80048a2:	4b0e      	ldr	r3, [pc, #56]	; (80048dc <TlInit+0x54>)
 80048a4:	2201      	movs	r2, #1
 80048a6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 80048a8:	4b0d      	ldr	r3, [pc, #52]	; (80048e0 <TlInit+0x58>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00c      	beq.n	80048ca <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80048b4:	4b0b      	ldr	r3, [pc, #44]	; (80048e4 <TlInit+0x5c>)
 80048b6:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80048b8:	4b0b      	ldr	r3, [pc, #44]	; (80048e8 <TlInit+0x60>)
 80048ba:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 80048bc:	4b08      	ldr	r3, [pc, #32]	; (80048e0 <TlInit+0x58>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f107 020c 	add.w	r2, r7, #12
 80048c4:	4610      	mov	r0, r2
 80048c6:	4798      	blx	r3
  }

  return;
 80048c8:	bf00      	nop
 80048ca:	bf00      	nop
}
 80048cc:	3718      	adds	r7, #24
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	2000010c 	.word	0x2000010c
 80048d8:	20000100 	.word	0x20000100
 80048dc:	20000110 	.word	0x20000110
 80048e0:	200001f0 	.word	0x200001f0
 80048e4:	0800493d 	.word	0x0800493d
 80048e8:	08004955 	.word	0x08004955

080048ec <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	4603      	mov	r3, r0
 80048f4:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 80048f6:	79fb      	ldrb	r3, [r7, #7]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d10b      	bne.n	8004914 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 80048fc:	4b0d      	ldr	r3, [pc, #52]	; (8004934 <Cmd_SetStatus+0x48>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d003      	beq.n	800490c <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8004904:	4b0b      	ldr	r3, [pc, #44]	; (8004934 <Cmd_SetStatus+0x48>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2000      	movs	r0, #0
 800490a:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800490c:	4b0a      	ldr	r3, [pc, #40]	; (8004938 <Cmd_SetStatus+0x4c>)
 800490e:	2200      	movs	r2, #0
 8004910:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8004912:	e00b      	b.n	800492c <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8004914:	4b08      	ldr	r3, [pc, #32]	; (8004938 <Cmd_SetStatus+0x4c>)
 8004916:	2201      	movs	r2, #1
 8004918:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800491a:	4b06      	ldr	r3, [pc, #24]	; (8004934 <Cmd_SetStatus+0x48>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d004      	beq.n	800492c <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8004922:	4b04      	ldr	r3, [pc, #16]	; (8004934 <Cmd_SetStatus+0x48>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2001      	movs	r0, #1
 8004928:	4798      	blx	r3
  return;
 800492a:	bf00      	nop
 800492c:	bf00      	nop
}
 800492e:	3708      	adds	r7, #8
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	20000210 	.word	0x20000210
 8004938:	20000108 	.word	0x20000108

0800493c <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b082      	sub	sp, #8
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8004944:	2000      	movs	r0, #0
 8004946:	f7fb fcf6 	bl	8000336 <shci_cmd_resp_release>

  return;
 800494a:	bf00      	nop
}
 800494c:	3708      	adds	r7, #8
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
	...

08004954 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800495c:	6879      	ldr	r1, [r7, #4]
 800495e:	4805      	ldr	r0, [pc, #20]	; (8004974 <TlUserEvtReceived+0x20>)
 8004960:	f000 fa50 	bl	8004e04 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8004964:	4803      	ldr	r0, [pc, #12]	; (8004974 <TlUserEvtReceived+0x20>)
 8004966:	f7fb fcda 	bl	800031e <shci_notify_asynch_evt>

  return;
 800496a:	bf00      	nop
}
 800496c:	3708      	adds	r7, #8
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	20000100 	.word	0x20000100

08004978 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a05      	ldr	r2, [pc, #20]	; (8004998 <shci_register_io_bus+0x20>)
 8004984:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a04      	ldr	r2, [pc, #16]	; (800499c <shci_register_io_bus+0x24>)
 800498a:	611a      	str	r2, [r3, #16]

  return;
 800498c:	bf00      	nop
}
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr
 8004998:	08004ac1 	.word	0x08004ac1
 800499c:	08004b15 	.word	0x08004b15

080049a0 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80049a4:	f000 fee6 	bl	8005774 <HW_IPCC_Enable>

  return;
 80049a8:	bf00      	nop
}
 80049aa:	bd80      	pop	{r7, pc}

080049ac <TL_Init>:


void TL_Init( void )
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80049b0:	4b10      	ldr	r3, [pc, #64]	; (80049f4 <TL_Init+0x48>)
 80049b2:	4a11      	ldr	r2, [pc, #68]	; (80049f8 <TL_Init+0x4c>)
 80049b4:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80049b6:	4b0f      	ldr	r3, [pc, #60]	; (80049f4 <TL_Init+0x48>)
 80049b8:	4a10      	ldr	r2, [pc, #64]	; (80049fc <TL_Init+0x50>)
 80049ba:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80049bc:	4b0d      	ldr	r3, [pc, #52]	; (80049f4 <TL_Init+0x48>)
 80049be:	4a10      	ldr	r2, [pc, #64]	; (8004a00 <TL_Init+0x54>)
 80049c0:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80049c2:	4b0c      	ldr	r3, [pc, #48]	; (80049f4 <TL_Init+0x48>)
 80049c4:	4a0f      	ldr	r2, [pc, #60]	; (8004a04 <TL_Init+0x58>)
 80049c6:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 80049c8:	4b0a      	ldr	r3, [pc, #40]	; (80049f4 <TL_Init+0x48>)
 80049ca:	4a0f      	ldr	r2, [pc, #60]	; (8004a08 <TL_Init+0x5c>)
 80049cc:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 80049ce:	4b09      	ldr	r3, [pc, #36]	; (80049f4 <TL_Init+0x48>)
 80049d0:	4a0e      	ldr	r2, [pc, #56]	; (8004a0c <TL_Init+0x60>)
 80049d2:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 80049d4:	4b07      	ldr	r3, [pc, #28]	; (80049f4 <TL_Init+0x48>)
 80049d6:	4a0e      	ldr	r2, [pc, #56]	; (8004a10 <TL_Init+0x64>)
 80049d8:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 80049da:	4b06      	ldr	r3, [pc, #24]	; (80049f4 <TL_Init+0x48>)
 80049dc:	4a0d      	ldr	r2, [pc, #52]	; (8004a14 <TL_Init+0x68>)
 80049de:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 80049e0:	4b04      	ldr	r3, [pc, #16]	; (80049f4 <TL_Init+0x48>)
 80049e2:	4a0d      	ldr	r2, [pc, #52]	; (8004a18 <TL_Init+0x6c>)
 80049e4:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 80049e6:	4b03      	ldr	r3, [pc, #12]	; (80049f4 <TL_Init+0x48>)
 80049e8:	4a0c      	ldr	r2, [pc, #48]	; (8004a1c <TL_Init+0x70>)
 80049ea:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 80049ec:	f000 fed6 	bl	800579c <HW_IPCC_Init>

  return;
 80049f0:	bf00      	nop
}
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	20030000 	.word	0x20030000
 80049f8:	20030028 	.word	0x20030028
 80049fc:	20030048 	.word	0x20030048
 8004a00:	20030058 	.word	0x20030058
 8004a04:	20030064 	.word	0x20030064
 8004a08:	2003006c 	.word	0x2003006c
 8004a0c:	20030074 	.word	0x20030074
 8004a10:	2003007c 	.word	0x2003007c
 8004a14:	20030098 	.word	0x20030098
 8004a18:	2003009c 	.word	0x2003009c
 8004a1c:	200300a8 	.word	0x200300a8

08004a20 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8004a2c:	4811      	ldr	r0, [pc, #68]	; (8004a74 <TL_BLE_Init+0x54>)
 8004a2e:	f000 f991 	bl	8004d54 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8004a32:	4b11      	ldr	r3, [pc, #68]	; (8004a78 <TL_BLE_Init+0x58>)
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	689a      	ldr	r2, [r3, #8]
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	68da      	ldr	r2, [r3, #12]
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	4a0c      	ldr	r2, [pc, #48]	; (8004a7c <TL_BLE_Init+0x5c>)
 8004a4c:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	4a08      	ldr	r2, [pc, #32]	; (8004a74 <TL_BLE_Init+0x54>)
 8004a52:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8004a54:	f000 feb8 	bl	80057c8 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a08      	ldr	r2, [pc, #32]	; (8004a80 <TL_BLE_Init+0x60>)
 8004a5e:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	4a07      	ldr	r2, [pc, #28]	; (8004a84 <TL_BLE_Init+0x64>)
 8004a66:	6013      	str	r3, [r2, #0]

  return 0;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	200300c4 	.word	0x200300c4
 8004a78:	20030000 	.word	0x20030000
 8004a7c:	20030a48 	.word	0x20030a48
 8004a80:	2000021c 	.word	0x2000021c
 8004a84:	20000220 	.word	0x20000220

08004a88 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	460b      	mov	r3, r1
 8004a92:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8004a94:	4b09      	ldr	r3, [pc, #36]	; (8004abc <TL_BLE_SendCmd+0x34>)
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8004a9e:	4b07      	ldr	r3, [pc, #28]	; (8004abc <TL_BLE_SendCmd+0x34>)
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	2001      	movs	r0, #1
 8004aa8:	f000 f8d6 	bl	8004c58 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8004aac:	f000 fe96 	bl	80057dc <HW_IPCC_BLE_SendCmd>

  return 0;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3708      	adds	r7, #8
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	20030000 	.word	0x20030000

08004ac0 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8004acc:	480d      	ldr	r0, [pc, #52]	; (8004b04 <TL_SYS_Init+0x44>)
 8004ace:	f000 f941 	bl	8004d54 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8004ad2:	4b0d      	ldr	r3, [pc, #52]	; (8004b08 <TL_SYS_Init+0x48>)
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	689a      	ldr	r2, [r3, #8]
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	4a08      	ldr	r2, [pc, #32]	; (8004b04 <TL_SYS_Init+0x44>)
 8004ae4:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8004ae6:	f000 fe83 	bl	80057f0 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a07      	ldr	r2, [pc, #28]	; (8004b0c <TL_SYS_Init+0x4c>)
 8004af0:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	4a06      	ldr	r2, [pc, #24]	; (8004b10 <TL_SYS_Init+0x50>)
 8004af8:	6013      	str	r3, [r2, #0]

  return 0;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3710      	adds	r7, #16
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	200300cc 	.word	0x200300cc
 8004b08:	20030000 	.word	0x20030000
 8004b0c:	20000224 	.word	0x20000224
 8004b10:	20000228 	.word	0x20000228

08004b14 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8004b20:	4b09      	ldr	r3, [pc, #36]	; (8004b48 <TL_SYS_SendCmd+0x34>)
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2210      	movs	r2, #16
 8004b28:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8004b2a:	4b07      	ldr	r3, [pc, #28]	; (8004b48 <TL_SYS_SendCmd+0x34>)
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4619      	mov	r1, r3
 8004b32:	2004      	movs	r0, #4
 8004b34:	f000 f890 	bl	8004c58 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8004b38:	f000 fe64 	bl	8005804 <HW_IPCC_SYS_SendCmd>

  return 0;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3708      	adds	r7, #8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	20030000 	.word	0x20030000

08004b4c <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8004b54:	4817      	ldr	r0, [pc, #92]	; (8004bb4 <TL_MM_Init+0x68>)
 8004b56:	f000 f8fd 	bl	8004d54 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8004b5a:	4817      	ldr	r0, [pc, #92]	; (8004bb8 <TL_MM_Init+0x6c>)
 8004b5c:	f000 f8fa 	bl	8004d54 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8004b60:	4b16      	ldr	r3, [pc, #88]	; (8004bbc <TL_MM_Init+0x70>)
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	4a16      	ldr	r2, [pc, #88]	; (8004bc0 <TL_MM_Init+0x74>)
 8004b66:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8004b68:	4b15      	ldr	r3, [pc, #84]	; (8004bc0 <TL_MM_Init+0x74>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	6892      	ldr	r2, [r2, #8]
 8004b70:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8004b72:	4b13      	ldr	r3, [pc, #76]	; (8004bc0 <TL_MM_Init+0x74>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	68d2      	ldr	r2, [r2, #12]
 8004b7a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8004b7c:	4b10      	ldr	r3, [pc, #64]	; (8004bc0 <TL_MM_Init+0x74>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a0c      	ldr	r2, [pc, #48]	; (8004bb4 <TL_MM_Init+0x68>)
 8004b82:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8004b84:	4b0e      	ldr	r3, [pc, #56]	; (8004bc0 <TL_MM_Init+0x74>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	6812      	ldr	r2, [r2, #0]
 8004b8c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8004b8e:	4b0c      	ldr	r3, [pc, #48]	; (8004bc0 <TL_MM_Init+0x74>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	6852      	ldr	r2, [r2, #4]
 8004b96:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8004b98:	4b09      	ldr	r3, [pc, #36]	; (8004bc0 <TL_MM_Init+0x74>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	6912      	ldr	r2, [r2, #16]
 8004ba0:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8004ba2:	4b07      	ldr	r3, [pc, #28]	; (8004bc0 <TL_MM_Init+0x74>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	6952      	ldr	r2, [r2, #20]
 8004baa:	619a      	str	r2, [r3, #24]

  return;
 8004bac:	bf00      	nop
}
 8004bae:	3708      	adds	r7, #8
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	200300b4 	.word	0x200300b4
 8004bb8:	20000214 	.word	0x20000214
 8004bbc:	20030000 	.word	0x20030000
 8004bc0:	2000022c 	.word	0x2000022c

08004bc4 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8004bcc:	6879      	ldr	r1, [r7, #4]
 8004bce:	4807      	ldr	r0, [pc, #28]	; (8004bec <TL_MM_EvtDone+0x28>)
 8004bd0:	f000 f918 	bl	8004e04 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8004bd4:	6879      	ldr	r1, [r7, #4]
 8004bd6:	2000      	movs	r0, #0
 8004bd8:	f000 f83e 	bl	8004c58 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8004bdc:	4804      	ldr	r0, [pc, #16]	; (8004bf0 <TL_MM_EvtDone+0x2c>)
 8004bde:	f000 fe1f 	bl	8005820 <HW_IPCC_MM_SendFreeBuf>

  return;
 8004be2:	bf00      	nop
}
 8004be4:	3708      	adds	r7, #8
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	20000214 	.word	0x20000214
 8004bf0:	08004bf5 	.word	0x08004bf5

08004bf4 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8004bfa:	e00c      	b.n	8004c16 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8004bfc:	1d3b      	adds	r3, r7, #4
 8004bfe:	4619      	mov	r1, r3
 8004c00:	480a      	ldr	r0, [pc, #40]	; (8004c2c <SendFreeBuf+0x38>)
 8004c02:	f000 f946 	bl	8004e92 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8004c06:	4b0a      	ldr	r3, [pc, #40]	; (8004c30 <SendFreeBuf+0x3c>)
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	4611      	mov	r1, r2
 8004c10:	4618      	mov	r0, r3
 8004c12:	f000 f8f7 	bl	8004e04 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8004c16:	4805      	ldr	r0, [pc, #20]	; (8004c2c <SendFreeBuf+0x38>)
 8004c18:	f000 f8ac 	bl	8004d74 <LST_is_empty>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d0ec      	beq.n	8004bfc <SendFreeBuf+0x8>
  }

  return;
 8004c22:	bf00      	nop
}
 8004c24:	3708      	adds	r7, #8
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	20000214 	.word	0x20000214
 8004c30:	20030000 	.word	0x20030000

08004c34 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8004c38:	4805      	ldr	r0, [pc, #20]	; (8004c50 <TL_TRACES_Init+0x1c>)
 8004c3a:	f000 f88b 	bl	8004d54 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8004c3e:	4b05      	ldr	r3, [pc, #20]	; (8004c54 <TL_TRACES_Init+0x20>)
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	4a03      	ldr	r2, [pc, #12]	; (8004c50 <TL_TRACES_Init+0x1c>)
 8004c44:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8004c46:	f000 fe0d 	bl	8005864 <HW_IPCC_TRACES_Init>

  return;
 8004c4a:	bf00      	nop
}
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	200300bc 	.word	0x200300bc
 8004c54:	20030000 	.word	0x20030000

08004c58 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	4603      	mov	r3, r0
 8004c60:	6039      	str	r1, [r7, #0]
 8004c62:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8004c64:	79fb      	ldrb	r3, [r7, #7]
 8004c66:	2b06      	cmp	r3, #6
 8004c68:	d845      	bhi.n	8004cf6 <OutputDbgTrace+0x9e>
 8004c6a:	a201      	add	r2, pc, #4	; (adr r2, 8004c70 <OutputDbgTrace+0x18>)
 8004c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c70:	08004c8d 	.word	0x08004c8d
 8004c74:	08004cb1 	.word	0x08004cb1
 8004c78:	08004cb7 	.word	0x08004cb7
 8004c7c:	08004ccb 	.word	0x08004ccb
 8004c80:	08004cd7 	.word	0x08004cd7
 8004c84:	08004cdd 	.word	0x08004cdd
 8004c88:	08004ceb 	.word	0x08004ceb
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	7a5b      	ldrb	r3, [r3, #9]
 8004c94:	2bff      	cmp	r3, #255	; 0xff
 8004c96:	d005      	beq.n	8004ca4 <OutputDbgTrace+0x4c>
 8004c98:	2bff      	cmp	r3, #255	; 0xff
 8004c9a:	dc05      	bgt.n	8004ca8 <OutputDbgTrace+0x50>
 8004c9c:	2b0e      	cmp	r3, #14
 8004c9e:	d005      	beq.n	8004cac <OutputDbgTrace+0x54>
 8004ca0:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8004ca2:	e001      	b.n	8004ca8 <OutputDbgTrace+0x50>
          break;
 8004ca4:	bf00      	nop
 8004ca6:	e027      	b.n	8004cf8 <OutputDbgTrace+0xa0>
          break;
 8004ca8:	bf00      	nop
 8004caa:	e025      	b.n	8004cf8 <OutputDbgTrace+0xa0>
          break;
 8004cac:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8004cae:	e023      	b.n	8004cf8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8004cb4:	e020      	b.n	8004cf8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	7a5b      	ldrb	r3, [r3, #9]
 8004cbe:	2b0e      	cmp	r3, #14
 8004cc0:	d001      	beq.n	8004cc6 <OutputDbgTrace+0x6e>
 8004cc2:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8004cc4:	e000      	b.n	8004cc8 <OutputDbgTrace+0x70>
          break;
 8004cc6:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8004cc8:	e016      	b.n	8004cf8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	7a5b      	ldrb	r3, [r3, #9]
 8004cd2:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8004cd4:	e010      	b.n	8004cf8 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8004cda:	e00d      	b.n	8004cf8 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	7a5b      	ldrb	r3, [r3, #9]
 8004ce4:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8004ce6:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8004ce8:	e006      	b.n	8004cf8 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	7a5b      	ldrb	r3, [r3, #9]
 8004cf2:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8004cf4:	e000      	b.n	8004cf8 <OutputDbgTrace+0xa0>

    default:
      break;
 8004cf6:	bf00      	nop
  }

  return;
 8004cf8:	bf00      	nop
}
 8004cfa:	3714      	adds	r7, #20
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8004d0e:	4b0f      	ldr	r3, [pc, #60]	; (8004d4c <OTP_Read+0x48>)
 8004d10:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8004d12:	e002      	b.n	8004d1a <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	3b08      	subs	r3, #8
 8004d18:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	3307      	adds	r3, #7
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	79fa      	ldrb	r2, [r7, #7]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d003      	beq.n	8004d2e <OTP_Read+0x2a>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	4a09      	ldr	r2, [pc, #36]	; (8004d50 <OTP_Read+0x4c>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d1f2      	bne.n	8004d14 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	3307      	adds	r3, #7
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	79fa      	ldrb	r2, [r7, #7]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d001      	beq.n	8004d3e <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3714      	adds	r7, #20
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr
 8004d4c:	1fff73f8 	.word	0x1fff73f8
 8004d50:	1fff7000 	.word	0x1fff7000

08004d54 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	605a      	str	r2, [r3, #4]
}
 8004d68:	bf00      	nop
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b087      	sub	sp, #28
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d7c:	f3ef 8310 	mrs	r3, PRIMASK
 8004d80:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d82:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8004d84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004d86:	b672      	cpsid	i
}
 8004d88:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d102      	bne.n	8004d9a <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8004d94:	2301      	movs	r3, #1
 8004d96:	75fb      	strb	r3, [r7, #23]
 8004d98:	e001      	b.n	8004d9e <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	75fb      	strb	r3, [r7, #23]
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	f383 8810 	msr	PRIMASK, r3
}
 8004da8:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8004daa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	371c      	adds	r7, #28
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b087      	sub	sp, #28
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dc2:	f3ef 8310 	mrs	r3, PRIMASK
 8004dc6:	60fb      	str	r3, [r7, #12]
  return(result);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8004dca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8004dcc:	b672      	cpsid	i
}
 8004dce:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	683a      	ldr	r2, [r7, #0]
 8004de2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	683a      	ldr	r2, [r7, #0]
 8004dea:	605a      	str	r2, [r3, #4]
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	f383 8810 	msr	PRIMASK, r3
}
 8004df6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8004df8:	bf00      	nop
 8004dfa:	371c      	adds	r7, #28
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b087      	sub	sp, #28
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e0e:	f3ef 8310 	mrs	r3, PRIMASK
 8004e12:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e14:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8004e16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8004e18:	b672      	cpsid	i
}
 8004e1a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	683a      	ldr	r2, [r7, #0]
 8004e2e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	683a      	ldr	r2, [r7, #0]
 8004e36:	601a      	str	r2, [r3, #0]
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	f383 8810 	msr	PRIMASK, r3
}
 8004e42:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8004e44:	bf00      	nop
 8004e46:	371c      	adds	r7, #28
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b087      	sub	sp, #28
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e58:	f3ef 8310 	mrs	r3, PRIMASK
 8004e5c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8004e60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8004e62:	b672      	cpsid	i
}
 8004e64:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	6812      	ldr	r2, [r2, #0]
 8004e6e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	6852      	ldr	r2, [r2, #4]
 8004e78:	605a      	str	r2, [r3, #4]
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	f383 8810 	msr	PRIMASK, r3
}
 8004e84:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8004e86:	bf00      	nop
 8004e88:	371c      	adds	r7, #28
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr

08004e92 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b086      	sub	sp, #24
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
 8004e9a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e9c:	f3ef 8310 	mrs	r3, PRIMASK
 8004ea0:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8004ea4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8004ea6:	b672      	cpsid	i
}
 8004ea8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7ff ffca 	bl	8004e50 <LST_remove_node>
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	f383 8810 	msr	PRIMASK, r3
}
 8004ec6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8004ec8:	bf00      	nop
 8004eca:	3718      	adds	r7, #24
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8004ed4:	4b03      	ldr	r3, [pc, #12]	; (8004ee4 <LL_FLASH_GetUDN+0x14>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	1fff7580 	.word	0x1fff7580

08004ee8 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8004eec:	4b03      	ldr	r3, [pc, #12]	; (8004efc <LL_FLASH_GetDeviceID+0x14>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	b2db      	uxtb	r3, r3
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr
 8004efc:	1fff7584 	.word	0x1fff7584

08004f00 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8004f00:	b480      	push	{r7}
 8004f02:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 8004f04:	4b03      	ldr	r3, [pc, #12]	; (8004f14 <LL_FLASH_GetSTCompanyID+0x14>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	0a1b      	lsrs	r3, r3, #8
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr
 8004f14:	1fff7584 	.word	0x1fff7584

08004f18 <APP_BLE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 8004f18:	b5b0      	push	{r4, r5, r7, lr}
 8004f1a:	b08c      	sub	sp, #48	; 0x30
 8004f1c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8004f1e:	4b2a      	ldr	r3, [pc, #168]	; (8004fc8 <APP_BLE_Init+0xb0>)
 8004f20:	463c      	mov	r4, r7
 8004f22:	461d      	mov	r5, r3
 8004f24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f2c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004f30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 8004f34:	f000 f904 	bl	8005140 <Ble_Tl_Init>

#if (CFG_LPM_STANDBY_SUPPORTED == 0)
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8004f38:	2101      	movs	r1, #1
 8004f3a:	2002      	movs	r0, #2
 8004f3c:	f000 fcae 	bl	800589c <UTIL_LPM_SetOffMode>
#endif

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8004f40:	4a22      	ldr	r2, [pc, #136]	; (8004fcc <APP_BLE_Init+0xb4>)
 8004f42:	2100      	movs	r1, #0
 8004f44:	2004      	movs	r0, #4
 8004f46:	f000 fdbd 	bl	8005ac4 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 8004f4a:	463b      	mov	r3, r7
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f7ff fa2f 	bl	80043b0 <SHCI_C2_BLE_Init>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d001      	beq.n	8004f5c <APP_BLE_Init+0x44>
  {
    Error_Handler();
 8004f58:	f7fc f893 	bl	8001082 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8004f5c:	f000 f906 	bl	800516c <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8004f60:	f7ff f982 	bl	8004268 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8004f64:	4b1a      	ldr	r3, [pc, #104]	; (8004fd0 <APP_BLE_Init+0xb8>)
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8004f6c:	4b18      	ldr	r3, [pc, #96]	; (8004fd0 <APP_BLE_Init+0xb8>)
 8004f6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f72:	82da      	strh	r2, [r3, #22]
  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8004f74:	4a17      	ldr	r2, [pc, #92]	; (8004fd4 <APP_BLE_Init+0xbc>)
 8004f76:	2100      	movs	r1, #0
 8004f78:	2001      	movs	r0, #1
 8004f7a:	f000 fda3 	bl	8005ac4 <UTIL_SEQ_RegTask>
   */
#if(BLE_CFG_OTA_REBOOT_CHAR != 0)
  manuf_data[sizeof(manuf_data)-8] = CFG_FEATURE_OTA_REBOOT;
#endif
#if(RADIO_ACTIVITY_EVENT != 0)
  aci_hal_set_radio_activity_mask(0x0006);
 8004f7e:	2006      	movs	r0, #6
 8004f80:	f7fe fea0 	bl	8003cc4 <aci_hal_set_radio_activity_mask>
  mutex = 1;
#endif
  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 8004f84:	f000 fb1a 	bl	80055bc <P2PS_APP_Init>

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 8004f88:	4b13      	ldr	r3, [pc, #76]	; (8004fd8 <APP_BLE_Init+0xc0>)
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	4913      	ldr	r1, [pc, #76]	; (8004fdc <APP_BLE_Init+0xc4>)
 8004f8e:	2000      	movs	r0, #0
 8004f90:	f7fb fe24 	bl	8000bdc <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 8004f94:	4b12      	ldr	r3, [pc, #72]	; (8004fe0 <APP_BLE_Init+0xc8>)
 8004f96:	2200      	movs	r2, #0
 8004f98:	4912      	ldr	r1, [pc, #72]	; (8004fe4 <APP_BLE_Init+0xcc>)
 8004f9a:	2000      	movs	r0, #0
 8004f9c:	f7fb fe1e 	bl	8000bdc <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8004fa0:	4b0b      	ldr	r3, [pc, #44]	; (8004fd0 <APP_BLE_Init+0xb8>)
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8004fa6:	4b0a      	ldr	r3, [pc, #40]	; (8004fd0 <APP_BLE_Init+0xb8>)
 8004fa8:	2200      	movs	r2, #0
 8004faa:	761a      	strb	r2, [r3, #24]

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 8004fac:	4b0e      	ldr	r3, [pc, #56]	; (8004fe8 <APP_BLE_Init+0xd0>)
 8004fae:	2280      	movs	r2, #128	; 0x80
 8004fb0:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 8004fb2:	4b0e      	ldr	r3, [pc, #56]	; (8004fec <APP_BLE_Init+0xd4>)
 8004fb4:	22a0      	movs	r2, #160	; 0xa0
 8004fb6:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 8004fb8:	2001      	movs	r0, #1
 8004fba:	f000 f999 	bl	80052f0 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 8004fbe:	bf00      	nop
}
 8004fc0:	3730      	adds	r7, #48	; 0x30
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bdb0      	pop	{r4, r5, r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	08005dfc 	.word	0x08005dfc
 8004fcc:	08004445 	.word	0x08004445
 8004fd0:	20000114 	.word	0x20000114
 8004fd4:	08005459 	.word	0x08005459
 8004fd8:	0800548d 	.word	0x0800548d
 8004fdc:	20000195 	.word	0x20000195
 8004fe0:	0800549d 	.word	0x0800549d
 8004fe4:	20000196 	.word	0x20000196
 8004fe8:	20000198 	.word	0x20000198
 8004fec:	2000019a 	.word	0x2000019a

08004ff0 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b08a      	sub	sp, #40	; 0x28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blecore_aci *blecore_evt;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete;
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8004ff8:	2342      	movs	r3, #66	; 0x42
 8004ffa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	3301      	adds	r3, #1
 8005002:	623b      	str	r3, [r7, #32]

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 8005004:	6a3b      	ldr	r3, [r7, #32]
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	2bff      	cmp	r3, #255	; 0xff
 800500a:	d076      	beq.n	80050fa <SVCCTL_App_Notification+0x10a>
 800500c:	2bff      	cmp	r3, #255	; 0xff
 800500e:	f300 808b 	bgt.w	8005128 <SVCCTL_App_Notification+0x138>
 8005012:	2b05      	cmp	r3, #5
 8005014:	d002      	beq.n	800501c <SVCCTL_App_Notification+0x2c>
 8005016:	2b3e      	cmp	r3, #62	; 0x3e
 8005018:	d020      	beq.n	800505c <SVCCTL_App_Notification+0x6c>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800501a:	e085      	b.n	8005128 <SVCCTL_App_Notification+0x138>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 800501c:	6a3b      	ldr	r3, [r7, #32]
 800501e:	3302      	adds	r3, #2
 8005020:	60fb      	str	r3, [r7, #12]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005028:	b29a      	uxth	r2, r3
 800502a:	4b43      	ldr	r3, [pc, #268]	; (8005138 <SVCCTL_App_Notification+0x148>)
 800502c:	8adb      	ldrh	r3, [r3, #22]
 800502e:	429a      	cmp	r2, r3
 8005030:	d106      	bne.n	8005040 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8005032:	4b41      	ldr	r3, [pc, #260]	; (8005138 <SVCCTL_App_Notification+0x148>)
 8005034:	2200      	movs	r2, #0
 8005036:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8005038:	4b3f      	ldr	r3, [pc, #252]	; (8005138 <SVCCTL_App_Notification+0x148>)
 800503a:	2200      	movs	r2, #0
 800503c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8005040:	2001      	movs	r0, #1
 8005042:	f000 f955 	bl	80052f0 <Adv_Request>
      handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8005046:	4b3d      	ldr	r3, [pc, #244]	; (800513c <SVCCTL_App_Notification+0x14c>)
 8005048:	2201      	movs	r2, #1
 800504a:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800504c:	4b3a      	ldr	r3, [pc, #232]	; (8005138 <SVCCTL_App_Notification+0x148>)
 800504e:	8ada      	ldrh	r2, [r3, #22]
 8005050:	4b3a      	ldr	r3, [pc, #232]	; (800513c <SVCCTL_App_Notification+0x14c>)
 8005052:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&handleNotification);
 8005054:	4839      	ldr	r0, [pc, #228]	; (800513c <SVCCTL_App_Notification+0x14c>)
 8005056:	f000 fa9d 	bl	8005594 <P2PS_APP_Notification>
    break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800505a:	e068      	b.n	800512e <SVCCTL_App_Notification+0x13e>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 800505c:	6a3b      	ldr	r3, [r7, #32]
 800505e:	3302      	adds	r3, #2
 8005060:	61bb      	str	r3, [r7, #24]
      switch (meta_evt->subevent)
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	2b0c      	cmp	r3, #12
 8005068:	d005      	beq.n	8005076 <SVCCTL_App_Notification+0x86>
 800506a:	2b0c      	cmp	r3, #12
 800506c:	dc41      	bgt.n	80050f2 <SVCCTL_App_Notification+0x102>
 800506e:	2b01      	cmp	r3, #1
 8005070:	d017      	beq.n	80050a2 <SVCCTL_App_Notification+0xb2>
 8005072:	2b03      	cmp	r3, #3
          break;
 8005074:	e03d      	b.n	80050f2 <SVCCTL_App_Notification+0x102>
          evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	3301      	adds	r3, #1
 800507a:	617b      	str	r3, [r7, #20]
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 800507c:	4b2e      	ldr	r3, [pc, #184]	; (8005138 <SVCCTL_App_Notification+0x148>)
 800507e:	8adb      	ldrh	r3, [r3, #22]
 8005080:	f107 020a 	add.w	r2, r7, #10
 8005084:	f107 010b 	add.w	r1, r7, #11
 8005088:	4618      	mov	r0, r3
 800508a:	f7fe fe89 	bl	8003da0 <hci_le_read_phy>
 800508e:	4603      	mov	r3, r0
 8005090:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret == BLE_STATUS_SUCCESS)
 8005094:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005098:	2b00      	cmp	r3, #0
 800509a:	d12c      	bne.n	80050f6 <SVCCTL_App_Notification+0x106>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 800509c:	7afb      	ldrb	r3, [r7, #11]
 800509e:	2b02      	cmp	r3, #2
          break;
 80050a0:	e029      	b.n	80050f6 <SVCCTL_App_Notification+0x106>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	3301      	adds	r3, #1
 80050a6:	613b      	str	r3, [r7, #16]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 80050a8:	4b23      	ldr	r3, [pc, #140]	; (8005138 <SVCCTL_App_Notification+0x148>)
 80050aa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7fb fe0e 	bl	8000cd0 <HW_TS_Stop>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 80050b4:	4b20      	ldr	r3, [pc, #128]	; (8005138 <SVCCTL_App_Notification+0x148>)
 80050b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80050ba:	2b04      	cmp	r3, #4
 80050bc:	d104      	bne.n	80050c8 <SVCCTL_App_Notification+0xd8>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 80050be:	4b1e      	ldr	r3, [pc, #120]	; (8005138 <SVCCTL_App_Notification+0x148>)
 80050c0:	2206      	movs	r2, #6
 80050c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 80050c6:	e003      	b.n	80050d0 <SVCCTL_App_Notification+0xe0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 80050c8:	4b1b      	ldr	r3, [pc, #108]	; (8005138 <SVCCTL_App_Notification+0x148>)
 80050ca:	2205      	movs	r2, #5
 80050cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80050d6:	b29a      	uxth	r2, r3
 80050d8:	4b17      	ldr	r3, [pc, #92]	; (8005138 <SVCCTL_App_Notification+0x148>)
 80050da:	82da      	strh	r2, [r3, #22]
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 80050dc:	4b17      	ldr	r3, [pc, #92]	; (800513c <SVCCTL_App_Notification+0x14c>)
 80050de:	2200      	movs	r2, #0
 80050e0:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80050e2:	4b15      	ldr	r3, [pc, #84]	; (8005138 <SVCCTL_App_Notification+0x148>)
 80050e4:	8ada      	ldrh	r2, [r3, #22]
 80050e6:	4b15      	ldr	r3, [pc, #84]	; (800513c <SVCCTL_App_Notification+0x14c>)
 80050e8:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 80050ea:	4814      	ldr	r0, [pc, #80]	; (800513c <SVCCTL_App_Notification+0x14c>)
 80050ec:	f000 fa52 	bl	8005594 <P2PS_APP_Notification>
        break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 80050f0:	e002      	b.n	80050f8 <SVCCTL_App_Notification+0x108>
          break;
 80050f2:	bf00      	nop
 80050f4:	e01b      	b.n	800512e <SVCCTL_App_Notification+0x13e>
          break;
 80050f6:	bf00      	nop
    break; /* HCI_LE_META_EVT_CODE */
 80050f8:	e019      	b.n	800512e <SVCCTL_App_Notification+0x13e>
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 80050fa:	6a3b      	ldr	r3, [r7, #32]
 80050fc:	3302      	adds	r3, #2
 80050fe:	61fb      	str	r3, [r7, #28]
      switch (blecore_evt->ecode)
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	881b      	ldrh	r3, [r3, #0]
 8005104:	b29b      	uxth	r3, r3
 8005106:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800510a:	d009      	beq.n	8005120 <SVCCTL_App_Notification+0x130>
 800510c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005110:	dc0c      	bgt.n	800512c <SVCCTL_App_Notification+0x13c>
 8005112:	2b04      	cmp	r3, #4
 8005114:	d006      	beq.n	8005124 <SVCCTL_App_Notification+0x134>
 8005116:	f240 4207 	movw	r2, #1031	; 0x407
 800511a:	4293      	cmp	r3, r2
 800511c:	d106      	bne.n	800512c <SVCCTL_App_Notification+0x13c>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800511e:	e002      	b.n	8005126 <SVCCTL_App_Notification+0x136>
      break;
 8005120:	bf00      	nop
 8005122:	e003      	b.n	800512c <SVCCTL_App_Notification+0x13c>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8005124:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8005126:	e001      	b.n	800512c <SVCCTL_App_Notification+0x13c>
      break;
 8005128:	bf00      	nop
 800512a:	e000      	b.n	800512e <SVCCTL_App_Notification+0x13e>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800512c:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800512e:	2301      	movs	r3, #1
}
 8005130:	4618      	mov	r0, r3
 8005132:	3728      	adds	r7, #40	; 0x28
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	20000114 	.word	0x20000114
 800513c:	20000348 	.word	0x20000348

08005140 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8005146:	4b06      	ldr	r3, [pc, #24]	; (8005160 <Ble_Tl_Init+0x20>)
 8005148:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800514a:	4b06      	ldr	r3, [pc, #24]	; (8005164 <Ble_Tl_Init+0x24>)
 800514c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800514e:	463b      	mov	r3, r7
 8005150:	4619      	mov	r1, r3
 8005152:	4805      	ldr	r0, [pc, #20]	; (8005168 <Ble_Tl_Init+0x28>)
 8005154:	f7ff f95a 	bl	800440c <hci_init>

  return;
 8005158:	bf00      	nop
}
 800515a:	3708      	adds	r7, #8
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	200300d4 	.word	0x200300d4
 8005164:	08005527 	.word	0x08005527
 8005168:	080054ef 	.word	0x080054ef

0800516c <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 800516c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800516e:	b08f      	sub	sp, #60	; 0x3c
 8005170:	af06      	add	r7, sp, #24

  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 8005172:	2300      	movs	r3, #0
 8005174:	803b      	strh	r3, [r7, #0]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 8005176:	f7fe fdef 	bl	8003d58 <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 800517a:	f000 f929 	bl	80053d0 <BleGetBdAddress>
 800517e:	61f8      	str	r0, [r7, #28]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8005180:	69fa      	ldr	r2, [r7, #28]
 8005182:	2106      	movs	r1, #6
 8005184:	2000      	movs	r0, #0
 8005186:	f7fe fcdd 	bl	8003b44 <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	795a      	ldrb	r2, [r3, #5]
 800518e:	4b52      	ldr	r3, [pc, #328]	; (80052d8 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8005190:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	791a      	ldrb	r2, [r3, #4]
 8005196:	4b50      	ldr	r3, [pc, #320]	; (80052d8 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8005198:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	78da      	ldrb	r2, [r3, #3]
 800519e:	4b4e      	ldr	r3, [pc, #312]	; (80052d8 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 80051a0:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	789a      	ldrb	r2, [r3, #2]
 80051a6:	4b4c      	ldr	r3, [pc, #304]	; (80052d8 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 80051a8:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	785a      	ldrb	r2, [r3, #1]
 80051ae:	4b4a      	ldr	r3, [pc, #296]	; (80052d8 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 80051b0:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	781a      	ldrb	r2, [r3, #0]
 80051b6:	4b48      	ldr	r3, [pc, #288]	; (80052d8 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 80051b8:	735a      	strb	r2, [r3, #13]
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 80051ba:	f64e 536e 	movw	r3, #60782	; 0xed6e
 80051be:	60bb      	str	r3, [r7, #8]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 80051c0:	f7ff fe86 	bl	8004ed0 <LL_FLASH_GetUDN>
 80051c4:	4603      	mov	r3, r0
 80051c6:	607b      	str	r3, [r7, #4]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 80051c8:	1d3b      	adds	r3, r7, #4
 80051ca:	461a      	mov	r2, r3
 80051cc:	2106      	movs	r1, #6
 80051ce:	202e      	movs	r0, #46	; 0x2e
 80051d0:	f7fe fcb8 	bl	8003b44 <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 80051d4:	4a41      	ldr	r2, [pc, #260]	; (80052dc <Ble_Hci_Gap_Gatt_Init+0x170>)
 80051d6:	2110      	movs	r1, #16
 80051d8:	2018      	movs	r0, #24
 80051da:	f7fe fcb3 	bl	8003b44 <aci_hal_write_config_data>

   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 80051de:	4a40      	ldr	r2, [pc, #256]	; (80052e0 <Ble_Hci_Gap_Gatt_Init+0x174>)
 80051e0:	2110      	movs	r1, #16
 80051e2:	2008      	movs	r0, #8
 80051e4:	f7fe fcae 	bl	8003b44 <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 80051e8:	2118      	movs	r1, #24
 80051ea:	2001      	movs	r0, #1
 80051ec:	f7fe fd13 	bl	8003c16 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 80051f0:	f7fe fa63 	bl	80036ba <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 80051f4:	2300      	movs	r3, #0
 80051f6:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 80051f8:	7efb      	ldrb	r3, [r7, #27]
 80051fa:	f043 0301 	orr.w	r3, r3, #1
 80051fe:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 8005200:	7efb      	ldrb	r3, [r7, #27]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d01e      	beq.n	8005244 <Ble_Hci_Gap_Gatt_Init+0xd8>
  {
    const char *name = "P2PSRV1";
 8005206:	4b37      	ldr	r3, [pc, #220]	; (80052e4 <Ble_Hci_Gap_Gatt_Init+0x178>)
 8005208:	617b      	str	r3, [r7, #20]
    aci_gap_init(role, 0,
 800520a:	f107 0212 	add.w	r2, r7, #18
 800520e:	7ef8      	ldrb	r0, [r7, #27]
 8005210:	f107 030e 	add.w	r3, r7, #14
 8005214:	9301      	str	r3, [sp, #4]
 8005216:	f107 0310 	add.w	r3, r7, #16
 800521a:	9300      	str	r3, [sp, #0]
 800521c:	4613      	mov	r3, r2
 800521e:	2207      	movs	r2, #7
 8005220:	2100      	movs	r1, #0
 8005222:	f7fe f93f 	bl	80034a4 <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 8005226:	8a7c      	ldrh	r4, [r7, #18]
 8005228:	8a3d      	ldrh	r5, [r7, #16]
 800522a:	6978      	ldr	r0, [r7, #20]
 800522c:	f7fa ffa6 	bl	800017c <strlen>
 8005230:	4603      	mov	r3, r0
 8005232:	b2da      	uxtb	r2, r3
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	9300      	str	r3, [sp, #0]
 8005238:	4613      	mov	r3, r2
 800523a:	2200      	movs	r2, #0
 800523c:	4629      	mov	r1, r5
 800523e:	4620      	mov	r0, r4
 8005240:	f7fe fbf9 	bl	8003a36 <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 8005244:	8a78      	ldrh	r0, [r7, #18]
 8005246:	89f9      	ldrh	r1, [r7, #14]
 8005248:	463b      	mov	r3, r7
 800524a:	9300      	str	r3, [sp, #0]
 800524c:	2302      	movs	r3, #2
 800524e:	2200      	movs	r2, #0
 8005250:	f7fe fbf1 	bl	8003a36 <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8005254:	2202      	movs	r2, #2
 8005256:	2102      	movs	r1, #2
 8005258:	2000      	movs	r0, #0
 800525a:	f7fe fe09 	bl	8003e70 <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800525e:	4b22      	ldr	r3, [pc, #136]	; (80052e8 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8005260:	2201      	movs	r2, #1
 8005262:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8005264:	4b20      	ldr	r3, [pc, #128]	; (80052e8 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	4618      	mov	r0, r3
 800526a:	f7fe f829 	bl	80032c0 <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800526e:	4b1e      	ldr	r3, [pc, #120]	; (80052e8 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8005270:	2201      	movs	r2, #1
 8005272:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8005274:	4b1c      	ldr	r3, [pc, #112]	; (80052e8 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8005276:	2208      	movs	r2, #8
 8005278:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800527a:	4b1b      	ldr	r3, [pc, #108]	; (80052e8 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 800527c:	2210      	movs	r2, #16
 800527e:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8005280:	4b19      	ldr	r3, [pc, #100]	; (80052e8 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8005282:	2200      	movs	r2, #0
 8005284:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8005286:	4b18      	ldr	r3, [pc, #96]	; (80052e8 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8005288:	4a18      	ldr	r2, [pc, #96]	; (80052ec <Ble_Hci_Gap_Gatt_Init+0x180>)
 800528a:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800528c:	4b16      	ldr	r3, [pc, #88]	; (80052e8 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 800528e:	2201      	movs	r2, #1
 8005290:	709a      	strb	r2, [r3, #2]

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8005292:	4b15      	ldr	r3, [pc, #84]	; (80052e8 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8005294:	789c      	ldrb	r4, [r3, #2]
 8005296:	4b14      	ldr	r3, [pc, #80]	; (80052e8 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8005298:	785d      	ldrb	r5, [r3, #1]
 800529a:	4b13      	ldr	r3, [pc, #76]	; (80052e8 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 800529c:	791b      	ldrb	r3, [r3, #4]
 800529e:	4a12      	ldr	r2, [pc, #72]	; (80052e8 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 80052a0:	7952      	ldrb	r2, [r2, #5]
 80052a2:	4911      	ldr	r1, [pc, #68]	; (80052e8 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 80052a4:	78c9      	ldrb	r1, [r1, #3]
 80052a6:	4810      	ldr	r0, [pc, #64]	; (80052e8 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 80052a8:	6880      	ldr	r0, [r0, #8]
 80052aa:	2600      	movs	r6, #0
 80052ac:	9604      	str	r6, [sp, #16]
 80052ae:	9003      	str	r0, [sp, #12]
 80052b0:	9102      	str	r1, [sp, #8]
 80052b2:	9201      	str	r2, [sp, #4]
 80052b4:	9300      	str	r3, [sp, #0]
 80052b6:	2300      	movs	r3, #0
 80052b8:	2201      	movs	r2, #1
 80052ba:	4629      	mov	r1, r5
 80052bc:	4620      	mov	r0, r4
 80052be:	f7fe f849 	bl	8003354 <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 80052c2:	4b09      	ldr	r3, [pc, #36]	; (80052e8 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 80052c4:	789b      	ldrb	r3, [r3, #2]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d001      	beq.n	80052ce <Ble_Hci_Gap_Gatt_Init+0x162>
   {
     aci_gap_configure_whitelist();
 80052ca:	f7fe f9d2 	bl	8003672 <aci_gap_configure_whitelist>
   }
}
 80052ce:	bf00      	nop
 80052d0:	3724      	adds	r7, #36	; 0x24
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052d6:	bf00      	nop
 80052d8:	2000000c 	.word	0x2000000c
 80052dc:	08005fcc 	.word	0x08005fcc
 80052e0:	08005fdc 	.word	0x08005fdc
 80052e4:	08005e2c 	.word	0x08005e2c
 80052e8:	20000114 	.word	0x20000114
 80052ec:	0001b207 	.word	0x0001b207

080052f0 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b08c      	sub	sp, #48	; 0x30
 80052f4:	af08      	add	r7, sp, #32
 80052f6:	4603      	mov	r3, r0
 80052f8:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80052fa:	2342      	movs	r3, #66	; 0x42
 80052fc:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (New_Status == APP_BLE_FAST_ADV)
 80052fe:	79fb      	ldrb	r3, [r7, #7]
 8005300:	2b01      	cmp	r3, #1
 8005302:	d106      	bne.n	8005312 <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 8005304:	4b2b      	ldr	r3, [pc, #172]	; (80053b4 <Adv_Request+0xc4>)
 8005306:	881b      	ldrh	r3, [r3, #0]
 8005308:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 800530a:	4b2b      	ldr	r3, [pc, #172]	; (80053b8 <Adv_Request+0xc8>)
 800530c:	881b      	ldrh	r3, [r3, #0]
 800530e:	81bb      	strh	r3, [r7, #12]
 8005310:	e005      	b.n	800531e <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 8005312:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8005316:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 8005318:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800531c:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800531e:	4b27      	ldr	r3, [pc, #156]	; (80053bc <Adv_Request+0xcc>)
 8005320:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005324:	4618      	mov	r0, r3
 8005326:	f7fb fcd3 	bl	8000cd0 <HW_TS_Stop>

    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);

    if ((New_Status == APP_BLE_LP_ADV)
 800532a:	79fb      	ldrb	r3, [r7, #7]
 800532c:	2b02      	cmp	r3, #2
 800532e:	d10d      	bne.n	800534c <Adv_Request+0x5c>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 8005330:	4b22      	ldr	r3, [pc, #136]	; (80053bc <Adv_Request+0xcc>)
 8005332:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005336:	2b01      	cmp	r3, #1
 8005338:	d004      	beq.n	8005344 <Adv_Request+0x54>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 800533a:	4b20      	ldr	r3, [pc, #128]	; (80053bc <Adv_Request+0xcc>)
 800533c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005340:	2b02      	cmp	r3, #2
 8005342:	d103      	bne.n	800534c <Adv_Request+0x5c>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 8005344:	f7fd feba 	bl	80030bc <aci_gap_set_non_discoverable>
 8005348:	4603      	mov	r3, r0
 800534a:	72fb      	strb	r3, [r7, #11]
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 800534c:	4a1b      	ldr	r2, [pc, #108]	; (80053bc <Adv_Request+0xcc>)
 800534e:	79fb      	ldrb	r3, [r7, #7]
 8005350:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 8005354:	4b19      	ldr	r3, [pc, #100]	; (80053bc <Adv_Request+0xcc>)
 8005356:	7e1b      	ldrb	r3, [r3, #24]
 8005358:	89ba      	ldrh	r2, [r7, #12]
 800535a:	89f9      	ldrh	r1, [r7, #14]
 800535c:	2000      	movs	r0, #0
 800535e:	9006      	str	r0, [sp, #24]
 8005360:	2000      	movs	r0, #0
 8005362:	9005      	str	r0, [sp, #20]
 8005364:	4816      	ldr	r0, [pc, #88]	; (80053c0 <Adv_Request+0xd0>)
 8005366:	9004      	str	r0, [sp, #16]
 8005368:	9303      	str	r3, [sp, #12]
 800536a:	4b16      	ldr	r3, [pc, #88]	; (80053c4 <Adv_Request+0xd4>)
 800536c:	9302      	str	r3, [sp, #8]
 800536e:	2308      	movs	r3, #8
 8005370:	9301      	str	r3, [sp, #4]
 8005372:	2300      	movs	r3, #0
 8005374:	9300      	str	r3, [sp, #0]
 8005376:	2300      	movs	r3, #0
 8005378:	2000      	movs	r0, #0
 800537a:	f7fd fec3 	bl	8003104 <aci_gap_set_discoverable>
 800537e:	4603      	mov	r3, r0
 8005380:	72fb      	strb	r3, [r7, #11]
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 8005382:	4911      	ldr	r1, [pc, #68]	; (80053c8 <Adv_Request+0xd8>)
 8005384:	200e      	movs	r0, #14
 8005386:	f7fe f918 	bl	80035ba <aci_gap_update_adv_data>
 800538a:	4603      	mov	r3, r0
 800538c:	72fb      	strb	r3, [r7, #11]
    if (ret == BLE_STATUS_SUCCESS)
 800538e:	7afb      	ldrb	r3, [r7, #11]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d10a      	bne.n	80053aa <Adv_Request+0xba>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 8005394:	79fb      	ldrb	r3, [r7, #7]
 8005396:	2b01      	cmp	r3, #1
 8005398:	d107      	bne.n	80053aa <Adv_Request+0xba>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800539a:	4b08      	ldr	r3, [pc, #32]	; (80053bc <Adv_Request+0xcc>)
 800539c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80053a0:	490a      	ldr	r1, [pc, #40]	; (80053cc <Adv_Request+0xdc>)
 80053a2:	4618      	mov	r0, r3
 80053a4:	f7fb fd20 	bl	8000de8 <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 80053a8:	bf00      	nop
 80053aa:	bf00      	nop
}
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	20000198 	.word	0x20000198
 80053b8:	2000019a 	.word	0x2000019a
 80053bc:	20000114 	.word	0x20000114
 80053c0:	2000012d 	.word	0x2000012d
 80053c4:	08005fec 	.word	0x08005fec
 80053c8:	2000000c 	.word	0x2000000c
 80053cc:	0001e046 	.word	0x0001e046

080053d0 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b086      	sub	sp, #24
 80053d4:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 80053d6:	f7ff fd7b 	bl	8004ed0 <LL_FLASH_GetUDN>
 80053da:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e2:	d023      	beq.n	800542c <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 80053e4:	f7ff fd8c 	bl	8004f00 <LL_FLASH_GetSTCompanyID>
 80053e8:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 80053ea:	f7ff fd7d 	bl	8004ee8 <LL_FLASH_GetDeviceID>
 80053ee:	6078      	str	r0, [r7, #4]
 * bit[23:16] : Device ID.
 * bit[15:0] : The last 16bits from the UDN
 * Note: In order to use the Public Address in a final product, a dedicated
 * 24bits company ID (OUI) shall be bought.
 */
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	b2da      	uxtb	r2, r3
 80053f4:	4b16      	ldr	r3, [pc, #88]	; (8005450 <BleGetBdAddress+0x80>)
 80053f6:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	0a1b      	lsrs	r3, r3, #8
 80053fc:	b2da      	uxtb	r2, r3
 80053fe:	4b14      	ldr	r3, [pc, #80]	; (8005450 <BleGetBdAddress+0x80>)
 8005400:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)device_id;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	b2da      	uxtb	r2, r3
 8005406:	4b12      	ldr	r3, [pc, #72]	; (8005450 <BleGetBdAddress+0x80>)
 8005408:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)(company_id & 0x000000FF);
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	b2da      	uxtb	r2, r3
 800540e:	4b10      	ldr	r3, [pc, #64]	; (8005450 <BleGetBdAddress+0x80>)
 8005410:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	0a1b      	lsrs	r3, r3, #8
 8005416:	b2da      	uxtb	r2, r3
 8005418:	4b0d      	ldr	r3, [pc, #52]	; (8005450 <BleGetBdAddress+0x80>)
 800541a:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x00FF0000) >> 16 );
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	0c1b      	lsrs	r3, r3, #16
 8005420:	b2da      	uxtb	r2, r3
 8005422:	4b0b      	ldr	r3, [pc, #44]	; (8005450 <BleGetBdAddress+0x80>)
 8005424:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 8005426:	4b0a      	ldr	r3, [pc, #40]	; (8005450 <BleGetBdAddress+0x80>)
 8005428:	617b      	str	r3, [r7, #20]
 800542a:	e00b      	b.n	8005444 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 800542c:	2000      	movs	r0, #0
 800542e:	f7ff fc69 	bl	8004d04 <OTP_Read>
 8005432:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d002      	beq.n	8005440 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	617b      	str	r3, [r7, #20]
 800543e:	e001      	b.n	8005444 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 8005440:	4b04      	ldr	r3, [pc, #16]	; (8005454 <BleGetBdAddress+0x84>)
 8005442:	617b      	str	r3, [r7, #20]
    }
  }

  return bd_addr;
 8005444:	697b      	ldr	r3, [r7, #20]
}
 8005446:	4618      	mov	r0, r3
 8005448:	3718      	adds	r7, #24
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	20000230 	.word	0x20000230
 8005454:	08005fc4 	.word	0x08005fc4

08005458 <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b082      	sub	sp, #8
 800545c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */

/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800545e:	4b0a      	ldr	r3, [pc, #40]	; (8005488 <Adv_Cancel+0x30>)
 8005460:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005464:	2b05      	cmp	r3, #5
 8005466:	d00a      	beq.n	800547e <Adv_Cancel+0x26>

  {

    tBleStatus result = 0x00;
 8005468:	2300      	movs	r3, #0
 800546a:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 800546c:	f7fd fe26 	bl	80030bc <aci_gap_set_non_discoverable>
 8005470:	4603      	mov	r3, r0
 8005472:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8005474:	4b04      	ldr	r3, [pc, #16]	; (8005488 <Adv_Cancel+0x30>)
 8005476:	2200      	movs	r2, #0
 8005478:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 800547c:	bf00      	nop
 800547e:	bf00      	nop
}
 8005480:	3708      	adds	r7, #8
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	20000114 	.word	0x20000114

0800548c <Adv_Cancel_Req>:

static void Adv_Cancel_Req( void )
{
 800548c:	b580      	push	{r7, lr}
 800548e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_Req_1 */

/* USER CODE END Adv_Cancel_Req_1 */
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 8005490:	2100      	movs	r1, #0
 8005492:	2001      	movs	r0, #1
 8005494:	f000 fb38 	bl	8005b08 <UTIL_SEQ_SetTask>
/* USER CODE BEGIN Adv_Cancel_Req_2 */

/* USER CODE END Adv_Cancel_Req_2 */
  return;
 8005498:	bf00      	nop
}
 800549a:	bd80      	pop	{r7, pc}

0800549c <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
 800549c:	b480      	push	{r7}
 800549e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */

/* USER CODE END Switch_OFF_GPIO */
}
 80054a0:	bf00      	nop
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr

080054aa <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 80054aa:	b580      	push	{r7, lr}
 80054ac:	b082      	sub	sp, #8
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80054b2:	2100      	movs	r1, #0
 80054b4:	2004      	movs	r0, #4
 80054b6:	f000 fb27 	bl	8005b08 <UTIL_SEQ_SetTask>
  return;
 80054ba:	bf00      	nop
}
 80054bc:	3708      	adds	r7, #8
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b082      	sub	sp, #8
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80054ca:	2001      	movs	r0, #1
 80054cc:	f000 fb88 	bl	8005be0 <UTIL_SEQ_SetEvt>
  return;
 80054d0:	bf00      	nop
}
 80054d2:	3708      	adds	r7, #8
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80054e0:	2001      	movs	r0, #1
 80054e2:	f000 fb9d 	bl	8005c20 <UTIL_SEQ_WaitEvt>
  return;
 80054e6:	bf00      	nop
}
 80054e8:	3708      	adds	r7, #8
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b084      	sub	sp, #16
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	3308      	adds	r3, #8
 8005500:	4618      	mov	r0, r3
 8005502:	f7fe ff01 	bl	8004308 <SVCCTL_UserEvtRx>
 8005506:	4603      	mov	r3, r0
 8005508:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800550a:	7afb      	ldrb	r3, [r7, #11]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d003      	beq.n	8005518 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2201      	movs	r2, #1
 8005514:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 8005516:	e002      	b.n	800551e <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	701a      	strb	r2, [r3, #0]
}
 800551e:	bf00      	nop
 8005520:	3710      	adds	r7, #16
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}

08005526 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 8005526:	b580      	push	{r7, lr}
 8005528:	b084      	sub	sp, #16
 800552a:	af00      	add	r7, sp, #0
 800552c:	4603      	mov	r3, r0
 800552e:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 8005530:	79fb      	ldrb	r3, [r7, #7]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d002      	beq.n	800553c <BLE_StatusNot+0x16>
 8005536:	2b01      	cmp	r3, #1
 8005538:	d006      	beq.n	8005548 <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 800553a:	e00b      	b.n	8005554 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800553c:	2307      	movs	r3, #7
 800553e:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8005540:	68f8      	ldr	r0, [r7, #12]
 8005542:	f000 fb0d 	bl	8005b60 <UTIL_SEQ_PauseTask>
      break;
 8005546:	e005      	b.n	8005554 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8005548:	2307      	movs	r3, #7
 800554a:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800554c:	68f8      	ldr	r0, [r7, #12]
 800554e:	f000 fb27 	bl	8005ba0 <UTIL_SEQ_ResumeTask>
      break;
 8005552:	bf00      	nop
  }
  return;
 8005554:	bf00      	nop
}
 8005556:	3710      	adds	r7, #16
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <P2PS_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	2b03      	cmp	r3, #3
 800556a:	d006      	beq.n	800557a <P2PS_STM_App_Notification+0x1e>
 800556c:	2b03      	cmp	r3, #3
 800556e:	dc06      	bgt.n	800557e <P2PS_STM_App_Notification+0x22>
 8005570:	2b00      	cmp	r3, #0
 8005572:	d006      	beq.n	8005582 <P2PS_STM_App_Notification+0x26>
 8005574:	2b01      	cmp	r3, #1
 8005576:	d006      	beq.n	8005586 <P2PS_STM_App_Notification+0x2a>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */

/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 8005578:	e001      	b.n	800557e <P2PS_STM_App_Notification+0x22>
      break;
 800557a:	bf00      	nop
 800557c:	e004      	b.n	8005588 <P2PS_STM_App_Notification+0x2c>
      break;
 800557e:	bf00      	nop
 8005580:	e002      	b.n	8005588 <P2PS_STM_App_Notification+0x2c>
      break;
 8005582:	bf00      	nop
 8005584:	e000      	b.n	8005588 <P2PS_STM_App_Notification+0x2c>
      break;
 8005586:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 8005588:	bf00      	nop
}
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d002      	beq.n	80055aa <P2PS_APP_Notification+0x16>
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d002      	beq.n	80055ae <P2PS_APP_Notification+0x1a>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 80055a8:	e002      	b.n	80055b0 <P2PS_APP_Notification+0x1c>
    break;
 80055aa:	bf00      	nop
 80055ac:	e000      	b.n	80055b0 <P2PS_APP_Notification+0x1c>
    break;
 80055ae:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 80055b0:	bf00      	nop
}
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 80055bc:	b480      	push	{r7}
 80055be:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */

/* USER CODE END P2PS_APP_Init */
  return;
 80055c0:	bf00      	nop
}
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr
	...

080055cc <LL_PWR_EnableBootC2>:
{
 80055cc:	b480      	push	{r7}
 80055ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80055d0:	4b05      	ldr	r3, [pc, #20]	; (80055e8 <LL_PWR_EnableBootC2+0x1c>)
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	4a04      	ldr	r2, [pc, #16]	; (80055e8 <LL_PWR_EnableBootC2+0x1c>)
 80055d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055da:	60d3      	str	r3, [r2, #12]
}
 80055dc:	bf00      	nop
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	58000400 	.word	0x58000400

080055ec <LL_C2_EXTI_EnableEvent_32_63>:
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80055f4:	4b06      	ldr	r3, [pc, #24]	; (8005610 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80055f6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80055fa:	4905      	ldr	r1, [pc, #20]	; (8005610 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4313      	orrs	r3, r2
 8005600:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8005604:	bf00      	nop
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr
 8005610:	58000800 	.word	0x58000800

08005614 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800561c:	4b05      	ldr	r3, [pc, #20]	; (8005634 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800561e:	6a1a      	ldr	r2, [r3, #32]
 8005620:	4904      	ldr	r1, [pc, #16]	; (8005634 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4313      	orrs	r3, r2
 8005626:	620b      	str	r3, [r1, #32]
}
 8005628:	bf00      	nop
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr
 8005634:	58000800 	.word	0x58000800

08005638 <LL_AHB3_GRP1_EnableClock>:
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8005640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005644:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005646:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4313      	orrs	r3, r2
 800564e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8005650:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005654:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4013      	ands	r3, r2
 800565a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800565c:	68fb      	ldr	r3, [r7, #12]
}
 800565e:	bf00      	nop
 8005660:	3714      	adds	r7, #20
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr

0800566a <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800566a:	b480      	push	{r7}
 800566c:	b085      	sub	sp, #20
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8005672:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005676:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800567a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4313      	orrs	r3, r2
 8005682:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8005686:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800568a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4013      	ands	r3, r2
 8005692:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005694:	68fb      	ldr	r3, [r7, #12]
}
 8005696:	bf00      	nop
 8005698:	3714      	adds	r7, #20
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr

080056a2 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 80056a2:	b480      	push	{r7}
 80056a4:	b083      	sub	sp, #12
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	601a      	str	r2, [r3, #0]
}
 80056b6:	bf00      	nop
 80056b8:	370c      	adds	r7, #12
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr

080056c2 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 80056c2:	b480      	push	{r7}
 80056c4:	b083      	sub	sp, #12
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f043 0201 	orr.w	r2, r3, #1
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	601a      	str	r2, [r3, #0]
}
 80056d6:	bf00      	nop
 80056d8:	370c      	adds	r7, #12
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr

080056e2 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80056e2:	b480      	push	{r7}
 80056e4:	b083      	sub	sp, #12
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
 80056ea:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685a      	ldr	r2, [r3, #4]
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	041b      	lsls	r3, r3, #16
 80056f4:	43db      	mvns	r3, r3
 80056f6:	401a      	ands	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	605a      	str	r2, [r3, #4]
}
 80056fc:	bf00      	nop
 80056fe:	370c      	adds	r7, #12
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685a      	ldr	r2, [r3, #4]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	43db      	mvns	r3, r3
 800571a:	401a      	ands	r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	605a      	str	r2, [r3, #4]
}
 8005720:	bf00      	nop
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	041a      	lsls	r2, r3, #16
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	609a      	str	r2, [r3, #8]
}
 800573e:	bf00      	nop
 8005740:	370c      	adds	r7, #12
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr

0800574a <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800574a:	b480      	push	{r7}
 800574c:	b083      	sub	sp, #12
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
 8005752:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	68da      	ldr	r2, [r3, #12]
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	4013      	ands	r3, r2
 800575c:	683a      	ldr	r2, [r7, #0]
 800575e:	429a      	cmp	r2, r3
 8005760:	d101      	bne.n	8005766 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8005762:	2301      	movs	r3, #1
 8005764:	e000      	b.n	8005768 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8005766:	2300      	movs	r3, #0
}
 8005768:	4618      	mov	r0, r3
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <HW_IPCC_Enable>:
}
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8005774:	b580      	push	{r7, lr}
 8005776:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8005778:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800577c:	f7ff ff75 	bl	800566a <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8005780:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005784:	f7ff ff32 	bl	80055ec <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8005788:	f44f 7000 	mov.w	r0, #512	; 0x200
 800578c:	f7ff ff42 	bl	8005614 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8005790:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8005792:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8005794:	f7ff ff1a 	bl	80055cc <LL_PWR_EnableBootC2>

  return;
 8005798:	bf00      	nop
}
 800579a:	bd80      	pop	{r7, pc}

0800579c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800579c:	b580      	push	{r7, lr}
 800579e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80057a0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80057a4:	f7ff ff48 	bl	8005638 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80057a8:	4806      	ldr	r0, [pc, #24]	; (80057c4 <HW_IPCC_Init+0x28>)
 80057aa:	f7ff ff8a 	bl	80056c2 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80057ae:	4805      	ldr	r0, [pc, #20]	; (80057c4 <HW_IPCC_Init+0x28>)
 80057b0:	f7ff ff77 	bl	80056a2 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80057b4:	202c      	movs	r0, #44	; 0x2c
 80057b6:	f7fb ff78 	bl	80016aa <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80057ba:	202d      	movs	r0, #45	; 0x2d
 80057bc:	f7fb ff75 	bl	80016aa <HAL_NVIC_EnableIRQ>

  return;
 80057c0:	bf00      	nop
}
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	58000c00 	.word	0x58000c00

080057c8 <HW_IPCC_BLE_Init>:
#endif
/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80057cc:	2101      	movs	r1, #1
 80057ce:	4802      	ldr	r0, [pc, #8]	; (80057d8 <HW_IPCC_BLE_Init+0x10>)
 80057d0:	f7ff ff9a 	bl	8005708 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80057d4:	bf00      	nop
}
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	58000c00 	.word	0x58000c00

080057dc <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_BLE_CMD_CHANNEL );
 80057e0:	2101      	movs	r1, #1
 80057e2:	4802      	ldr	r0, [pc, #8]	; (80057ec <HW_IPCC_BLE_SendCmd+0x10>)
 80057e4:	f7ff ffa2 	bl	800572c <LL_C1_IPCC_SetFlag_CHx>

  return;
 80057e8:	bf00      	nop
}
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	58000c00 	.word	0x58000c00

080057f0 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80057f4:	2102      	movs	r1, #2
 80057f6:	4802      	ldr	r0, [pc, #8]	; (8005800 <HW_IPCC_SYS_Init+0x10>)
 80057f8:	f7ff ff86 	bl	8005708 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80057fc:	bf00      	nop
}
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	58000c00 	.word	0x58000c00

08005804 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8005804:	b580      	push	{r7, lr}
 8005806:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8005808:	2102      	movs	r1, #2
 800580a:	4804      	ldr	r0, [pc, #16]	; (800581c <HW_IPCC_SYS_SendCmd+0x18>)
 800580c:	f7ff ff8e 	bl	800572c <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8005810:	2102      	movs	r1, #2
 8005812:	4802      	ldr	r0, [pc, #8]	; (800581c <HW_IPCC_SYS_SendCmd+0x18>)
 8005814:	f7ff ff65 	bl	80056e2 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8005818:	bf00      	nop
}
 800581a:	bd80      	pop	{r7, pc}
 800581c:	58000c00 	.word	0x58000c00

08005820 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8005828:	2108      	movs	r1, #8
 800582a:	480c      	ldr	r0, [pc, #48]	; (800585c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800582c:	f7ff ff8d 	bl	800574a <LL_C1_IPCC_IsActiveFlag_CHx>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d007      	beq.n	8005846 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8005836:	4a0a      	ldr	r2, [pc, #40]	; (8005860 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800583c:	2108      	movs	r1, #8
 800583e:	4807      	ldr	r0, [pc, #28]	; (800585c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8005840:	f7ff ff4f 	bl	80056e2 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8005844:	e006      	b.n	8005854 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4798      	blx	r3
    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800584a:	2108      	movs	r1, #8
 800584c:	4803      	ldr	r0, [pc, #12]	; (800585c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800584e:	f7ff ff6d 	bl	800572c <LL_C1_IPCC_SetFlag_CHx>
  return;
 8005852:	bf00      	nop
}
 8005854:	3708      	adds	r7, #8
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	58000c00 	.word	0x58000c00
 8005860:	20000238 	.word	0x20000238

08005864 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8005864:	b580      	push	{r7, lr}
 8005866:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8005868:	2108      	movs	r1, #8
 800586a:	4802      	ldr	r0, [pc, #8]	; (8005874 <HW_IPCC_TRACES_Init+0x10>)
 800586c:	f7ff ff4c 	bl	8005708 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8005870:	bf00      	nop
}
 8005872:	bd80      	pop	{r7, pc}
 8005874:	58000c00 	.word	0x58000c00

08005878 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8005878:	b480      	push	{r7}
 800587a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800587c:	4b05      	ldr	r3, [pc, #20]	; (8005894 <UTIL_LPM_Init+0x1c>)
 800587e:	2200      	movs	r2, #0
 8005880:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8005882:	4b05      	ldr	r3, [pc, #20]	; (8005898 <UTIL_LPM_Init+0x20>)
 8005884:	2200      	movs	r2, #0
 8005886:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8005888:	bf00      	nop
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	2000023c 	.word	0x2000023c
 8005898:	20000240 	.word	0x20000240

0800589c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800589c:	b480      	push	{r7}
 800589e:	b087      	sub	sp, #28
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	460b      	mov	r3, r1
 80058a6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058a8:	f3ef 8310 	mrs	r3, PRIMASK
 80058ac:	613b      	str	r3, [r7, #16]
  return(result);
 80058ae:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80058b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80058b2:	b672      	cpsid	i
}
 80058b4:	bf00      	nop
  
  switch(state)
 80058b6:	78fb      	ldrb	r3, [r7, #3]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d008      	beq.n	80058ce <UTIL_LPM_SetOffMode+0x32>
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d10e      	bne.n	80058de <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 80058c0:	4b0d      	ldr	r3, [pc, #52]	; (80058f8 <UTIL_LPM_SetOffMode+0x5c>)
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	4a0b      	ldr	r2, [pc, #44]	; (80058f8 <UTIL_LPM_SetOffMode+0x5c>)
 80058ca:	6013      	str	r3, [r2, #0]
      break;
 80058cc:	e008      	b.n	80058e0 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	43da      	mvns	r2, r3
 80058d2:	4b09      	ldr	r3, [pc, #36]	; (80058f8 <UTIL_LPM_SetOffMode+0x5c>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4013      	ands	r3, r2
 80058d8:	4a07      	ldr	r2, [pc, #28]	; (80058f8 <UTIL_LPM_SetOffMode+0x5c>)
 80058da:	6013      	str	r3, [r2, #0]
      break;
 80058dc:	e000      	b.n	80058e0 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 80058de:	bf00      	nop
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f383 8810 	msr	PRIMASK, r3
}
 80058ea:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80058ec:	bf00      	nop
 80058ee:	371c      	adds	r7, #28
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr
 80058f8:	20000240 	.word	0x20000240

080058fc <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b08c      	sub	sp, #48	; 0x30
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8005904:	4b67      	ldr	r3, [pc, #412]	; (8005aa4 <UTIL_SEQ_Run+0x1a8>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800590a:	4b66      	ldr	r3, [pc, #408]	; (8005aa4 <UTIL_SEQ_Run+0x1a8>)
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4013      	ands	r3, r2
 8005912:	4a64      	ldr	r2, [pc, #400]	; (8005aa4 <UTIL_SEQ_Run+0x1a8>)
 8005914:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8005916:	e083      	b.n	8005a20 <UTIL_SEQ_Run+0x124>
  {
    counter = 0U;
 8005918:	2300      	movs	r3, #0
 800591a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800591c:	e002      	b.n	8005924 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 800591e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005920:	3301      	adds	r3, #1
 8005922:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8005924:	4a60      	ldr	r2, [pc, #384]	; (8005aa8 <UTIL_SEQ_Run+0x1ac>)
 8005926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005928:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800592c:	4b5f      	ldr	r3, [pc, #380]	; (8005aac <UTIL_SEQ_Run+0x1b0>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	401a      	ands	r2, r3
 8005932:	4b5c      	ldr	r3, [pc, #368]	; (8005aa4 <UTIL_SEQ_Run+0x1a8>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4013      	ands	r3, r2
 8005938:	2b00      	cmp	r3, #0
 800593a:	d0f0      	beq.n	800591e <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 800593c:	4a5a      	ldr	r2, [pc, #360]	; (8005aa8 <UTIL_SEQ_Run+0x1ac>)
 800593e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005940:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8005944:	4b59      	ldr	r3, [pc, #356]	; (8005aac <UTIL_SEQ_Run+0x1b0>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	401a      	ands	r2, r3
 800594a:	4b56      	ldr	r3, [pc, #344]	; (8005aa4 <UTIL_SEQ_Run+0x1a8>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4013      	ands	r3, r2
 8005950:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8005952:	4a55      	ldr	r2, [pc, #340]	; (8005aa8 <UTIL_SEQ_Run+0x1ac>)
 8005954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005956:	00db      	lsls	r3, r3, #3
 8005958:	4413      	add	r3, r2
 800595a:	685a      	ldr	r2, [r3, #4]
 800595c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595e:	4013      	ands	r3, r2
 8005960:	2b00      	cmp	r3, #0
 8005962:	d106      	bne.n	8005972 <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8005964:	4a50      	ldr	r2, [pc, #320]	; (8005aa8 <UTIL_SEQ_Run+0x1ac>)
 8005966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005968:	00db      	lsls	r3, r3, #3
 800596a:	4413      	add	r3, r2
 800596c:	f04f 32ff 	mov.w	r2, #4294967295
 8005970:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8005972:	4a4d      	ldr	r2, [pc, #308]	; (8005aa8 <UTIL_SEQ_Run+0x1ac>)
 8005974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005976:	00db      	lsls	r3, r3, #3
 8005978:	4413      	add	r3, r2
 800597a:	685a      	ldr	r2, [r3, #4]
 800597c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597e:	4013      	ands	r3, r2
 8005980:	4618      	mov	r0, r3
 8005982:	f000 f99d 	bl	8005cc0 <SEQ_BitPosition>
 8005986:	4603      	mov	r3, r0
 8005988:	461a      	mov	r2, r3
 800598a:	4b49      	ldr	r3, [pc, #292]	; (8005ab0 <UTIL_SEQ_Run+0x1b4>)
 800598c:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800598e:	4a46      	ldr	r2, [pc, #280]	; (8005aa8 <UTIL_SEQ_Run+0x1ac>)
 8005990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005992:	00db      	lsls	r3, r3, #3
 8005994:	4413      	add	r3, r2
 8005996:	685a      	ldr	r2, [r3, #4]
 8005998:	4b45      	ldr	r3, [pc, #276]	; (8005ab0 <UTIL_SEQ_Run+0x1b4>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2101      	movs	r1, #1
 800599e:	fa01 f303 	lsl.w	r3, r1, r3
 80059a2:	43db      	mvns	r3, r3
 80059a4:	401a      	ands	r2, r3
 80059a6:	4940      	ldr	r1, [pc, #256]	; (8005aa8 <UTIL_SEQ_Run+0x1ac>)
 80059a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059aa:	00db      	lsls	r3, r3, #3
 80059ac:	440b      	add	r3, r1
 80059ae:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059b0:	f3ef 8310 	mrs	r3, PRIMASK
 80059b4:	61bb      	str	r3, [r7, #24]
  return(result);
 80059b6:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80059b8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80059ba:	b672      	cpsid	i
}
 80059bc:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 80059be:	4b3c      	ldr	r3, [pc, #240]	; (8005ab0 <UTIL_SEQ_Run+0x1b4>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2201      	movs	r2, #1
 80059c4:	fa02 f303 	lsl.w	r3, r2, r3
 80059c8:	43da      	mvns	r2, r3
 80059ca:	4b3a      	ldr	r3, [pc, #232]	; (8005ab4 <UTIL_SEQ_Run+0x1b8>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4013      	ands	r3, r2
 80059d0:	4a38      	ldr	r2, [pc, #224]	; (8005ab4 <UTIL_SEQ_Run+0x1b8>)
 80059d2:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80059d4:	2302      	movs	r3, #2
 80059d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059d8:	e013      	b.n	8005a02 <UTIL_SEQ_Run+0x106>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80059da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059dc:	3b01      	subs	r3, #1
 80059de:	4a32      	ldr	r2, [pc, #200]	; (8005aa8 <UTIL_SEQ_Run+0x1ac>)
 80059e0:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80059e4:	4b32      	ldr	r3, [pc, #200]	; (8005ab0 <UTIL_SEQ_Run+0x1b4>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2201      	movs	r2, #1
 80059ea:	fa02 f303 	lsl.w	r3, r2, r3
 80059ee:	43da      	mvns	r2, r3
 80059f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f2:	3b01      	subs	r3, #1
 80059f4:	400a      	ands	r2, r1
 80059f6:	492c      	ldr	r1, [pc, #176]	; (8005aa8 <UTIL_SEQ_Run+0x1ac>)
 80059f8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80059fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059fe:	3b01      	subs	r3, #1
 8005a00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1e8      	bne.n	80059da <UTIL_SEQ_Run+0xde>
 8005a08:	6a3b      	ldr	r3, [r7, #32]
 8005a0a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	f383 8810 	msr	PRIMASK, r3
}
 8005a12:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8005a14:	4b26      	ldr	r3, [pc, #152]	; (8005ab0 <UTIL_SEQ_Run+0x1b4>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a27      	ldr	r2, [pc, #156]	; (8005ab8 <UTIL_SEQ_Run+0x1bc>)
 8005a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a1e:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8005a20:	4b24      	ldr	r3, [pc, #144]	; (8005ab4 <UTIL_SEQ_Run+0x1b8>)
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	4b21      	ldr	r3, [pc, #132]	; (8005aac <UTIL_SEQ_Run+0x1b0>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	401a      	ands	r2, r3
 8005a2a:	4b1e      	ldr	r3, [pc, #120]	; (8005aa4 <UTIL_SEQ_Run+0x1a8>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4013      	ands	r3, r2
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d007      	beq.n	8005a44 <UTIL_SEQ_Run+0x148>
 8005a34:	4b21      	ldr	r3, [pc, #132]	; (8005abc <UTIL_SEQ_Run+0x1c0>)
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	4b21      	ldr	r3, [pc, #132]	; (8005ac0 <UTIL_SEQ_Run+0x1c4>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	f43f af6a 	beq.w	8005918 <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8005a44:	4b1a      	ldr	r3, [pc, #104]	; (8005ab0 <UTIL_SEQ_Run+0x1b4>)
 8005a46:	f04f 32ff 	mov.w	r2, #4294967295
 8005a4a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8005a4c:	f000 f92a 	bl	8005ca4 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a50:	f3ef 8310 	mrs	r3, PRIMASK
 8005a54:	613b      	str	r3, [r7, #16]
  return(result);
 8005a56:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8005a58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8005a5a:	b672      	cpsid	i
}
 8005a5c:	bf00      	nop
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 8005a5e:	4b15      	ldr	r3, [pc, #84]	; (8005ab4 <UTIL_SEQ_Run+0x1b8>)
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	4b12      	ldr	r3, [pc, #72]	; (8005aac <UTIL_SEQ_Run+0x1b0>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	401a      	ands	r2, r3
 8005a68:	4b0e      	ldr	r3, [pc, #56]	; (8005aa4 <UTIL_SEQ_Run+0x1a8>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d108      	bne.n	8005a84 <UTIL_SEQ_Run+0x188>
 8005a72:	4b12      	ldr	r3, [pc, #72]	; (8005abc <UTIL_SEQ_Run+0x1c0>)
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	4b12      	ldr	r3, [pc, #72]	; (8005ac0 <UTIL_SEQ_Run+0x1c4>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d101      	bne.n	8005a84 <UTIL_SEQ_Run+0x188>
  {
	UTIL_SEQ_Idle( );
 8005a80:	f7fa fc39 	bl	80002f6 <UTIL_SEQ_Idle>
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f383 8810 	msr	PRIMASK, r3
}
 8005a8e:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 8005a90:	f000 f90f 	bl	8005cb2 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8005a94:	4a03      	ldr	r2, [pc, #12]	; (8005aa4 <UTIL_SEQ_Run+0x1a8>)
 8005a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a98:	6013      	str	r3, [r2, #0]

  return;
 8005a9a:	bf00      	nop
}
 8005a9c:	3730      	adds	r7, #48	; 0x30
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	20000020 	.word	0x20000020
 8005aa8:	200002d4 	.word	0x200002d4
 8005aac:	2000001c 	.word	0x2000001c
 8005ab0:	20000250 	.word	0x20000250
 8005ab4:	20000244 	.word	0x20000244
 8005ab8:	20000254 	.word	0x20000254
 8005abc:	20000248 	.word	0x20000248
 8005ac0:	2000024c 	.word	0x2000024c

08005ac4 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b088      	sub	sp, #32
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ad0:	f3ef 8310 	mrs	r3, PRIMASK
 8005ad4:	617b      	str	r3, [r7, #20]
  return(result);
 8005ad6:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8005ad8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8005ada:	b672      	cpsid	i
}
 8005adc:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	f000 f8ee 	bl	8005cc0 <SEQ_BitPosition>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	4a06      	ldr	r2, [pc, #24]	; (8005b04 <UTIL_SEQ_RegTask+0x40>)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	f383 8810 	msr	PRIMASK, r3
}
 8005afa:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8005afc:	bf00      	nop
}
 8005afe:	3720      	adds	r7, #32
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	20000254 	.word	0x20000254

08005b08 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b087      	sub	sp, #28
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b12:	f3ef 8310 	mrs	r3, PRIMASK
 8005b16:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b18:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8005b1a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005b1c:	b672      	cpsid	i
}
 8005b1e:	bf00      	nop

  TaskSet |= TaskId_bm;
 8005b20:	4b0d      	ldr	r3, [pc, #52]	; (8005b58 <UTIL_SEQ_SetTask+0x50>)
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	4a0b      	ldr	r2, [pc, #44]	; (8005b58 <UTIL_SEQ_SetTask+0x50>)
 8005b2a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8005b2c:	4a0b      	ldr	r2, [pc, #44]	; (8005b5c <UTIL_SEQ_SetTask+0x54>)
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	431a      	orrs	r2, r3
 8005b38:	4908      	ldr	r1, [pc, #32]	; (8005b5c <UTIL_SEQ_SetTask+0x54>)
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	f383 8810 	msr	PRIMASK, r3
}
 8005b4a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8005b4c:	bf00      	nop
}
 8005b4e:	371c      	adds	r7, #28
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr
 8005b58:	20000244 	.word	0x20000244
 8005b5c:	200002d4 	.word	0x200002d4

08005b60 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8005b60:	b480      	push	{r7}
 8005b62:	b087      	sub	sp, #28
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b68:	f3ef 8310 	mrs	r3, PRIMASK
 8005b6c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8005b70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005b72:	b672      	cpsid	i
}
 8005b74:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	43da      	mvns	r2, r3
 8005b7a:	4b08      	ldr	r3, [pc, #32]	; (8005b9c <UTIL_SEQ_PauseTask+0x3c>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4013      	ands	r3, r2
 8005b80:	4a06      	ldr	r2, [pc, #24]	; (8005b9c <UTIL_SEQ_PauseTask+0x3c>)
 8005b82:	6013      	str	r3, [r2, #0]
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	f383 8810 	msr	PRIMASK, r3
}
 8005b8e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8005b90:	bf00      	nop
}
 8005b92:	371c      	adds	r7, #28
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr
 8005b9c:	2000001c 	.word	0x2000001c

08005ba0 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b087      	sub	sp, #28
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ba8:	f3ef 8310 	mrs	r3, PRIMASK
 8005bac:	60fb      	str	r3, [r7, #12]
  return(result);
 8005bae:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8005bb0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005bb2:	b672      	cpsid	i
}
 8005bb4:	bf00      	nop

  TaskMask |= TaskId_bm;
 8005bb6:	4b09      	ldr	r3, [pc, #36]	; (8005bdc <UTIL_SEQ_ResumeTask+0x3c>)
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	4a07      	ldr	r2, [pc, #28]	; (8005bdc <UTIL_SEQ_ResumeTask+0x3c>)
 8005bc0:	6013      	str	r3, [r2, #0]
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	f383 8810 	msr	PRIMASK, r3
}
 8005bcc:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8005bce:	bf00      	nop
}
 8005bd0:	371c      	adds	r7, #28
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	2000001c 	.word	0x2000001c

08005be0 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8005be0:	b480      	push	{r7}
 8005be2:	b087      	sub	sp, #28
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005be8:	f3ef 8310 	mrs	r3, PRIMASK
 8005bec:	60fb      	str	r3, [r7, #12]
  return(result);
 8005bee:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8005bf0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005bf2:	b672      	cpsid	i
}
 8005bf4:	bf00      	nop

  EvtSet |= EvtId_bm;
 8005bf6:	4b09      	ldr	r3, [pc, #36]	; (8005c1c <UTIL_SEQ_SetEvt+0x3c>)
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	4a07      	ldr	r2, [pc, #28]	; (8005c1c <UTIL_SEQ_SetEvt+0x3c>)
 8005c00:	6013      	str	r3, [r2, #0]
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	f383 8810 	msr	PRIMASK, r3
}
 8005c0c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8005c0e:	bf00      	nop
}
 8005c10:	371c      	adds	r7, #28
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	20000248 	.word	0x20000248

08005c20 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b086      	sub	sp, #24
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8005c28:	4b1b      	ldr	r3, [pc, #108]	; (8005c98 <UTIL_SEQ_WaitEvt+0x78>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	613b      	str	r3, [r7, #16]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8005c2e:	4b1a      	ldr	r3, [pc, #104]	; (8005c98 <UTIL_SEQ_WaitEvt+0x78>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c36:	d102      	bne.n	8005c3e <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	617b      	str	r3, [r7, #20]
 8005c3c:	e005      	b.n	8005c4a <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 8005c3e:	4b16      	ldr	r3, [pc, #88]	; (8005c98 <UTIL_SEQ_WaitEvt+0x78>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2201      	movs	r2, #1
 8005c44:	fa02 f303 	lsl.w	r3, r2, r3
 8005c48:	617b      	str	r3, [r7, #20]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8005c4a:	4b14      	ldr	r3, [pc, #80]	; (8005c9c <UTIL_SEQ_WaitEvt+0x7c>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	60fb      	str	r3, [r7, #12]
  EvtWaited = EvtId_bm;
 8005c50:	4a12      	ldr	r2, [pc, #72]	; (8005c9c <UTIL_SEQ_WaitEvt+0x7c>)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 8005c56:	e005      	b.n	8005c64 <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 8005c58:	4b10      	ldr	r3, [pc, #64]	; (8005c9c <UTIL_SEQ_WaitEvt+0x7c>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	6978      	ldr	r0, [r7, #20]
 8005c60:	f7fa fb50 	bl	8000304 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 8005c64:	4b0e      	ldr	r3, [pc, #56]	; (8005ca0 <UTIL_SEQ_WaitEvt+0x80>)
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	4b0c      	ldr	r3, [pc, #48]	; (8005c9c <UTIL_SEQ_WaitEvt+0x7c>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d0f2      	beq.n	8005c58 <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8005c72:	4a09      	ldr	r2, [pc, #36]	; (8005c98 <UTIL_SEQ_WaitEvt+0x78>)
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	6013      	str	r3, [r2, #0]

  EvtSet &= (~EvtWaited);
 8005c78:	4b08      	ldr	r3, [pc, #32]	; (8005c9c <UTIL_SEQ_WaitEvt+0x7c>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	43da      	mvns	r2, r3
 8005c7e:	4b08      	ldr	r3, [pc, #32]	; (8005ca0 <UTIL_SEQ_WaitEvt+0x80>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4013      	ands	r3, r2
 8005c84:	4a06      	ldr	r2, [pc, #24]	; (8005ca0 <UTIL_SEQ_WaitEvt+0x80>)
 8005c86:	6013      	str	r3, [r2, #0]
  EvtWaited = event_waited_id_backup;
 8005c88:	4a04      	ldr	r2, [pc, #16]	; (8005c9c <UTIL_SEQ_WaitEvt+0x7c>)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6013      	str	r3, [r2, #0]

  return;
 8005c8e:	bf00      	nop
}
 8005c90:	3718      	adds	r7, #24
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	20000250 	.word	0x20000250
 8005c9c:	2000024c 	.word	0x2000024c
 8005ca0:	20000248 	.word	0x20000248

08005ca4 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8005ca8:	bf00      	nop
}
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr

08005cb2 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8005cb2:	b480      	push	{r7}
 8005cb4:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8005cb6:	bf00      	nop
}
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	0c1b      	lsrs	r3, r3, #16
 8005cd0:	041b      	lsls	r3, r3, #16
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d104      	bne.n	8005ce0 <SEQ_BitPosition+0x20>
 8005cd6:	2310      	movs	r3, #16
 8005cd8:	73fb      	strb	r3, [r7, #15]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	041b      	lsls	r3, r3, #16
 8005cde:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d105      	bne.n	8005cf6 <SEQ_BitPosition+0x36>
 8005cea:	7bfb      	ldrb	r3, [r7, #15]
 8005cec:	3308      	adds	r3, #8
 8005cee:	73fb      	strb	r3, [r7, #15]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	021b      	lsls	r3, r3, #8
 8005cf4:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d105      	bne.n	8005d0c <SEQ_BitPosition+0x4c>
 8005d00:	7bfb      	ldrb	r3, [r7, #15]
 8005d02:	3304      	adds	r3, #4
 8005d04:	73fb      	strb	r3, [r7, #15]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	011b      	lsls	r3, r3, #4
 8005d0a:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	0f1b      	lsrs	r3, r3, #28
 8005d10:	4a07      	ldr	r2, [pc, #28]	; (8005d30 <SEQ_BitPosition+0x70>)
 8005d12:	5cd2      	ldrb	r2, [r2, r3]
 8005d14:	7bfb      	ldrb	r3, [r7, #15]
 8005d16:	4413      	add	r3, r2
 8005d18:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8005d1a:	7bfb      	ldrb	r3, [r7, #15]
 8005d1c:	f1c3 031f 	rsb	r3, r3, #31
 8005d20:	b2db      	uxtb	r3, r3
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3714      	adds	r7, #20
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	08005ff4 	.word	0x08005ff4

08005d34 <__libc_init_array>:
 8005d34:	b570      	push	{r4, r5, r6, lr}
 8005d36:	4d0d      	ldr	r5, [pc, #52]	; (8005d6c <__libc_init_array+0x38>)
 8005d38:	4c0d      	ldr	r4, [pc, #52]	; (8005d70 <__libc_init_array+0x3c>)
 8005d3a:	1b64      	subs	r4, r4, r5
 8005d3c:	10a4      	asrs	r4, r4, #2
 8005d3e:	2600      	movs	r6, #0
 8005d40:	42a6      	cmp	r6, r4
 8005d42:	d109      	bne.n	8005d58 <__libc_init_array+0x24>
 8005d44:	4d0b      	ldr	r5, [pc, #44]	; (8005d74 <__libc_init_array+0x40>)
 8005d46:	4c0c      	ldr	r4, [pc, #48]	; (8005d78 <__libc_init_array+0x44>)
 8005d48:	f000 f82e 	bl	8005da8 <_init>
 8005d4c:	1b64      	subs	r4, r4, r5
 8005d4e:	10a4      	asrs	r4, r4, #2
 8005d50:	2600      	movs	r6, #0
 8005d52:	42a6      	cmp	r6, r4
 8005d54:	d105      	bne.n	8005d62 <__libc_init_array+0x2e>
 8005d56:	bd70      	pop	{r4, r5, r6, pc}
 8005d58:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d5c:	4798      	blx	r3
 8005d5e:	3601      	adds	r6, #1
 8005d60:	e7ee      	b.n	8005d40 <__libc_init_array+0xc>
 8005d62:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d66:	4798      	blx	r3
 8005d68:	3601      	adds	r6, #1
 8005d6a:	e7f2      	b.n	8005d52 <__libc_init_array+0x1e>
 8005d6c:	08006004 	.word	0x08006004
 8005d70:	08006004 	.word	0x08006004
 8005d74:	08006004 	.word	0x08006004
 8005d78:	08006008 	.word	0x08006008

08005d7c <memcpy>:
 8005d7c:	440a      	add	r2, r1
 8005d7e:	4291      	cmp	r1, r2
 8005d80:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d84:	d100      	bne.n	8005d88 <memcpy+0xc>
 8005d86:	4770      	bx	lr
 8005d88:	b510      	push	{r4, lr}
 8005d8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d92:	4291      	cmp	r1, r2
 8005d94:	d1f9      	bne.n	8005d8a <memcpy+0xe>
 8005d96:	bd10      	pop	{r4, pc}

08005d98 <memset>:
 8005d98:	4402      	add	r2, r0
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d100      	bne.n	8005da2 <memset+0xa>
 8005da0:	4770      	bx	lr
 8005da2:	f803 1b01 	strb.w	r1, [r3], #1
 8005da6:	e7f9      	b.n	8005d9c <memset+0x4>

08005da8 <_init>:
 8005da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005daa:	bf00      	nop
 8005dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dae:	bc08      	pop	{r3}
 8005db0:	469e      	mov	lr, r3
 8005db2:	4770      	bx	lr

08005db4 <_fini>:
 8005db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005db6:	bf00      	nop
 8005db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dba:	bc08      	pop	{r3}
 8005dbc:	469e      	mov	lr, r3
 8005dbe:	4770      	bx	lr
